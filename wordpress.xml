<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2012-09-06 04:08"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Timothy Fitz</title>
	<link>http://timothyfitz.wordpress.com</link>
	<description></description>
	<pubDate>Thu, 06 Sep 2012 04:08:16 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://timothyfitz.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>6738078</wp:author_id><wp:author_login>timothyfitz</wp:author_login><wp:author_email>TimothyFitz@gmail.com</wp:author_email><wp:author_display_name><![CDATA[timothyfitz]]></wp:author_display_name><wp:author_first_name><![CDATA[Timothy]]></wp:author_first_name><wp:author_last_name><![CDATA[Fitz]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>

	<generator>http://wordpress.com/</generator>
<cloud domain='timothyfitz.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Timothy Fitz</title>
		<link>http://timothyfitz.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://timothyfitz.wordpress.com/osd.xml" title="Timothy Fitz" />
	<atom:link rel='hub' href='http://timothyfitz.wordpress.com/?pushpress=hub'/>

	<item>
		<title>Blood Pact Blogging</title>
		<link>http://timothyfitz.wordpress.com/2009/02/07/3/</link>
		<pubDate>Sat, 07 Feb 2009 06:48:54 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[I always think to myself  "That guy is wrong, and I could've written a much better post on that topic" ...and yet it never happens. So I'm stating it here for everyone to see: I'm going to write a useful, hopefully witty and interesting blog posts every day for a whole month.

Consider it reverse cold turkey quitting. 

It'd be stupid if I were doing it alone, but I've managed to convince 9 other people to make the same pact with me. I've even gone ahead and picked an overly dramatic name for the event, "Blood Pact Blogging". I mean if ten people agree it must be smart, right?

I'm not sure what's actually going to happen. Will we make it? How many will fall? Will it suck? 

For posterity, here's what I hope we each accomplish:
<ul>
	<li>Get better at writing.</li>
	<li>Write more in general.</li>
	<li>Writing comes more easily.</li>
	<li>Publishing comes more easily.</li>
	<li>Generate some traffic, readers, and discussion.</li>
	<li>Learn something.</li>
	<li>Have fun.</li>
	<li>Write under pressure.</li>
	<li>Write about something we didn't think we'd write about.</li>
</ul>
Should I  only experience a couple of these bullet points, this will have been worth it. And along the way, a whole bunch of my friends will have written a whole bunch of neat things!

Wish us luck, and if you're interested in following our progress go to <a href="http://egometry.com/bloodpact/">http://egometry.com/bloodpact/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2009-02-07 06:48:54</wp:post_date>
		<wp:post_date_gmt>2009-02-07 06:48:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-07 08:28:30</wp:comment_date>
			<wp:comment_date_gmt>2009-02-07 08:28:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[...I've already wrote about something I didn't think I would.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Brandi Jones]]></wp:comment_author>
			<wp:comment_author_email>brandijones@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>161.242.10.254</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 05:41:42</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 13:41:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good luck! If you make it, you should push yourself even further.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse Andrews]]></wp:comment_author>
			<wp:comment_author_email>anotherjesse@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://overstimulate.com</wp:comment_author_url>
			<wp:comment_author_IP>71.134.234.5</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 12:34:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 20:34:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you realize the amount of reading you are going to make us do.

Please stop writing interesting stuff  ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Jessy]]></wp:comment_author>
			<wp:comment_author_email>jessy.cowansharp@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.quaternio.net</wp:comment_author_url>
			<wp:comment_author_IP>69.228.190.230</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 15:56:47</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 23:56:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mckenty and i are IN! (crap i said it out loud...)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1071866</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Joshua McKenty]]></wp:comment_author>
			<wp:comment_author_email>jmckenty@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cognition.ca</wp:comment_author_url>
			<wp:comment_author_IP>143.232.230.12</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 16:25:24</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 00:25:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just cause Jessy, anotherjesse and Jeff all know me, doesn't mean that Fitz does. Hey Fitz, I'm McKenty. Let's do this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 16:26:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 00:26:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[McKenty: I've totally read your blog before, and thought to myself, if only I could grow such a mustache as that; had no idea you were foaf!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Darrell Gallion]]></wp:comment_author>
			<wp:comment_author_email>dgallion1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.93.18.136</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 19:41:51</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 03:41:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article, well worth the read.

If I hear your correctly.
Your site evolves according to customer demand with some dead ends cut off as needed.

Its obvious that customer input is critical to a good product.
Yet never considered the power of constant feedback.

I've been thinking about this for systems at customer sites.
Like the various OS update tools but with a simple customer controlled rollback.
Similar to distributed version control tools. 

Would you be the same Timothy from Rochester, NY ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[Giant Communist Robots &raquo; Time Out]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://giant-communist-robots.com/?p=133</wp:comment_author_url>
			<wp:comment_author_IP>209.223.7.197</wp:comment_author_IP>
			<wp:comment_date>2009-02-22 19:23:38</wp:comment_date>
			<wp:comment_date_gmt>2009-02-23 03:23:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] on February 6th, I somehow let myself get sucked into a project: blog about something every day for a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Continuous Deployment</title>
		<link>http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/</link>
		<pubDate>Sun, 08 Feb 2009 08:31:19 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[<div>Alex has just written a refactoring of some website backend code. Since it was a small task, it's committed and Alex moves on to the next feature.</div>
<div> </div>
<div>When the code is deployed in production two weeks later it causes the entire site to go down. A one-character typo which was missed by automated tests caused a failure cascade reminiscent of the bad-old-days at twitter. It takes eight hours of downtime to isolate the problem, produce a one character fix, deploy it and bring production back up.</div>
<div> </div>
<div>Alex curses luck, blames human infallibility, inevitable cost of software engineering and moves on to the next task.</div>
<div> </div>
<div>This story is the day-to-day of most startups I know. It sucks. Alex has a problem and she doesn't even know it. Her development practices are unsustainable. "Stupid mistakes" like the one she made increase as the product grows more complex and as the team gets larger. Alex needs to switch to a scalable solution.</div>
<div> </div>
<div>Before I get to the solution, let me tell you about some common non-solutions. While these are solutions to real problems, they aren't the solution to Alex's problem.</div>
<div> </div>
<div>1. More manual testing.</div>
<div>This obviously doesn't scale with complexity. This also literally can't catch every problem, because your test sandboxes or test clusters will never be exactly like the production system.</div>
<div> </div>
<div>2. More up-front planning</div>
<div>Up-front planning is like spices in a cooking recipe. I can't tell you how much is too little and I can't tell you how much is too much. But I will tell you not to have too little or too much, because those definitely ruin the food or product. The natural tendency of over planning is to concentrate on non-real issues. Now you'll be making more stupid mistakes, but they'll be for requirements that won't ever matter. </div>
<div> </div>
<div>3. More automated testing.</div>
<div>Automated testing is great. More automated testing is even better. No amount of automated testing ensures that a feature given to real humans will survive, because no automated tests are as brutal, random, malicious, ignorant or aggressive as the sum of all your users will be.</div>
<div> </div>
<div>4. Code reviews and pairing</div>
<div>Great practices. They'll increase code quality, prevent defects and educate your developers. While they can go a long way to mitigating defects, ultimately they're limited by the fact that while two humans are better than one, they're still both human. These techniques only catch the failures your organization as a whole already was capable of discovering.</div>
<div> </div>
<div>5. Ship more infrequently</div>
<div>While this may decrease downtime (things break and you roll back), the cost on development time from work and rework will be large, and mistakes will continue to slip through. The natural tendency will be to ship even more infrequently, until you aren't shipping at all. Then you've gone and forced yourself into a total rewrite. Which will also be doomed.</div>
<div> </div>
<div>So what should Alex do? Continuously deploy. Every commit should be instantly deployed to production. Let's walk through her story again, assuming she had such an ideal implementation of Continuous Deployment.</div>
<div>Alex commits. Minutes later warnings go off that the cluster is no longer healthy. The failure is easily correlated to Alex's change and her change is reverted. Alex spends minimal time debugging, finding the now obvious typo with ease. Her changes still caused a failure cascade, but the downtime was minimal. </div>
<div> </div>
<div>This is a software release process implementation of the classic Fail Fast pattern. The closer a failure is to the point where it was introduced, the more data you have to correct for that failure. In code Fail Fast means raising an exception on invalid input, instead of waiting for it to break somewhere later. In a software release process Fail Fast means releasing undeployed code as fast as possible, instead of waiting for a weekly release to break.</div>
<div> </div>
<div>Continuous Deployment is simple: just ship your code to customers as often as possible. Maybe today that's weekly instead of monthly, but over time you'll approach the ideal and you'll see the incremental benefits along the way.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2009-02-08 08:31:19</wp:post_date>
		<wp:post_date_gmt>2009-02-08 08:31:19</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-deployment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Erik A. Brandstadmoen]]></wp:comment_author>
			<wp:comment_author_email>erik.brandstadmoen@webstep.no</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.114.240.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 18:05:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-08 18:05:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry, this might be good enough for play-like services, but it is not good enough for critical systems as financial systems. A simple non-availability failure is always your best case scenario. Suppose Alex made an error that had large financial consequences, such as transferring an erroneous amount, or transferring it to the wrong recipient.

I definitely think extensive manual and automatic testing are necessary, of which automatic testing may reduce the number of "program domain" errors, but manual testing will definitely catch more of the "business domain" errors.

In real life, I don't think you approach is good enough. Of course, more frequent releases could make the developer more aware of what actually caused the error, but suppose it wasn't just a one-character error, and took some hours to nail down and fix, what is your backup plan? And what consequences are you able to bear, due to insuficcient testing?

Interesting theory, but I don't agree :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[drewp]]></wp:comment_author>
			<wp:comment_author_email>drewp@bigasterisk.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.204.188.29</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 04:20:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 04:20:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Erik: you aren't totally clear about it, but it sounds like you think "non-solution" #1 is a good plan. So do you also think it scales suitably? Do some companies just need to have QA depts five times the size of their development groups? IMHO, manual testing has only two advantages: it's the easiest thing to [try to] do; and it has a lovely accountability chain. You can always blame the developer, and non-technical people will easily accept that this is the "inevitable cost of software engineering".

As to your last question, I think the idea is that your operations people should be able to roll backwards as fast as they roll forwards, which they can do in the cases that a bugfix is taking too long. 

I especially liked the discussion of pattern #5 (release less often), since it appears to work perfectly *according to the consumers of the code*. They wanted fewer buggy release events, and they get that. If the bug-fixing effort was actually fixed at, say, 8-man-hours-per-release, this would actually be a winner. But the point is that it's not; the faster you release, the easier each bug is to fix. The difficulty of fixing bugs also goes way up in a large system with many interdependencies. Maybe this means that as your system gets more interdependencies, you should crank up the deployment speed?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Florenzano]]></wp:comment_author>
			<wp:comment_author_email>floguy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.eflorenzano.com/</wp:comment_author_url>
			<wp:comment_author_IP>24.130.142.231</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 05:22:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 05:22:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like the idea, but it would certainly make it more difficult to implement larger features slowly.  Instead of encouraging many atomic commits, you would be encouraging the developer to produce one monolithic commit with the complete new feature.

P.S. Who is Alex? :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:24:17</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 07:24:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am guessing "Alex" is "Some random token guy with a name of someone who Tim doesn't personally know."]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-08 23:25:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 07:25:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[...How odd.  I just posted six hours prior to the post I was responding to.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.7.53.122</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 00:04:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 08:04:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Erik: drewp beat me to answering your questions, and his answers are exactly what I would have written.

Ben: The timing issue is a hiccup from when I switched the blog from UTC to PST. Also Alex is a she.

Eric: This system and continuous integration go hand in hand. With Continuous Integration you commit as often as you can, and keep a green build (tests passing) on trunk. With Continuous Deployment you deploy each of those commits. Now you don't just think you have a shippable build, you have a shipped build. You know it's good.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[CanonicalChris]]></wp:comment_author>
			<wp:comment_author_email>Robert.Kahlert@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.202.71.204</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 06:20:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 14:20:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How is this different from conceptualizing your customers as the unpaid extended QA department you either cannot afford or cannot properly simulate? And how will that make your customers feel once they figure that out?

Or put differently: The question that DrewP's reply does not answer is how to you balance the customer satisfaction against the ease of debugging.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Erik A. Brandstadmoen]]></wp:comment_author>
			<wp:comment_author_email>erik.brandstadmoen@webstep.no</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.203.151.150</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 09:15:34</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 17:15:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[drewp and Timothy:

Maybe I focused too much on solution #1 because I totally see the value of manual testing. Of course, I absolutely agree that automatic testing and automatic quality gates are necessary, and makes the quality of the product you ship to the testers much, much higher.

However, regarding rollback, it's not a case of just rolling back to the former version if something was buggy. Suppose you have a few hundred thousand users in a financial transactional application. Who is going to clean up all the faulty transactions created during the uptime of the faulty version? This is my point. A rollback is often harder relating to already committed, unwanted transactions, that relating to simply non-functional software.

I do agree in that it is a good strategy to deploy continuously, but, and mark my but, to a test environment, with test data. That way you don't risk messing up your (more correctly your customers') real-life data.

As you state in your original article, no automated tests are able of capturing all possible scenarios. This is why I would prefer a lot of testers testing the solution before letting it loose on real-life data.

What are your thoughts on the possibility of data corruption in your deploy-continuously scenario?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Gadd]]></wp:comment_author>
			<wp:comment_author_email>kevin.gadd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://luminance.org/</wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 15:57:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 23:57:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Erik: What is the strategy you suggest that has less risk of data corruption than deploy-continuously w/automated tests and rollback? The only way to completely avoid data corruption on your production servers would be to only run perfect code on your production servers, so we've got to be talking about some sort of quality tradeoff where you can decrease the potential of data corruption in production by paying some other cost (slower commit-test-deploy cycles, larger engineering team, etc.)

It seems to me, though, that even if you can reduce the potential for data corruption by deploying less often or using more stringent code review strategies, you still have to account for data corruption. No matter what, eventually you're going to get some faulty transactions in your financial system's tables. When that happens, you need to have a rock-solid strategy for verifying the data you've got and getting rid of/repairing the bad data.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Erik A. Brandstadmoen]]></wp:comment_author>
			<wp:comment_author_email>erik.brandstadmoen@webstep.no</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.114.240.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 00:32:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 08:32:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Kevin,

I appreciate that all the strategies mentioned in the original post are valuable pieces in a best-effort to try to reduce the risks of getting faulty code on your production servers. I have experiences from my consulting, where quality control is based almost only on a huge, manual testing period at the time between code freeze and release to customers. And I am painfully aware that in most cases, this is not sufficient for discovering all possible scenarios and faults.

You are right. The only way to completely avoid data corruption is to run perfect code on production servers :) The subject of the discussion is how we end up as close to this aim as possible, in the best way. I think removing all "quality gates" between checkin and releasing to customers is not the best way. And I think the downtime and/or faulty behaviour for customers would increase drastically if we use them for first-level testing.

I think one strategy for reducing risk is:

1) Nightly builds and/or continous integration builds - discovers build errors
2) Fine-grained unit tests - discovers (some) programming logic errors
2) Nightly and/or continous run of cleverly-crafted, replayable, self-contained functionality-tests, discovers basic functional flaws.
3) Testing of nightly builds on a daily basis - to discover more subtle logic flaws (this is expensive, do as much as you can afford)
4) Frequent or more infrequent "release candidate" builds (depending on your needs/wishes), which gets released to internal test teams for thorough testing including regression testing - hopefully rules out most errors.
5) Internal test on production data, if 4) is carried out successfully and approved by a test manager - rules out more difficult-to-find, data-dependent errors
6) Release to production

Number 3) is probably the most difficult item to do properly. Especially if you depend on external systems' test systems etc. Mocks can help a part of the way, but it gets very complicated and time-consuming to write these kinds of tests, if you depend on synchronized information in more than one external system, data being updated by nightly batch jobs, etc.

Dependant of your budget and local needs, you need to adjust the time used on each phase, of course. I generally prefer spending effort on higher quality earlier in the process described above, as I think errors are easier to rule out, if you can isolate them on a fine-grained level, than if you have to track them down and isolate them manually after a manual test has discovered the potential error.

This is just a suggestion, and is not meant to be a recipe for everyone. Please feel free to give me your thoughts on it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment at IMVU: Doing the impossible fifty times a day. &laquo; Timothy Fitz]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.246.66</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 03:11:14</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 11:11:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Posted in Uncategorized by timothyfitz on February 10th, 2009    I recently wrote a post on Continuous Deployment: deploying code changes to production as rapidly as possible. The response on news.ycombinator was, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[stockst]]></wp:comment_author>
			<wp:comment_author_email>mdrop1@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.131.217.158</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 04:54:35</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 12:54:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Erik: "In real life, I don’t think you[r] approach is good enough."

And where, if not in "real life", is the OP living? 

I ask because your extensive comments, mostly containing references to financial transactions, miss several important subtleties the OP writes about.

For one, all systems do not have the transactional requirements that you imply. Some systems (and userbases) will accept transient errors. If Amazon.com occasionally says "Internal Error" I hit the refresh button and problem solved.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[Erik A. Brandstadmoen]]></wp:comment_author>
			<wp:comment_author_email>erik.brandstadmoen@webstep.no</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.114.240.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 05:21:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 13:21:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[stockst: I don't see what subtleties you think I am missing. "Fail fast" is fine. But how about "Fail not so fast, but definitely not as serious"? My point is that it all depends on the nature of your applications. An "Internal error" is fine. But how about if John-newly-hired-freshman coder introduced an error that made all orders performed on Amazon for about 5 minutes to be charged the wrong credit cards? 

In a perfect world, all of us would be good programmers. Not all of us are. I say this from experience with different types of programmers I have met through my programming experience. And, given that all programmers make errors, some worse than others, I don't like the idea of cuttin 3-4 steps in the QA process before letting software loose onto real customers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>55</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Einspanjer]]></wp:comment_author>
			<wp:comment_author_email>deinspanjer@mozilla.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.mozilla.org/metrics</wp:comment_author_url>
			<wp:comment_author_IP>71.255.126.75</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 11:59:51</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 19:59:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Erik: I've enjoyed your clear and rational discussion in this thread regarding the seriousness of data corruption in financial systems, and how to determine the best approach to prevent them.

When I read your first response, my initial thought was: If you want to make sure that corruption of financial transactions can't occur in production, then you need to make sure you pay the appropriate amount of money in up front development to have a test suite that prevents it.

Many companies might amortize this cost by paying a manual QA team to perform manual test for a long time with lengthy delays between releases, but I imagine the most successful teams will have the most comprehensive documentation of problems found and tests that ensure a problem doesn't exist, and from there, that those tests and documentation are transcribed into a testing infrastructure that ensures all of those tests are executed constantly.

In reading Timothy's subsequent post regarding Continuous Deployment, it really does sound like that is exactly what IMVU has done.  On paper, they have a test suite that many developers would drool over.  I'm very interested to hear your take on whether you feel that even a financial company could eventually refine and expand the comprehensiveness of their testing infrastructure to the point that this kind of deployment scheme would result in just as few data corruption issues as that one sleeper bug that sat in two year-long release cycles is likely to cause.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[Danno]]></wp:comment_author>
			<wp:comment_author_email>nugend@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.184.116.156</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 20:47:56</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 04:47:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What Erik is talking about is "Oh shit, launched the missiles" errors.  Things that have no easy way of being undone, and the failure of which have dire consequences that cannot be corrected easily or at all.

Thankfully, most code doesn't launch the missiles and not too many errors, even in a financial application, are going to be much worse than a fat-finger.  Unfortunately, I suppose you've got to accept the cost in the situation that you could possibly launch the missiles.  In fact, in that case, you probably want the manual testing, the automated testing, the test environment somehow running off of production data with fake missiles to fire... and a couple of elves hanging around just in case.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[A/B Split Testing or Avoiding The Hippo &laquo; There Will Be Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joblivious.wordpress.com/2009/02/11/ab-split-testing-or-avoiding-the-hippo/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.177</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 02:48:42</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 10:48:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[Briefly Noted for February 25, 2009]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.foundhistory.org/2009/02/25/briefly-noted-for-february-25-2009/</wp:comment_author_url>
			<wp:comment_author_IP>129.174.10.20</wp:comment_author_IP>
			<wp:comment_date>2009-02-25 05:24:14</wp:comment_date>
			<wp:comment_date_gmt>2009-02-25 13:24:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Along with &#8220;the perfect is the enemy of the good,&#8221; &#8220;release early and often&#8221; is something of a mantra around CHNM, especially when it comes to software and web application development. For a variety of reasons, not least the invaluable testing and feedback projects get when they actually make it into the wild, CHNM has always been keen to get stuff into users hands. Two good statements of likeminded philosophy: Eric Ries&#8217; Lessons Learned: Continuous deployment and continuous learning and Timothy Fitz&#8217;s Continuous Deployment. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>320</wp:comment_id>
			<wp:comment_author><![CDATA[DPQ]]></wp:comment_author>
			<wp:comment_author_email>dpq@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.121.134.20</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 15:46:33</wp:comment_date>
			<wp:comment_date_gmt>2009-08-21 23:46:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Das hit the nail.  This is soooo reminiscent of the academic programming proof of correctness discussions from the 1980s.  Go ahead and start from scratch, absolutely require TDD and as much automated test coverage as is humanly possible, a strict SaaS model deploying to a small set of sites completely under your control (for rollback), and a customer base for whom failure is merely a nuisance, and you might get CD to work.  Academic.

Have some sparsely tested legacy code (even in a modern programming methodology), or a download distribution model (noted earlier), or customers paying for reliable service, and Alex will not cut it.  Not to mention the morale hit to the programming team when Alex's bug is found 50 commits later and they ALL have to be rolled back because, of course, the non-buggy work that Alex did has become integral to subsequent coding.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>270</wp:comment_id>
			<wp:comment_author><![CDATA[cs]]></wp:comment_author>
			<wp:comment_author_email>chris@sgn.com</wp:comment_author_email>
			<wp:comment_author_url>http://sgn.com</wp:comment_author_url>
			<wp:comment_author_IP>76.202.119.253</wp:comment_author_IP>
			<wp:comment_date>2009-03-22 14:41:38</wp:comment_date>
			<wp:comment_date_gmt>2009-03-22 22:41:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[for small projects with small fairly localized teams, this process has merit.  for larger, highly scaled projects that use distributed resources this process can become untenable.  the situation i'm thinking about is when a system's core functionality is being altered.  while there are plenty of atomic pieces that can be tested individually with automated unit tests, and focussed manual qa, often time not many of these pieces can be deployed independent of other pieces.  because while from a code perspective they are neatly abstracted and modular, from a 'how this sytem works' they present changes that the legacy system might not be able to support.

bottom line, good qa is good qa whether it happens within 5 minutes of the developer leaving for a beer or 1 week after they leave for a beer.  qa will always miss things.  that's human nature.  and embracing that while letting you relieve some stress doesn't justify introducing buggy code to users any sooner.  its a better experience for your users if you don't rely on them to do the qa for you.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>221</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Dubakov]]></wp:comment_author>
			<wp:comment_author_email>mdubakov@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.targetprocess.com/blog</wp:comment_author_url>
			<wp:comment_author_IP>87.252.247.153</wp:comment_author_IP>
			<wp:comment_date>2009-02-26 09:27:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-26 17:27:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Continuous Deployment *may* work only for online applications (or single instance application). It can't work for downloadable packages like Web browser, IDE, etc. People download it, install it and throw error to you. It may be thousands of people over the world during short period of time (imagine new major Safari release, how many downloads they have already in 2 days?) Even if you fix the problem and deploy new version in several hours, it will be SERIOUS hit on company reputation "HEY! Apple released buggy Safari! It crashes when I open Google instantly!"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>280</wp:comment_id>
			<wp:comment_author><![CDATA[james mckay dot net &raquo; Continuous Deployment: radical idea or April fool?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jamesmckay.net/2009/04/continuous-deployment-radical-idea-or-april-fool/</wp:comment_author_url>
			<wp:comment_author_IP>87.106.104.41</wp:comment_author_IP>
			<wp:comment_date>2009-04-01 23:01:41</wp:comment_date>
			<wp:comment_date_gmt>2009-04-02 07:01:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day of all days. However, clicking through to the article he linked to led me to a couple of blog entries written back in February, and a Google blog search turned up several dated hits indicating [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>282</wp:comment_id>
			<wp:comment_author><![CDATA[10 Things Every Entrepreneur Must Be Reading&nbsp;|&nbsp;JonBischke.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jonbischke.com/2009/04/02/entrepreneur-must-reads/</wp:comment_author_url>
			<wp:comment_author_IP>75.119.200.56</wp:comment_author_IP>
			<wp:comment_date>2009-04-02 07:49:49</wp:comment_date>
			<wp:comment_date_gmt>2009-04-02 15:49:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] being tossed around the Valley right now with names like Pirate Metrics, Customer Development and Continuous Deployment. There are some awesome people who are sharing great templates for startup creation. If [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[Notional Slurry &raquo; links for 2009-02-27]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://williamtozier.com/slurry/2009/02/28/links-for-2009-02-27</wp:comment_author_url>
			<wp:comment_author_IP>209.68.1.167</wp:comment_author_IP>
			<wp:comment_date>2009-02-27 22:15:35</wp:comment_date>
			<wp:comment_date_gmt>2009-02-28 06:15:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment « Timothy Fitz &quot;So what should Alex do? Continuously deploy. Every commit should be instantly deployed to production. Let’s walk through her story again, assuming she had such an ideal implementation of Continuous Deployment. Alex commits. Minutes later warnings go off that the cluster is no longer healthy. The failure is easily correlated to Alex’s change and her change is reverted. Alex spends minimal time debugging, finding the now obvious typo with ease. Her changes still caused a failure cascade, but the downtime was minimal. &quot; (tags: continuous-integration continuous-deployment testing agility FUD amusing-comments) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>266</wp:comment_id>
			<wp:comment_author><![CDATA[Every Nine Minutes &laquo; The Agile Executive]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://theagileexecutive.com/2009/03/14/every-nine-minutes/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.244.84</wp:comment_author_IP>
			<wp:comment_date>2009-03-14 21:13:04</wp:comment_date>
			<wp:comment_date_gmt>2009-03-15 05:13:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] what they do in iterative Customer Development and their work on Continuous Deployment IMVU is well worth paying attention to. Possibly related posts: (automatically generated)Active [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>292</wp:comment_id>
			<wp:comment_author><![CDATA[Software Delivery at the Next Level: Continous Deployment &laquo; Scrum 4 You]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://scrum4you.wordpress.com/2009/04/27/software-delivery-at-the-next-level-continous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.63</wp:comment_author_IP>
			<wp:comment_date>2009-04-26 21:30:37</wp:comment_date>
			<wp:comment_date_gmt>2009-04-27 05:30:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] typo with ease. Her changes still caused a failure cascade, but the downtime was minimal. (found at T. Fitz Blog)  When he posted this, what happend, people do not believed him, so his next blog posting is even [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[noname]]></wp:comment_author>
			<wp:comment_author_email>new@sgenomics.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.62.203.214</wp:comment_author_IP>
			<wp:comment_date>2009-02-28 16:43:25</wp:comment_date>
			<wp:comment_date_gmt>2009-03-01 00:43:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[infallibility != fallibility Alex fails again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>294</wp:comment_id>
			<wp:comment_author><![CDATA[unCLog &raquo; Continuous Deployment == Fail Fast Software]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://metabang.com/unclog2008/?p=131</wp:comment_author_url>
			<wp:comment_author_IP>74.126.18.130</wp:comment_author_IP>
			<wp:comment_date>2009-04-29 06:17:14</wp:comment_date>
			<wp:comment_date_gmt>2009-04-29 14:17:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I Just read Timothy Fitz&#8217;s post on Continuous Deployment: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>296</wp:comment_id>
			<wp:comment_author><![CDATA[EC2 Continuous Deployment: Hello world &laquo; Tales from the classpath]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jeppenejsum.wordpress.com/2009/05/03/ec2-continuous-deployment-hello-world/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.246.66</wp:comment_author_IP>
			<wp:comment_date>2009-05-03 07:26:45</wp:comment_date>
			<wp:comment_date_gmt>2009-05-03 15:26:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fitz wrote an interesting entry about Continuous Deployment, basically deploying to production after each commit. While I [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>308</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment | AKF Partners Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://akfpartners.com/techblog/2009/06/22/continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>69.89.31.196</wp:comment_author_IP>
			<wp:comment_date>2009-06-22 16:10:32</wp:comment_date>
			<wp:comment_date_gmt>2009-06-23 00:10:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] folks at IMVU also seem to be fans of the continuous deployment methodology as well from the post by Timothy Fitz. Eric suggest a 5 step approach for moving to a continuous deployment environment. The topic of [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>313</wp:comment_id>
			<wp:comment_author><![CDATA[Das]]></wp:comment_author>
			<wp:comment_author_email>reply_das@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.6.134.223</wp:comment_author_IP>
			<wp:comment_date>2009-08-09 08:37:42</wp:comment_date>
			<wp:comment_date_gmt>2009-08-09 16:37:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't see how continuous deployment is scalable either (compared to the other "non-solutions" ... So, what if Alex is not the only programmer and there are 25 other programmers who are checking in code on a daily basis. Now, it is no longer Alex who may have caused the bug - it could be any one of the others. For larger teams, trying to troubleshoot &amp; find problems on live production is much more costly (both financially &amp; otherwise) than what continuous deployment seems to save us. 

Secondly - what if the bug lurks for a while before it is visible. How do you know that it is Alex who caused the bug because of what was continuously deployed a week ago or because of what was deployed 5 minutes ago.

I think the "use case" that is being touted is too simplistic to be used as a real case study showing why continuous deployment is better than the other "non-solutions". I think the type &amp; size of project team, the application, the users of the application and their tolerance for bugs all would play a role into whether continuous deployment makes sense - for me this is no panacea ... 
--Das]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>333</wp:comment_id>
			<wp:comment_author><![CDATA[Joel Gascoigne &raquo; Continuously deploy your thoughts and desires]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joelg.co.uk/continuously-deploy-your-thoughts-and-desires/</wp:comment_author_url>
			<wp:comment_author_IP>72.47.224.24</wp:comment_author_IP>
			<wp:comment_date>2009-11-02 13:25:08</wp:comment_date>
			<wp:comment_date_gmt>2009-11-02 21:25:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the topic of my post, but it is what has triggered me to write this post. Timothy&#8217;s two posts explain it very well, including this part which I shall quote: Continuous Deployment is [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>511</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment Basics in One Day &#8211; Reading List &laquo; MustExist &#8211; Curating the Long Tail]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.mustexist.com/2010/09/20/continuous-deployment-basics-in-one-day-reading-list/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.36</wp:comment_author_IP>
			<wp:comment_date>2010-09-20 09:59:49</wp:comment_date>
			<wp:comment_date_gmt>2010-09-20 17:59:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] and two of his posts &#8211; one about the benefits and principles of CI &#8211; http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/ &#8211; and another about the process: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1285005589]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>483</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Delivery vs Continuous Deployment | Continuous Delivery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://continuousdelivery.com/2010/08/continuous-delivery-vs-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>72.249.127.78</wp:comment_author_IP>
			<wp:comment_date>2010-08-13 15:54:14</wp:comment_date>
			<wp:comment_date_gmt>2010-08-13 23:54:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Delivery vs Continuous Deployment  Timothy Fitz&#8217;s blog entry on continuous deployment came out over a year before Dave and I published our book on continuous [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1281743656]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>597</wp:comment_id>
			<wp:comment_author><![CDATA[Thoughts on Application Lifecycle Management (ALM) &laquo; Early and Often]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://earlyandoften.wordpress.com/2011/03/04/alm/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.155</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 13:46:46</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 21:46:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is production worthy, i.e. a release candidate.  In some environments, deployment pipelines are automated all the way to production, where a change from a developer can go to production without a single person touching it.  To [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1299275206.5304";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1299275206]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>574</wp:comment_id>
			<wp:comment_author><![CDATA[The Limits of Continuous Deployment]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://opinionated-programmer.com/2011/02/the-limits-of-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>50.17.251.103</wp:comment_author_IP>
			<wp:comment_date>2011-02-08 17:13:08</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 01:13:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] some more tomorrow, but in the meantime, here are some of their writings: Timothy Fitz&#039;s motivation, how this works in practice, Brett Durrett&#039;s slides, and James Birchler giving some more info on [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297215499]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297215498.9026";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297213988.4173";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>649</wp:comment_id>
			<wp:comment_author><![CDATA[TechTalksTO full-day developer conference set for August 13th]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.freshbooks.com/blog/2011/07/05/techtalksto-full-day-developer-conference-set-for-august-13th/</wp:comment_author_url>
			<wp:comment_author_IP>69.164.203.83</wp:comment_author_IP>
			<wp:comment_date>2011-07-05 08:47:33</wp:comment_date>
			<wp:comment_date_gmt>2011-07-05 16:47:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Timothy Fitz (@timothyfitz) – Known for popularizing Continuous Deployment [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1309884454]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>631</wp:comment_id>
			<wp:comment_author><![CDATA[Some helpful links to Continuous deployment &laquo; hop2croft&#039;s software development Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hop2croft.wordpress.com/2011/05/28/some-helpful-links-to-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.135</wp:comment_author_IP>
			<wp:comment_date>2011-05-28 10:57:14</wp:comment_date>
			<wp:comment_date_gmt>2011-05-28 18:57:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continous deployment problems you can face and how to resolve them. Some simple advices to avoid common problems in contiuous. It also introduces a really interesting unknown (for me) software pattern so called Fail-fast. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1306609034]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306609035.0714";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>616</wp:comment_id>
			<wp:comment_author><![CDATA[Application Build and Continuous Integration Patterns | BeiJing Parking]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cheap-nike-store.com/beijingparking/?p=67</wp:comment_author_url>
			<wp:comment_author_IP>66.147.240.160</wp:comment_author_IP>
			<wp:comment_date>2011-04-15 01:50:21</wp:comment_date>
			<wp:comment_date_gmt>2011-04-15 09:50:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] A/B Deployment (contributed by Timothy Fitz) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1302861022]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1302861023.5357";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>538</wp:comment_id>
			<wp:comment_author><![CDATA[ALT .NET Hispano: VAN &#8211; Diciembre 18 de 2009 &#8211; Automatizacion : BeyondNet]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://beyondnet.codesol.info/beyondnet/index.php/archives/225</wp:comment_author_url>
			<wp:comment_author_IP>65.182.101.30</wp:comment_author_IP>
			<wp:comment_date>2010-11-25 18:47:16</wp:comment_date>
			<wp:comment_date_gmt>2010-11-26 02:47:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1290739636]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>655</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; TechTalksTO Underground | StartupNorth]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://startupnorth.ca/2011/07/13/techtalksto-underground/</wp:comment_author_url>
			<wp:comment_author_IP>72.51.30.18</wp:comment_author_IP>
			<wp:comment_date>2011-07-13 07:02:18</wp:comment_date>
			<wp:comment_date_gmt>2011-07-13 15:02:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Timothy Fitz (@timothyfitz) &#8211; CTO at canv.as, master of Continuous Deployment [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1310569339]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>652</wp:comment_id>
			<wp:comment_author><![CDATA[Lean Startup Presentation | Desperately Seeking Validation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://desperatelyseekingvalidation.com/blog/2011/07/lean-startup-presentation/</wp:comment_author_url>
			<wp:comment_author_IP>67.228.235.91</wp:comment_author_IP>
			<wp:comment_date>2011-07-11 12:05:52</wp:comment_date>
			<wp:comment_date_gmt>2011-07-11 20:05:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] reading on Continuous Deployment: http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1310414752]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310414752.9851";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>570</wp:comment_id>
			<wp:comment_author><![CDATA[How to Fail Well &laquo; kingsbery.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kingsbery.net/2011/01/27/how-to-fail-well/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.243.221</wp:comment_author_IP>
			<wp:comment_date>2011-01-27 06:51:21</wp:comment_date>
			<wp:comment_date_gmt>2011-01-27 14:51:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] if a project is worth continuing to fund. Another business practice that makes failure cheaper is continuous deployment. Although continuous deployment requires IT and Operations support to accomplish it, it is more [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1296139882]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296139883.4731";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>578</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment (via Timothy Fitz) &laquo; Hertzel&#039;s eTech Thoughts]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hertzel.wordpress.com/2011/02/13/continuous-deployment-via-timothy-fitz/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.103</wp:comment_author_IP>
			<wp:comment_date>2011-02-12 23:45:07</wp:comment_date>
			<wp:comment_date_gmt>2011-02-13 07:45:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Alex has just written a refactoring of some website backend code. Since it was a small task, it&#039;s committed and Alex moves on to the next feature.   When the code is deployed in production two weeks later it causes the entire site to go down. A one-character typo which was missed by automated tests caused a failure cascade reminiscent of the bad-old-days at twitter. It takes eight hours of downtime to isolate the problem, produce a one character &#8230; Read More [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297583107]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297583107.2782";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>617</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment &laquo; Michael Baylon&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://michaelbaylon.wordpress.com/2011/04/26/continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.149</wp:comment_author_IP>
			<wp:comment_date>2011-04-26 00:06:31</wp:comment_date>
			<wp:comment_date_gmt>2011-04-26 08:06:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] come across a couple of interesting articles about continuous deployment &#8211; see Continous deployment and Continuous Deployment at IMVU: Doing the impossible fifty times a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303806405.8606";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303805191.5643";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1303806406]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>620</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment at IMVU: Doing the impossible fifty times a day. | Ed Roman Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanstartups.wpengine.com/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/</wp:comment_author_url>
			<wp:comment_author_IP>199.47.222.144</wp:comment_author_IP>
			<wp:comment_date>2011-05-01 19:05:23</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 03:05:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] recently wrote a post on Continuous Deployment: deploying code changes to production as rapidly as possible. The response on news.ycombinator was, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304305524]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304305525.5969";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>355</wp:comment_id>
			<wp:comment_author><![CDATA[Oliver Schmitz]]></wp:comment_author>
			<wp:comment_author_email>oli99sc@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.186.19.150</wp:comment_author_IP>
			<wp:comment_date>2009-12-05 09:09:50</wp:comment_date>
			<wp:comment_date_gmt>2009-12-05 17:09:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wonder how you make the product owners think in product chunks small enough to be developed and deployed continuously. It makes no sense to continously deploy 100 person day projecst. Because than agein it may be days or weeks ago, that the failing code has been developed. 
An incremental product design, implementation and rollout is required to make this work. But I am often facing product owners which believe they will only get business value if their project idea is deployed as a whole. And than the marketing guys, that want to have a big bang release, so they can run a big marketing campaign to promote the new feature available at a given date.
Please let me know your thougths...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>356</wp:comment_id>
			<wp:comment_author><![CDATA[A Brief And Incomplete History Of Build Pipelines &#8211; Magpiebrain]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.magpiebrain.com/2009/12/13/a-brief-and-incomplete-history-of-build-pipelines/</wp:comment_author_url>
			<wp:comment_author_IP>67.207.138.223</wp:comment_author_IP>
			<wp:comment_date>2009-12-13 06:59:41</wp:comment_date>
			<wp:comment_date_gmt>2009-12-13 14:59:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to production &#8211; actually was. This thinking can now be best thought of in terms of Continuous Deployment &#8211; although that topic is far more nuanced that the often simplistic thinking regarding [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[toganet]]></wp:comment_author>
			<wp:comment_author_email>gwhodgson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.231.220.214</wp:comment_author_IP>
			<wp:comment_date>2009-12-22 10:16:58</wp:comment_date>
			<wp:comment_date_gmt>2009-12-22 18:16:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The discussion here is great.  I work at a medium-sized company with a large user base of high-availability websites, all of which are customized per our clients' wishes.  Our new executive direction is "we need continuous deployment.  Now!"  and I am part of the team who has been tasked with making it so.

My gut tells me this may work for deployment up to a final testing environment, but our operational responsibilities (SLA) and need to balance dozens of client needs makes it impractical and possibly irresponsible.

Does anyone have any anecdotes about someone who's made this work in our kind of environment?

I actually kind find anyone who is using it aside from IMVU...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[Timothy Fitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://TimothyFitz.com</wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-12-22 11:13:47</wp:comment_date>
			<wp:comment_date_gmt>2009-12-22 19:13:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There are other examples, Facebook and Flickr being the first two that come to mind. Both deploy to production multiple times per day.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>365</wp:comment_id>
			<wp:comment_author><![CDATA[Is There Something Inherently un-Agile About ERP Software? &laquo; The Agile Executive]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://theagileexecutive.com/2009/12/30/is-there-something-inherently-un-agile-about-erp-software/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.247</wp:comment_author_IP>
			<wp:comment_date>2009-12-30 03:46:59</wp:comment_date>
			<wp:comment_date_gmt>2009-12-30 11:46:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Jones is often exacerbated through the &#8220;ship more infrequently&#8221; syndrome. IMVU&#8217;s Timothy Fritz describes it as follows: While this may decrease downtime (things break and you roll back), the [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>383</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Delivery | Continuous Delivery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://continuousdelivery.com/2010/02/continuous-delivery/</wp:comment_author_url>
			<wp:comment_author_IP>72.249.127.78</wp:comment_author_IP>
			<wp:comment_date>2010-02-02 01:07:49</wp:comment_date>
			<wp:comment_date_gmt>2010-02-02 09:07:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] papers on the subject. More recently, there has been a new variation on the theme in the shape of continuous deployment.  Posted by jez | February 2nd, 2010 | Category: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>421</wp:comment_id>
			<wp:comment_author><![CDATA[Erik A. Brandstadmoen]]></wp:comment_author>
			<wp:comment_author_email>erik.brandstadmoen@webstep.no</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.203.151.150</wp:comment_author_IP>
			<wp:comment_date>2010-04-26 12:43:34</wp:comment_date>
			<wp:comment_date_gmt>2010-04-26 20:43:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@Sean C: Thank you for supporting my view. Nice analogy, by the way... :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>420</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>420</wp:comment_id>
			<wp:comment_author><![CDATA[Sean C]]></wp:comment_author>
			<wp:comment_author_email>seanc@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.88.61.130</wp:comment_author_IP>
			<wp:comment_date>2010-04-26 12:20:35</wp:comment_date>
			<wp:comment_date_gmt>2010-04-26 20:20:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Id like to thank Erik for this valuable article. He made excellent points that we all should strive to incorporate. 

As to continuous deployment to production servers - Nice try at taking continuous integration builds and trying to stretch it and invent a new buzzword for yourself.

No offense, but that makes about as much sense as doing a brake job on your car and testing it by going down the side of a mountain instead of testing it on a nice flat road first.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>435</wp:comment_id>
			<wp:comment_author><![CDATA[bor!sgloger &#8212; Software Delivery at the Next Level: Continous Deployment]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://borisgloger.com/2009/04/27/software-delivery-at-the-next-level-continous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>78.142.162.131</wp:comment_author_IP>
			<wp:comment_date>2010-05-17 11:53:17</wp:comment_date>
			<wp:comment_date_gmt>2010-05-17 19:53:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] typo with ease. Her changes still caused a failure cascade, but the downtime was minimal. (found at T. Fitz Blog)  When he posted this, what happend, people do not believed him, so his next blog posting is even [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>422</wp:comment_id>
			<wp:comment_author><![CDATA[Sean C]]></wp:comment_author>
			<wp:comment_author_email>seanc@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.88.61.130</wp:comment_author_IP>
			<wp:comment_date>2010-04-27 04:20:34</wp:comment_date>
			<wp:comment_date_gmt>2010-04-27 12:20:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anytime Erik. Don't get me wrong, I wish this was a sustainable solution that would work in a wide array of real world scenarios, but alas in my very humble opinion it isn't. The herculean efforts they've put forth to make this work at all...while commendable could probably be better applied elsewhere. I know how it is to have an idea and not want to give up on it, but sometimes there is no baby in the bathwater at all. I still enjoy the blog and a little hearty debate is good for everyone :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>708</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment with Atlassian Bamboo and XebiaLabs Deployit | Java Application Deployment Automation with Deployit | XebiaLabs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.xebialabs.com/2011/10/20/continuous-deployment-with-atlassian-bamboo-and-xebialabs-deployit/</wp:comment_author_url>
			<wp:comment_author_IP>85.158.206.34</wp:comment_author_IP>
			<wp:comment_date>2011-10-20 00:44:07</wp:comment_date>
			<wp:comment_date_gmt>2011-10-20 08:44:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] automated deployment to your continuous integration setup and make the the first step towards continuous deployment and continuous delivery. Instead of deployment being a bottleneck to your development process, it [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1319100247.865";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>729</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment with Atlassian Bamboo and XebiaLabs Deployit &raquo;]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cachet-software.co.uk/blogs/?p=404</wp:comment_author_url>
			<wp:comment_author_IP>46.105.98.195</wp:comment_author_IP>
			<wp:comment_date>2011-11-08 04:41:38</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 12:41:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] automated deployment to your continuous integration setup and make the the first step towards continuous deployment and continuous delivery. Instead of deployment being a bottleneck to your development process, it [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>722</wp:comment_id>
			<wp:comment_author><![CDATA[What&#8217;s So Special About TIBant™ v2 - Windy Road]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://windyroad.org/2011/10/31/whats-so-special-about-tibant%e2%84%a2-v2/</wp:comment_author_url>
			<wp:comment_author_IP>64.13.232.34</wp:comment_author_IP>
			<wp:comment_date>2011-10-30 12:51:12</wp:comment_date>
			<wp:comment_date_gmt>2011-10-30 20:51:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 4) we’ve been students and advocates of continuous delivery and its sometimes scary cousin, continuous deployment, and it’s about time we started taking our own advice for our current projects. This is exactly [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>864</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Delivery vs Continuous Deployment]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.siteminds.nl/?p=83</wp:comment_author_url>
			<wp:comment_author_IP>195.8.208.52</wp:comment_author_IP>
			<wp:comment_date>2012-01-03 12:08:11</wp:comment_date>
			<wp:comment_date_gmt>2012-01-03 20:08:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fitz&#8217;s blog entry on continuous deployment came out over a year before Dave and I published our book on continuous [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325621292.0243";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>What webhooks are and why you should care</title>
		<link>http://timothyfitz.wordpress.com/2009/02/09/what-webhooks-are-and-why-you-should-care/</link>
		<pubDate>Mon, 09 Feb 2009 09:28:27 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[ Webhooks are user-defined HTTP callbacks. Here's a common example: You go to github. There's a textbox for their code post webhook. You drop in a URL. Now when you post your code to github, github will HTTP POST to your chosen URL with details about the code post. There is no simpler way to allow open ended integration with arbitrary web services. 

This tiny interface is used in obvious ways: bug tracking integration, sms messaging, IRC and twitter.

The same tiny interface is also used in non-obvious ways, like Run Code Run which offers to build and run your project's tests for you. All by just plugging a runcoderun.com URL into GitHub. 

Webhooks today offer a lot of value as an instant notification mechanism. Have events your users care about? Give them a webhook for those events and you've given them the power and flexibility to integrate that event stream into their life. 

For all of that power, webhooks are impressively simple to implement. It's a one liner in almost every language.

[sourcecode language='python']urllib.urlopen(user.webhook.url)[/sourcecode]

While there's a lot of value in webhooks today, it's the future that really interests me. Webhooks are composable. You'll point a webhook at a site that will call other webhooks. It might process the data, record it, fork it off to multiple webhooks or something stranger still. Yahoo Pipes tried to do this, but ultimately you were limited to what Yahoo Pipes was designed to do. Webhooks can be integrated and implemented everywhere. They piggyback the fundamental decentralized nature of the web. 

I imagine a future where twitter feed updates instantly call a webhook. I've pointed that webhook at a service that does bayesian filtering. The filtering has been set up to determine if the tweet looks time-sensitive "Anyone interested in getting dinner tonight?" vs time-insensitive "Webhooks are cool." Time sensitive posts call another webhook, this time set to sms my phone. Note that nowhere in this future am I writing any code. I don't have to.

It's important that we get to this level of customization for the masses. It's also important for adoption that we use the web's native verbs. We understand HTTP on a fundamental level. It's simple, scales and makes sense. 

You should care because webhooks will be ubiquitous. You should care because they're going to reshape the internet. You should care because webhooks are the next step in the evolution of communication on the internet and nothing will be left untouched.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2009-02-09 01:28:27</wp:post_date>
		<wp:post_date_gmt>2009-02-09 09:28:27</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-webhooks-are-and-why-you-should-care</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[YHVH]]></wp:comment_author>
			<wp:comment_author_email>yhvh2000@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.4.21.109</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 02:01:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 10:01:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm looking for the "notify me of follow-up comments via web hook", this is as dissapointing as last night, with your mother.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Jesper Noehr]]></wp:comment_author>
			<wp:comment_author_email>jesper@noehr.org</wp:comment_author_email>
			<wp:comment_author_url>http://noehr.org/</wp:comment_author_url>
			<wp:comment_author_IP>213.46.41.214</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 02:10:53</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 10:10:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://webhooks.pbwiki.com/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Pooly]]></wp:comment_author>
			<wp:comment_author_email>pooly@w-fenec.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.w-fenec.org/</wp:comment_author_url>
			<wp:comment_author_IP>141.228.106.136</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 05:11:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 13:11:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So it's like user-specified XML-RPC...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[JohnW]]></wp:comment_author>
			<wp:comment_author_email>watersjohn@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.83.233.81</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 06:22:10</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 14:22:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds like an implementation of database triggers for the web world. Neat.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Wiseley]]></wp:comment_author>
			<wp:comment_author_email>matt@editme.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.editme.com</wp:comment_author_url>
			<wp:comment_author_IP>70.5.204.59</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 08:58:16</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 16:58:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool. Never used github, but that's a great idea. Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.7.53.122</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 09:37:59</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 17:37:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[YHVH: If or when I eventually move off of wordpress.com (note that I started this blog three days ago) then I'll probably add webhooks to it.

JohnW: Yeah, that's a good analogy. I didn't talk about the bi-directional nature, on Devjavu (SVN/Trac as a service) there's a pre-commit webhook that lets you cancel an svn hook with a message (like "Sorry, we don't allow hard tabs in commits") and in that way they're even more like database triggers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[pete1thomas]]></wp:comment_author>
			<wp:comment_author_email>pete@pollenware.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>67.52.248.147</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 09:54:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 17:54:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Unfuddle supports this too: http://www.unfuddle.com/blog/2008/5/18/git-hosting-and-repository-improvements

Not directly affiliated with them, just a satisfied customer.  -pete]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6038799</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Larson]]></wp:comment_author>
			<wp:comment_author_email>eric@ionrock.org</wp:comment_author_email>
			<wp:comment_author_url>http://ionrock.org/blog/</wp:comment_author_url>
			<wp:comment_author_IP>69.91.87.195</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 10:24:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 18:24:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Uche Ogbuji in fact thought of a very similar idea and in fact called it Web Triggers.

http://notes.4suite.org/Bright_Content%3ADesign%3AWeb_Triggers]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Ivan]]></wp:comment_author>
			<wp:comment_author_email>ivan.lazarte@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.172.31.151</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 10:45:12</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 18:45:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[old news for any web developer who has ever coded before ever.  the new part is the catchy name :)

long live webhooks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 11:10:54</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 19:10:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ivan: Respectfully, I disagree. There are old examples of webhooks, like Paypal's Instant Payment Notification; however, there are hardly any non-developer webhooks. This is about bringing the power of instant notification, integration and composability to the end-users, not just programmers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Donovan Preston]]></wp:comment_author>
			<wp:comment_author_email>dsposx@mac.com</wp:comment_author_email>
			<wp:comment_author_url>http://ulaluma.com/pyx</wp:comment_author_url>
			<wp:comment_author_IP>38.102.129.180</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 12:28:08</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 20:28:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Webhooks are cool.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[ellaella]]></wp:comment_author>
			<wp:comment_author_email>fromscratch@foodpluspolitics.com</wp:comment_author_email>
			<wp:comment_author_url>http://foodpluspolitics.com</wp:comment_author_url>
			<wp:comment_author_IP>75.69.130.116</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 12:47:20</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 20:47:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just started using Chris Pearson's premium theme, Thesis, a few days ago on my self-hosted blog. It uses hooks extensively and so far, I like doing things that way. Unhook, hook. Easy.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>904697</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Jessy]]></wp:comment_author>
			<wp:comment_author_email>jessy.cowansharp@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>24.7.123.108</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 13:44:42</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 21:44:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i think it's a great idea but what you describe still strikes me as too low level for the average non-technical user. composability is huge. great term too :). but what are your thoughts on creating an interface (and/or the literacy i suppose) that an average, busy user (think: a teacher; a hill staffer; a non tech-based small business...) will intuitively know HOW to compose? the example of inserting a url into a text box still requires the user understand in a low level way the notion of composability, and be familiar with what is out there to compose WITH. perhaps it's building various options into the right hand click menu of your browser: 

right click --&gt; send to service... 

which pulls up a selection of categories and choices in those categories. one mght be 'notify' (a more sophisticated middleware solution); another might be 'publish' with a list of blogs you have registered... i'm sure there are tons more. 

your AI service example strikes me as falling in the middleware category. most users dont think about bayesian filters, they think in terms of  'service = notify'. 'notify' would bring up a dialogue box where the user can select the threshold of timeliness they're interested in. 

the middleware is where the fun is for the developers :), and where really cool innovative evolutions of what the web can DO come in. but i think the user experience needs to be abstracted away from that. 
 
dunno, thoughts?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1071866</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Lindsay]]></wp:comment_author>
			<wp:comment_author_email>progrium@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogrium.com/</wp:comment_author_url>
			<wp:comment_author_IP>67.169.165.147</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 14:36:52</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 22:36:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Jessy, I agree. I've been playing with a lot of prototypes on making the user experience better, one similar to what you're describing. However, I don't believe it's that important of a problem to solve now. But I appreciate more people thinking about it. As the value of web hooks becomes obvious from advanced users/early adopters using them, they will slowly become more usable for regular users. It's just sort of inevitable for useful technology to evolve, at the very least, usable enough.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>335699</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Willison]]></wp:comment_author>
			<wp:comment_author_email>simon@simonwillison.net</wp:comment_author_email>
			<wp:comment_author_url>http://simonwillison.net/</wp:comment_author_url>
			<wp:comment_author_IP>86.142.239.124</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 15:20:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 23:20:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Disagree that webhooks are easy to implement - your one-liner will leave you open to abuse, where malicious users input the URL to a deliberately slow loading page. This will quickly tie up your web serving processes.

Scaling webhooks properly requires offline processing of some sort, probably using a message queue. I'd be interested to know how GitHub handles this problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Willison]]></wp:comment_author>
			<wp:comment_author_email>simon@simonwillison.net</wp:comment_author_email>
			<wp:comment_author_url>http://simonwillison.net/</wp:comment_author_url>
			<wp:comment_author_IP>86.142.239.124</wp:comment_author_IP>
			<wp:comment_date>2009-02-09 15:23:28</wp:comment_date>
			<wp:comment_date_gmt>2009-02-09 23:23:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[From your comment on Reddit I can see you've already thought about this problem. I'd like to see your memcache protocol compliant webhook forwarder, sounds like a neat solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[Peter Cooper]]></wp:comment_author>
			<wp:comment_author_email>peter@petercooper.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.petercooper.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>81.86.235.109</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 07:01:38</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 15:01:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BTW, Trackback is an example of a user-land webhook of sorts..

Simon Willison: If you look at the github-services project on github, I think you can find out. I seem to recall this code was open sourced on there.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>50</wp:comment_id>
			<wp:comment_author><![CDATA[Tom Preston-Werner]]></wp:comment_author>
			<wp:comment_author_email>tom@github.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com</wp:comment_author_url>
			<wp:comment_author_IP>24.5.85.39</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:02:47</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:02:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At GitHub our webhooks are run as part of the post-receive queued job on non-web slices. The code is quite simple, in essence wrapping up some JSON and posting to the webhook URL. Here are the details if you're interested in a reference:

http://github.com/guides/post-receive-hooks

We also have a bunch of pre-built services that users can activate to send their commit info to places like Twitter, Campfire, IRC, etc. All they have to do is enter a few connection details into a form. This code is open source:

http://github.com/pjhyett/github-services

Many of these services have been contributed by our users, so that they can have easy integration with their favorite app!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>53</wp:comment_id>
			<wp:comment_author><![CDATA[Dustin Beltramo]]></wp:comment_author>
			<wp:comment_author_email>dbeltram@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.199.129.82</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:24:32</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:24:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just trying to wrap my head around this -- so, are webhooks kind of like the pipe | on a Unix command line? A way to connect the output of one process/service to another, and chain things together?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>56</wp:comment_id>
			<wp:comment_author><![CDATA[Pete Warden]]></wp:comment_author>
			<wp:comment_author_email>pete@petewarden.com</wp:comment_author_email>
			<wp:comment_author_url>http://petewarden.typepad.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.82.95.151</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 12:24:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 20:24:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["I imagine a future where twitter feed updates instantly call a webhook"
I'm already using a free service that does just this, Gnip. See http://gnipcentral.com/ for a whole bunch of services that you can to have a webhook called whenever they update.

The only downside is that Twitter are being stingy with their data, and only allow a link to the status update to be sent, which you then have to fetch from their servers to get the full message.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Jud Valeski]]></wp:comment_author>
			<wp:comment_author_email>jud@gnipcentral.com</wp:comment_author_email>
			<wp:comment_author_url>http://gnipcentral.com</wp:comment_author_url>
			<wp:comment_author_IP>74.0.231.178</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 14:27:14</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 22:27:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice post. Web Hooks are an ideal way to leverage the extremely vetted HTTP backbone for the traditional "event callback" pattern. Long overdue. Gnip's filter "postURL" callback setting leverages the pattern heavily. Would love feedback on it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 18:02:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 02:02:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dustin Beltramo: Yeah, that's a decent analogy. My twitter example would kinda be like: "twitter timothyfitz | bayes "time critical" | sms". There are obvious differences because we've got a stream of requests instead of a file descriptor, but the analogy for what you can do to leverage them is vaild (and in fact Webhook evangelist Jeff Lindsay has used that analogy many times before).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 18:06:17</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 02:06:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Pete Warden/Jud Valeski: I haven't actually used Gnip yet, but Jeff Lindsay and I have talked about it quite a bit. Just digging around on the website and reading the API docs, the very first thing that jumps out is that this still isn't *quite* webhooks. It's still targeting developers and it's not just as easy as dropping a url into a textbox. It would be cool to see a single server site for whatever your largest use case is. Hypothetically, if it's twitter then you'd have a webpage where you gave your twitter username and password and a webhook url (with a list of sample / common urls) and a submit button. Taking it to that level of simplicity has the potential to open the concept up to an order-of-magnitude larger market.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[The start of a public discussion &laquo; Web Hooks]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.webhooks.org/2009/02/11/the-start-of-a-public-discussion/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.44.10</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 03:42:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 11:42:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] assembla, joe gregoria, jon udell, timothy fitz, triggers    Timothy Fitz recently wrote on What webhooks are and why you should care. It&#8217;s a very clear and straightforward description of just that. It helps to have people [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[Why HTTP? &laquo; Timothy Fitz]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://timothyfitz.wordpress.com/2009/02/12/why-http/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.176</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 02:20:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 10:20:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a service to HTTP, and it becomes a team player in our ecosystem. Let&#8217;s revolutionize the last of our dinosaur protocols and move on.         [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[ovi]]></wp:comment_author>
			<wp:comment_author_email>ovi.comes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://virtual-devices.net</wp:comment_author_url>
			<wp:comment_author_IP>142.150.84.71</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:41:18</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:41:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've coded something similar, sort of, at http://qerio.com, using the web rack of "virtual devices" from http://virtual-devices.net. It adds the GUI element to the mix. The webhooks, in this case, are the patch cords in the back of the rack.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[almost effortless &raquo; Weekly Digest, 2-15-09]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://almosteffortless.com/2009/02/15/weekly-digest-2-15-09/</wp:comment_author_url>
			<wp:comment_author_IP>208.78.96.171</wp:comment_author_IP>
			<wp:comment_date>2009-02-15 18:46:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-16 02:46:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] What webhooks are and why you should care While there’s a lot of value in webhooks today, it’s the future that really interests me. Webhooks are composable. You’ll point a webhook at a site that will call other webhooks. It might process the data, record it, fork it off to multiple webhooks or something stranger still. Yahoo Pipes tried to do this, but ultimately you were limited to what Yahoo Pipes was designed to do. Webhooks can be integrated and implemented everywhere. They piggyback the fundamental decentralized nature of the web. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Smith]]></wp:comment_author>
			<wp:comment_author_email>adam@adamsmith.as</wp:comment_author_email>
			<wp:comment_author_url>http://adamsmith.as</wp:comment_author_url>
			<wp:comment_author_IP>128.114.59.230</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 18:19:28</wp:comment_date>
			<wp:comment_date_gmt>2009-02-19 02:19:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Timothy, I haz teh lazy.  Please take my content and sell it as ur own in a future post, I know you like it: <a href="http://devhouse.devjavu.com/browser/welcome-2.0/consumers/README" rel="nofollow">consuming webhook posts is so simple, even a bent snake could do it</a>.

I think a two-liner consumer would nicely compliment you one one-liner for posting.

@easy_consume(80)
def handle(req): return "meow"+req.args
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[Dev Blog AF83 &raquo; Blog Archive &raquo; Veille technologique (x2) : Annonces, Contenus, Conférences, Méthodes, Agilité, Développment, Langages, Editeurs, Outils, Bases de données, Protocoles, Bibliothèques, SEO, Ergonomie, etc.]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.af83.com/veille-technologique/veille-technologique-x2-annonces-contenus-conferences-methodes-agilite-developpment-langages-editeurs-outils-bases-de-donnees-protocoles-bibliotheques-seo-ergo</wp:comment_author_url>
			<wp:comment_author_IP>193.84.18.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-23 11:48:05</wp:comment_date>
			<wp:comment_date_gmt>2009-02-23 19:48:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://timothyfitz.wordpress.com/2009/02/09/what-webhooks-are-and-why-you-should-care/ : cet article explique le principe de webhooks et cite quelques exemples d&#8217;utilisation [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>322</wp:comment_id>
			<wp:comment_author><![CDATA[mitcho]]></wp:comment_author>
			<wp:comment_author_email>mitcho@mitcho.com</wp:comment_author_email>
			<wp:comment_author_url>http://mitcho.com</wp:comment_author_url>
			<wp:comment_author_IP>24.62.60.41</wp:comment_author_IP>
			<wp:comment_date>2009-08-29 16:24:01</wp:comment_date>
			<wp:comment_date_gmt>2009-08-30 00:24:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Timothy— I notice you mention in a comment that you'd like to add webhooks to your blog if/when you move off of wordpress.com. If you enjoy WordPress and would like to incorporate webhooks, I recently released a wordpress.org plugin called HookPress which adds a simple interface to register webhooks against WordPress actions and filters. If/when you move to a self-served WordPress install, I invite you to take a look. :)

http://mitcho.com/code/hookpress/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>271</wp:comment_id>
			<wp:comment_author><![CDATA[Toby Champion]]></wp:comment_author>
			<wp:comment_author_email>toby@tobychampion.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.tobychampion.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>216.146.250.54</wp:comment_author_IP>
			<wp:comment_date>2009-03-24 16:49:36</wp:comment_date>
			<wp:comment_date_gmt>2009-03-25 00:49:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anyone interested in getting dinner tonight?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>22</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>272</wp:comment_id>
			<wp:comment_author><![CDATA[Toby Champion]]></wp:comment_author>
			<wp:comment_author_email>toby@tobychampion.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.tobychampion.co.uk/</wp:comment_author_url>
			<wp:comment_author_IP>216.146.250.54</wp:comment_author_IP>
			<wp:comment_date>2009-03-24 16:53:56</wp:comment_date>
			<wp:comment_date_gmt>2009-03-25 00:53:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Maybe Twitter don't send the full message because it can be edited (at least for a while) by the user, and you might miss out on this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>56</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>299</wp:comment_id>
			<wp:comment_author><![CDATA[John Kalucki]]></wp:comment_author>
			<wp:comment_author_email>john@twitter.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.twitter.com/jkalucki</wp:comment_author_url>
			<wp:comment_author_IP>66.92.17.106</wp:comment_author_IP>
			<wp:comment_date>2009-05-06 16:08:19</wp:comment_date>
			<wp:comment_date_gmt>2009-05-07 00:08:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[See the Twitter Streaming API documentation at: http://apiwiki.twitter.com/Streaming-API-Documentation

A different mechanism, same result.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>302</wp:comment_id>
			<wp:comment_author><![CDATA[Tagz | &quot;What webhooks are and why you should care « Timothy Fitz&quot; | Comments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tagz.in/posts/6p8/comments/</wp:comment_author_url>
			<wp:comment_author_IP>174.129.240.130</wp:comment_author_IP>
			<wp:comment_date>2009-05-16 08:55:06</wp:comment_date>
			<wp:comment_date_gmt>2009-05-16 16:55:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]               [upmod] [downmod]     What webhooks are and why you should care « Timothy Fitz  (timothyfitz.wordpress.com)    1 points posted 3 months ago by jeethu  tags webdev webhooks hooks  [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>315</wp:comment_id>
			<wp:comment_author><![CDATA[Yuvamani]]></wp:comment_author>
			<wp:comment_author_email>uvamani@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.21.196.66</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 00:05:34</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 08:05:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good point. But that is why there are timeouts right ? 

The interesting challenge then is the fact that the callee may not be up all the time. And distinguishing between a genuine callee availability issue and a malicious callee becomes impossible to the caller.

But there is a simple "good enough" solution for that too. Just put the callee behind a highly available Amazon SQS system.

The caller then just implements a timeout based callback without a retry.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>26</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>316</wp:comment_id>
			<wp:comment_author><![CDATA[Yuvamani]]></wp:comment_author>
			<wp:comment_author_email>uvamani@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.21.196.66</wp:comment_author_IP>
			<wp:comment_date>2009-08-11 00:15:33</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 08:15:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It will be awesome if you can chain these together. Like some sort of yahoo pipes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1055</wp:comment_id>
			<wp:comment_author><![CDATA[What webhooks are and why you should care « Timothy Fitz &laquo; Maculator]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://maculator.wordpress.com/2012/04/23/what-webhooks-are-and-why-you-should-care-timothy-fitz/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.244.185</wp:comment_author_IP>
			<wp:comment_date>2012-04-23 07:42:58</wp:comment_date>
			<wp:comment_date_gmt>2012-04-23 15:42:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 23, 2012 by maculator     What webhooks are and why you should care « Timothy Fitz. Share this:ShareFacebookLike this:LikeBe the first to like this [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335195778.9409";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>986</wp:comment_id>
			<wp:comment_author><![CDATA[A Comparison of Features &laquo; eMINTS Winter Conference]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://emintswincon.wordpress.com/2012/02/24/a-comparison-of-features/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.109</wp:comment_author_IP>
			<wp:comment_date>2012-02-24 12:21:34</wp:comment_date>
			<wp:comment_date_gmt>2012-02-24 20:21:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] WordPress offers a huge list of setting options such as general, writing, reading, discussion, media, privacy, sharing, polls/ratings, domains, email post changes, text messaging, Open ID, and webhooks. [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1330114894.7371";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>501</wp:comment_id>
			<wp:comment_author><![CDATA[Pawel Roman]]></wp:comment_author>
			<wp:comment_author_email>romapawel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://alert-grid.com</wp:comment_author_url>
			<wp:comment_author_IP>213.134.185.231</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 11:42:30</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 19:42:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You said: "You’ll point a webhook at a site that will call other webhooks. It might process the data, record it, fork it off to multiple webhooks or something stranger still. "

The site you're talking about is AlertGrid. It accepts http calls and lets people easily manage a set of rules defining what should happen when such signal is received (or when it is NOT received). Apart from typical actions like sending email, sms or making a phone call, it can 'forward' the call to other (multiple) webhooks (to, e.g. create a ticket somewhere or notify some other service), so it can do all the weird stuff you can think of :) 

Also, see this post, it explains why developers should implement webhook patterns in their products:

http://blog.solutioncode.com/why-we-should-raise-events-instead-of-only-handle-them-in-our-code/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1284061351]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Continuous Deployment at IMVU: Doing the impossible fifty times a day.</title>
		<link>http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/</link>
		<pubDate>Tue, 10 Feb 2009 11:10:56 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[I recently wrote a post on <a href="http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/" target="_blank">Continuous Deployment</a>: deploying code changes to production as rapidly as possible. The response on news.ycombinator was, well...

"Maybe this is just viable for a single developer ... your site will be down. A lot." - <a href="http://news.ycombinator.com/item?id=472049" target="_blank">akronim</a>

"It seems like the author either has no customers or very understanding customers ... I somehow doubt the author really believes what he's writing there." - <a href="http://news.ycombinator.com/item?id=472133" target="_blank">moe</a>

...not exactly what I was expecting. Quite the contrast to the reactions of my coworkers who read the post and thought "yeah? what's the big deal?" Surprising how quickly you can forget the problems of yesterday, even if you invested most of yourself into solving them.

Continuous Deployment isn't just an abstract theory. At IMVU it's a core part of our culture to ship. It's also not a new technique here, we've been practicing continuous deployment for <a href="http://startuplessonslearned.blogspot.com/2008/09/lean-startup.html" target="_blank">years</a>; far longer than I've been a member of this startup.

It's important to note that system I'm about to explain evolved organically in response to new demands on the system and in response to post-mortems of failures. Nobody gets here overnight, but every step along the way has made us better developers.

The high level of our process is dead simple: Continuously integrate (commit early and often). On commit automatically run all tests. If the tests pass deploy to the cluster. If the deploy succeeds, repeat.

Our tests suite takes nine minutes to run (distributed across 30-40 machines). Our code pushes take another six minutes. Since these two steps are pipelined that means at peak we're pushing a new revision of the code to the website every nine minutes. That's 6 deploys an hour. Even at that pace we're often batching multiple commits into a single test/push cycle. On average we deploy new code fifty times a day.

So what magic happens in our test suite that allows us to skip having a manual Quality Assurance step in our deploy process? The magic is in the scope, scale and thoroughness. It's a thousand test files and counting. 4.4 machine hours of automated tests to be exact. Over an hour of these tests are instances of Internet Explorer automatically clicking through use cases and asserting on behaviour, thanks to Selenium. The rest of the time is spent running unit tests that poke at classes and functions and running functional tests that make web requests and assert on results.

[caption id="attachment_34" align="alignnone" width="640" caption="Buildbot running our tests sharded across 36 machines."]<img class="size-full wp-image-34" title="Waterfall" src="http://timothyfitz.files.wordpress.com/2009/02/waterfall.png" alt="Buildbot running our tests sharded across 36 machines." width="640" height="278" />[/caption]

Great test coverage is not enough. Continuous Deployment requires much more than that. Continuous Deployment means running all your tests, all the time. That means tests must be reliable. We've made a science out of debugging and fixing intermittently failing tests. When I say reliable, I don't mean "they can fail once in a thousand test runs." I mean "they must not fail more often than once in a million test runs." We have around 15k test cases, and they're run around 70 times a day. That's a million test cases a day. Even with a literally one in a million chance of an intermittent failure per test case we would still expect to see an intermittent test failure every day. It may be hard to imagine writing rock solid one-in-a-million-or-better tests that drive Internet Explorer to click ajax frontend buttons executing backend apache, php, memcache, mysql, java and solr. I am writing this blog post to tell you that not only is it possible, it's just one part of my day job.

Back to the deploy process, nine minutes have elapsed and a commit has been greenlit for the website. The programmer runs the imvu_push script. The code is rsync'd out to the hundreds of machines in our cluster. Load average, cpu usage, php errors and dies and more are sampled by the push script, as a basis line. A symlink is switched on a small subset of the machines throwing the code live to its first few customers. A minute later the push script again samples data across the cluster and if there has been a statistically significant regression then the revision is automatically rolled back. If not, then it gets pushed to 100% of the cluster and monitored in the same way for another five minutes. The code is now live and fully pushed. This whole process is simple enough that it's implemented by a handfull of shell scripts.

The point is that Continuous Deployment is real. It works and it scales up to large clusters, large development teams and extremely agile environments.

And if you're still wondering if we are a company that "has no customers", I'd like to refer you to our million dollar a month revenue <a href="http://www.flickr.com/photos/treborinato/2871009707/in/set-72157607385306405/" target="_blank">mohawks</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2009-02-10 03:10:56</wp:post_date>
		<wp:post_date_gmt>2009-02-10 11:10:56</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[stockst]]></wp:comment_author>
			<wp:comment_author_email>mdrop1@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.131.217.158</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 04:45:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 12:45:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your deployment script pushing to a subset of the cluster, monitoring for regressions, then doing a rollout/rollback is brilliant. 

This post is fascinating to the point I wonder if you've given away too many secrets? Then again, the level of discipline and sophistication you are describing is so far beyond your typical web-developer type, it probably doesn't matter.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Cinel]]></wp:comment_author>
			<wp:comment_author_email>email@timcinel.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.timcinel.com/</wp:comment_author_url>
			<wp:comment_author_IP>58.104.82.103</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 05:30:32</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 13:30:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree, the deployment and commit system you employ is ingenious.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Bobby Tables]]></wp:comment_author>
			<wp:comment_author_email>qjahe@videotron.ca</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.172.32.36</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 05:57:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 13:57:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ohhh Shit... Skynet!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[Derek Martin]]></wp:comment_author>
			<wp:comment_author_email>Derek@geekunity.com</wp:comment_author_email>
			<wp:comment_author_url>http://Geek.derekmartin.ca</wp:comment_author_url>
			<wp:comment_author_IP>24.114.232.2</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 06:10:12</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 14:10:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[drooolllll]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.7.53.122</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 09:40:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 17:40:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[stockst: Honestly, if the whole world caught up overnight and developed services to solve these problems I'd be ecstatic. We'd love to leverage someone else's hard work for some of these problems.

clemens: There are code reviews, but they happen less often than I would like. Thankfully about half of our code is developed while pairing so there's often a second set of eyes before the commit is ever made.

Jeremy Wohl: Yep, schema changes are done out of band. Just deploying them can be a huge pain. Doing an expensive alter on the master requires one-by-one applying it to our dozen read slaves (pulling them in and out of production traffic as you go), then applying it to the master's standby and failing over. It's a two day affair, not something you roll back from lightly. In the end we have relatively standard practices for schemas (a pseudo DBA who reviews all schema changes extensively) and sometimes that's a bottleneck to agility. If I started this process today, I'd probably invest some time in testing the limits of distributed key value stores which in theory don't have any expensive manual processes.

poifadfpoaidf: We have a fixed queue of 5 copies of the website on each frontend. We rsync with the "next" one and then when every frontend is rsync'd we go back through them all and flip a symlink over.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[clemens]]></wp:comment_author>
			<wp:comment_author_email>clem@fragment.at</wp:comment_author_email>
			<wp:comment_author_url>http://www.foostack.com</wp:comment_author_url>
			<wp:comment_author_IP>195.169.141.54</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 07:22:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 15:22:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[brilliant - this is lean software development at its best. If you look at code that is not deployed as inventory, then you have gotten rid of a lot of it. At that pace, any problem in the code should surface quite fast (ie within the minutes after commit) and there is some urgency created to solve it. 
My guess would be that you also have an 'Andon' system in place, i.e. a culture where a developer shouts for help as soon there a problem difficult for him to solve. I only wonder how you review the code that you push - are there any code reviews scheduled before pushing something? Because not only defects (ie failing tests) slow you down, but also unclean code and all the things that you stumble upon when you have to go back to it.
Nice work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy Wohl]]></wp:comment_author>
			<wp:comment_author_email>jeremywohl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://igmus.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.4.236.129</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 07:30:32</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 15:30:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you handle schema changes separately, out of band in the model?  An achilles heel of partial cluster deployment.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Nielsen]]></wp:comment_author>
			<wp:comment_author_email>mn@michaelnielsen.org</wp:comment_author_email>
			<wp:comment_author_url>http://michaelnielsen.org/blog/?p=545</wp:comment_author_url>
			<wp:comment_author_IP>76.64.42.136</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 08:22:26</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 16:22:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A detailed explanation of how to do that can be used by other teams might make a nice short book.  Call it "Extreme Testing" :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment &#171; An Experiment in Scotch]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.anexperimentinscotch.com/?p=764</wp:comment_author_url>
			<wp:comment_author_IP>207.7.108.244</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 08:35:44</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 16:35:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Integration just isn&#8217;t hardcore enough. What an amazing and fascinating place that must be to work, an environment where discipline to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[We Named The Dog Indiana &laquo; Drive Yards]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://driveyards.com/2009/02/10/we-named-the-dog-indiana/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.140</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 08:38:19</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 16:38:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] post info  By smspencer   Categories: Future and Tech  Tags: Awesome, Continuous Deployment, Hacker News, Sharding                    Just a quick update to comment on my finding of the Holy Grail of automated deployment. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Francis Hwang]]></wp:comment_author>
			<wp:comment_author_email>sera@fhwang.net</wp:comment_author_email>
			<wp:comment_author_url>http://fhwang.net/</wp:comment_author_url>
			<wp:comment_author_IP>66.9.159.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 09:11:26</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 17:11:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! I don't buy that many technical books these days, but if you ever end up writing this up in 200-page form, please please let me know.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[poifadfpoaidf]]></wp:comment_author>
			<wp:comment_author_email>poaisdfdsf@dfasf.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.210.106.138</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 09:27:55</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 17:27:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[how do you make the changes atomically, using rsync?  it operates only on one file at a time, afaik]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[joran]]></wp:comment_author>
			<wp:comment_author_email>joran@example.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.20.14.144</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 09:43:16</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 17:43:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[i believe imvu uses tdd so code reviews are a bit outdated]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Pearson]]></wp:comment_author>
			<wp:comment_author_email>pp@myelin.co.nz</wp:comment_author_email>
			<wp:comment_author_url>http://www.myelin.co.nz/post/</wp:comment_author_url>
			<wp:comment_author_IP>208.82.18.93</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 09:50:50</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 17:50:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Clever!  Especially the automatic load comparison and rollback.

pifadfpoaidf: They rsync the code into a separate folder, then flip a symlink to make it live.  e.g. the document root is /var/www/current, which is a symlink to /var/www/1.  The next deployment rsyncs to /var/www/2 and flips the /var/www/current symlink to point to that when ready.  And so on.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Hupp]]></wp:comment_author>
			<wp:comment_author_email>adam@hupp.org</wp:comment_author_email>
			<wp:comment_author_url>http://hupp.org/adam/</wp:comment_author_url>
			<wp:comment_author_IP>204.15.21.168</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:00:31</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:00:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is very cool, thanks for sharing.  @joran, I don't see how code reviews are outdated in a TDD environment.  Even if your tests are perfect it's still useful to have reviews to check that the tests are comprehensive, are testing the right things, and implementation is good.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Gadd]]></wp:comment_author>
			<wp:comment_author_email>kevin.gadd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://luminance.org/</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:07:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:07:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[joran: Code reviews can be important for the things that TDD won't always tell you, like 'this query you just wrote is a table scan' or 'this algorithm won't scale to 1 million users'. Those kinds of issues tend to be the ones that won't set off an automatic rollback because you don't feel the pain until hours, days or weeks after you push them out to your cluster. Right now we use monitoring to pick up the slack, but it costs our operations team a lot of time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[h3]]></wp:comment_author>
			<wp:comment_author_email>haineault@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://haineault.com/</wp:comment_author_url>
			<wp:comment_author_IP>205.151.65.177</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:16:15</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:16:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's something I've been dreaming about for a long time, but it takes lots of work and discipline to achieve it and you did it. Congratulation!

Can we hope to have more details or at least more streamlined methodology ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>54</wp:comment_id>
			<wp:comment_author><![CDATA[Nosredna]]></wp:comment_author>
			<wp:comment_author_email>rhettanderson@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>208.100.137.92</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 10:31:38</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 18:31:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IMVU seems to have sprung out of There.com somehow. I remember when There was in development. Don Carson (formerly of Disney and Sierra Online), a friend and former coworker of mine, was an artist there. It had some very funny bugs early on when people were learning how to abuse it.

Nice to know it's still operational. Always wondered what happened to it.

Great post, by the way.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4324563</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Rooney]]></wp:comment_author>
			<wp:comment_author_email>mrooney@ubuntu.com</wp:comment_author_email>
			<wp:comment_author_url>http://mrooney.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>64.244.66.2</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 12:41:20</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 20:41:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One of your earlier criticisms was that you must not have any customers, but to me it seems that the more customers you have the better this process works and the more robust it is.

If you push your new code out to 1% of your users for a minute then the more users you have, the better chance you have of catching any problems and rolling back before a full roll out. However if you only have a handful of users online at any given time, the chances that something isn't caught in that first minute seem much higher; you'd probably either need to increase that time or increase the exposure percentage, neither of which seems advantageous.

You want to keep the chance of a random user getting this code, and the time needed to adequately ensure the quality of it, to a minimum. It seems to me that the more users you have the lower these numbers become. Would you agree?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>59</wp:comment_id>
			<wp:comment_author><![CDATA[Andy]]></wp:comment_author>
			<wp:comment_author_email>akeidel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://stillworkinonit.com</wp:comment_author_url>
			<wp:comment_author_IP>66.192.34.64</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 12:45:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 20:45:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, that's awesome stuff.  Wanna share some of your scripts?  Or sell them to me for beer money?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Von Fange]]></wp:comment_author>
			<wp:comment_author_email>daniel@leancoder.com</wp:comment_author_email>
			<wp:comment_author_url>http://leancoder.com</wp:comment_author_url>
			<wp:comment_author_IP>208.104.141.65</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 12:46:54</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 20:46:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@poifadfpoaidf

To make atomic operations with rsync, you rsync to a copy of the destination directory, then switch a symlink over to point at your new directory.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>61</wp:comment_id>
			<wp:comment_author><![CDATA[WulfCry]]></wp:comment_author>
			<wp:comment_author_email>wulfcry_1001@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>62.45.0.200</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 13:29:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 21:29:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How nice so what the real drawback. 
No wait I see it you wrote it down.

"A symlink is switched on a small subset of the machines throwing the code live to its first few customers."

Darn thats why my system slows up.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>62</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander Fairley]]></wp:comment_author>
			<wp:comment_author_email>alexander.fairley@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>146.115.38.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 13:29:26</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 21:29:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sounds like a neat process. What do the graphs of your release statistics(in ref. to Statistically Significant regression) look like?
Also, as a quibble
"Continuous Deployment isn’t just an abstract theory. At IMVU it’s a core part of our culture to ship. It’s also not a new technique here, we’ve been practicing continuous deployment for years; far longer than I’ve been a member of this startup."
and then you link to
http://startuplessonslearned.blogspot.com/2008/09/lean-startup.html
which appears to be a random post about Lean development from less than one year ago. Doesn't really back up your claim about walking uphill both ways through snow for millenia... :D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>63</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 13:58:29</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 21:58:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@ Nosredna : Don Carson still works with us ( http://avatars.imvu.com/Don ).

It's so weird seeing buildbot off of the actual buildbot page.  Tim, you should post one with a failed buildbot upgrade showing so it's all red and yellow and purple! :D]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 14:04:37</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 22:04:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Alexander Fairly: Yeah, that link was a little bit just thrown in there. That is the blog of our cofounder and former CTO. Lean Startup is a term he uses (and maybe coined?) to describe end-to-end agility in a startup. It's the theory behind Lean Startups (and Lean Manufacturing before it) that led us to invest in Continuous Deployment. 

Ben McGraw: Shhh, our tests _never_ fail because our code is perfect.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 14:08:42</wp:comment_date>
			<wp:comment_date_gmt>2009-02-10 22:08:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mike Rooney: 

Yeah, it's true that more customers help in testing faster. We measure registrations in a rate per second, which means a minute of testing is guaranteed to exercise the registration flow quite a few times. 

They also help in testing more subtle issues; they'll smoke out all the edge cases you never thought about. That also means you can run more subtle A/B tests, which has been invaluable to our business.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[Knowtu &raquo; links for 2009-02-10]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.knowtu.com/2009/02/10/links-for-2009-02-10/</wp:comment_author_url>
			<wp:comment_author_IP>203.88.118.177</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 17:03:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 01:03:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz (tags: development agile) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[@TheKeyboard &raquo; Blog Archive &raquo; Rebuilding Your Programming And Deployment Environments]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.littlehart.net/atthekeyboard/2009/02/10/rebuilding-your-programming-and-deployment-environments/</wp:comment_author_url>
			<wp:comment_author_IP>67.207.132.29</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 18:35:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 02:35:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I&#8217;ve thought about continuous integration. This incredibly inspiring post about continuous deployment has me really thinking hard about how my changes actually get pushed up out of dev to production. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[Glyph]]></wp:comment_author>
			<wp:comment_author_email>glyph@divmod.com</wp:comment_author_email>
			<wp:comment_author_url>http://glyph.twistedmatrix.com/</wp:comment_author_url>
			<wp:comment_author_IP>76.118.176.150</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 22:08:25</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 06:08:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for this post.  It's definitely inspiring :).

However, what do you do about schema changes?  The need to upgrade data in production (and the difficulty of both effectively testing downgraders and preserving information that earlier schemas did not account for) has always been my biggest difficulty in pushing new changes this quickly.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.7.53.122</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 22:27:58</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 06:27:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Glyph: Unfortunately, we're not much more agile than anybody else in that respect. As long as the data sets are small we have tools that make applying schema changes painless, but as soon as the alters get expensive it gets awkward. (Explained in more detail http://news.ycombinator.com/item?id=474862)

My guess is that we could build a decent automated system by having a replicated stand by machine just for schema updates. You'd apply new schemas to the stand by and then automatically fail over to it. If you have to roll back, you just swap back the original machine, after which you have to rebuild the stand by from backups or some other expensive recovery option. You'd still need yet another safety net, in case of mysql crashes or other shenanigans, so you'd end up with a 2nd stand by machine (3 hosts per database role). 

We just don't have to do that many expensive schema updates to warrant this type of system... yet :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[Simon G]]></wp:comment_author>
			<wp:comment_author_email>simong@proactive-integ.co.za</wp:comment_author_email>
			<wp:comment_author_url>http://manticoreblog.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>196.35.158.181</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 22:33:56</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 06:33:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very interesting, and food for thought.
I am wondering how this would work for complex business process applications - what we do. It seems that to use your approach requires that test plans and scripts have to be well thought-out before hand, and that test development is given as much value as code development.
It requires quite a culture change in a development organisation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Anders S]]></wp:comment_author>
			<wp:comment_author_email>anders@f12.no</wp:comment_author_email>
			<wp:comment_author_url>http://blog.f12.no</wp:comment_author_url>
			<wp:comment_author_IP>146.72.249.253</wp:comment_author_IP>
			<wp:comment_date>2009-02-10 23:42:03</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 07:42:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fantastic! I have been striving to do something similar for a long time, but have never come as close as you guys. I'm very impressed.

One of my biggest problems with this has been like you mention problems with tests that break too often or from the wrong reason. Are you using any special tricks to elevate the quality of the tests or is it just hard work (it usually is, but one can hope)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[Steve Loughran]]></wp:comment_author>
			<wp:comment_author_email>steve.loughran@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.1060.org/blogxter/publish/5</wp:comment_author_url>
			<wp:comment_author_IP>82.33.116.248</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 01:31:12</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 09:31:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Continuous Deployment is something I've been advocating for a few years now
http://www.hpl.hp.com/techreports/2002/HPL-2002-274.html
http://wiki.smartfrog.org/wiki/display/sf/Pattern+-+Continuous+Deployment

For it to work you need a good staging/test system, and the ability to rollback fast.

Where it creates problems is that it can create unrealistic expectations of how rapidly fixes can be pushed out, hence how rapidly problems can be fixed. Saying a site update is overnight (fully automated) takes the stress off the developers to find a quick and dirty solution. Otherwise within 15 minutes of a strategic partner reporting a bug, they are on the phone asking if the fix is live.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[A/B Split Testing or Avoiding The Hippo &laquo; There Will Be Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joblivious.wordpress.com/2009/02/11/ab-split-testing-or-avoiding-the-hippo/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.151</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 02:43:05</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 10:43:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the reddit comments on Timothy&#8217;s second continuous integration article, many of the posters bemoan the fact that he works at IMVU (yes, I work at IMVU too): &#8220;This [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[dancres]]></wp:comment_author>
			<wp:comment_author_email>dan.creswell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dancres.org/blitzblog</wp:comment_author_url>
			<wp:comment_author_IP>80.177.118.55</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 03:52:43</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 11:52:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If people want some idea of what's possible check out Autopilot:

http://blogs.zdnet.com/microsoft/?p=1160

http://research.microsoft.com/apps/pubs/default.aspx?id=64604

This beast is in some part behind the Live Services stuff MS are running.....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1356513</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[Actually...]]></wp:comment_author>
			<wp:comment_author_email>watchthis@watchthisnext.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.113.86.228</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 04:02:30</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 12:02:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice linkbaiting!

&gt;Every commit should be instantly deployed to production.
from your original post implies commits go straight to production, sans testing, and you got the response the idea deserves.

&gt; deploying code changes to production as rapidly as possible. 
As rapidly as possible is very different to instantly, and leaves scope for any amount of testing.  But still, I guess it got you to the front page of news.YC so congrats.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[dancres]]></wp:comment_author>
			<wp:comment_author_email>dan.creswell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dancres.org/blitzblog</wp:comment_author_url>
			<wp:comment_author_IP>80.177.118.55</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 04:35:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 12:35:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Nice linkbaiting!

&gt;Every commit should be instantly deployed to production.
from your original post implies commits go straight to production, sans testing, and you got the response the idea deserves.

&gt; deploying code changes to production as rapidly as possible.
As rapidly as possible is very different to instantly, and leaves scope for any amount of testing. But still, I guess it got you to the front page of news.YC so congrats."

Implies is not the same as explicit statement.  Making assumptions based on implication and following up with debate therefore makes little sense.

Seemingly people made the same mistake with the interpretation of "instantly".

Your comment implies some things about you (love the fact you don't put your name up):  Should I assume the implications are true?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1356513</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Beyond Continuous Integration &#8230; Continuous Deployment at IMVU and a tale from Pirum &laquo; Kane Mar]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kanemar.com/2009/02/11/beyond-continuous-integration-continuous-deployment-at-imvu-and-a-tale-from-pirum/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.11</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 09:04:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 17:04:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Deployment at IMVU and a tale from&nbsp;Pirum  Jump to Comments I&#8217;ve just finished reading an excellent article on Continuous Deployment. This is the way of the future. Now that Continuous Integration has become (almost) mainstream and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>90</wp:comment_id>
			<wp:comment_author><![CDATA[Software Quality Digest - 2009-02-11 | No bug left behind]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nobugleftbehind.com/software-quality-digest-2009-02-11/</wp:comment_author_url>
			<wp:comment_author_IP>85.10.195.181</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 10:52:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 18:52:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day - &#8220;The high level of our process is dead simple: Continuously integrate (commit early and often). On commit automatically run all tests. If the tests pass deploy to the cluster. If the deploy succeeds, repeat.&#8221; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[Max Indelicato]]></wp:comment_author>
			<wp:comment_author_email>max.indelicato@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.maxindelicato.com</wp:comment_author_url>
			<wp:comment_author_IP>216.217.194.131</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 14:54:12</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 22:54:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, impressive strategy you've got here. I can imagine the difficulty is in the details, but getting this level of near real-time deployment is worth it. I'd like to see a detailed write-up on this process and the challenges you faced in implementing it reliably. Good stuff.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment / taint.org: Justin Mason's Weblog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://taint.org/2009/02/12/131110a.html</wp:comment_author_url>
			<wp:comment_author_IP>216.180.243.10</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 04:12:44</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 12:12:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This is awesome, if a little insane. Continuous Deployment at IMVU: Doing the impossible fifty times a day: [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>98</wp:comment_id>
			<wp:comment_author><![CDATA[B Clark]]></wp:comment_author>
			<wp:comment_author_email>brad.r.clark@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>170.252.54.132</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:19:26</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:19:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent Blog.  I would love to get to this point for our site.  I was wondering what everyone uses to test web applications, httpUnit, is that the standard?  

If the sites look and feel changes significantly does this have huge impacts to the test suite.  Any thoughts would be greatly appreciated.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[Polly Andersson]]></wp:comment_author>
			<wp:comment_author_email>mail@example.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>87.193.165.87</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:56:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:56:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OMFG! My o panties are not SFW after reading this!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>119</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Ludwig]]></wp:comment_author>
			<wp:comment_author_email>joe@programmerjoe.com</wp:comment_author_email>
			<wp:comment_author_url>http://programmerjoe.com</wp:comment_author_url>
			<wp:comment_author_IP>71.231.201.228</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 09:57:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 17:57:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can see where continuous deployment would be possible (if a lot of work) for a web site where all the bits live on your servers and there are no persistent connections from the outside world.  Do you follow the same practices for new versions of the client and the servers that it connects to?  How do you do that without knocking everyone offline multiple times a day and annoying your customers?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Prescod]]></wp:comment_author>
			<wp:comment_author_email>paul@prescod.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.183.104.137</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:48:48</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:48:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Where in your process do you catch usability problems and non-functional problems like grammar mistakes?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Rooney]]></wp:comment_author>
			<wp:comment_author_email>mrooney@ubuntu.com</wp:comment_author_email>
			<wp:comment_author_url>http://mrooney.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>64.244.66.2</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:58:57</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:58:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Paul, there is no reason why you couldn't still have QA people. They could just be using the production environment instead of a staging environment, and wouldn't be required as a step in between developing and pushing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[y3]]></wp:comment_author>
			<wp:comment_author_email>admin@ht83.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.y3games.net</wp:comment_author_url>
			<wp:comment_author_IP>118.71.24.37</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 19:34:34</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 03:34:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[............
............
............
............
after reading this]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Programmer Joe &raquo; Continuous Deployment with Thick Clients]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://programmerjoe.com/2009/02/12/continuous-deployment-with-thick-clients/</wp:comment_author_url>
			<wp:comment_author_IP>216.17.128.66</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 22:35:48</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 06:35:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] this week Eric Ries and Timothy Fitz posted on a technique called Continuous Deployment that they use at IMVU.  Timothy describes it [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Nielsen &raquo; Biweekly links for 02/13/2009]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://michaelnielsen.org/blog/?p=559</wp:comment_author_url>
			<wp:comment_author_IP>208.113.190.19</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 02:53:22</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 10:53:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[The Emergent Properties of Continual Automation &laquo; Timothy Fitz]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://timothyfitz.wordpress.com/2009/02/13/continual-automation/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.149</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 03:16:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 11:16:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the most dramatic examples I have relate to our test and deploy infrastructure, I&#8217;ll skip rehashing those [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>157</wp:comment_id>
			<wp:comment_author><![CDATA[Igor]]></wp:comment_author>
			<wp:comment_author_email>ipostelnik@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.41.149.67</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 07:37:53</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 15:37:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How do you deal with the risk of losing or corrupting data due to a bug that wasn't caught? I don't know your transaction rates, but running bad code even on a subset of machines for 1 minute could mean loss of thousands of items (whatever it is in your app).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>169</wp:comment_id>
			<wp:comment_author><![CDATA[joblivious]]></wp:comment_author>
			<wp:comment_author_email>jmathes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.81.58.65</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 20:27:33</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 04:27:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nosredna: There.com still exists.  It's a different company.  What it has in common with IMVU is we were founded by the same guy, Will Harvey.  He brought the lessons he learned at There to IMVU, and also brought a lot of the best employees, Don included.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6736880</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[IMVU is 3d avatar chat; it&#8217;s also a pride-inducing piece of software engineering. | Ben McGraw&#8217;s Egometry]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.egometry.com/tech/imvu-is-3d-avatar-chat-its-also-a-pride-inducing-piece-of-software-engineering/</wp:comment_author_url>
			<wp:comment_author_IP>209.223.7.197</wp:comment_author_IP>
			<wp:comment_date>2009-02-14 09:39:59</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 17:39:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Want to be in a functional business environment yet, as a team of engineers, ship code fifty times a day to a live and heavily used service? [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[Joseph]]></wp:comment_author>
			<wp:comment_author_email>turian@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.10.173.10</wp:comment_author_IP>
			<wp:comment_date>2009-02-15 12:14:43</wp:comment_date>
			<wp:comment_date_gmt>2009-02-15 20:14:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What software do you recommend for building a test suite?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[Notes for 2/15/2009 at MasterMaq&#8217;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.mastermaq.ca/2009/02/15/notes-for-2-15-2009/</wp:comment_author_url>
			<wp:comment_author_IP>216.194.67.18</wp:comment_author_IP>
			<wp:comment_date>2009-02-15 18:15:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-16 02:15:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Lots of software companies do continuous integration, but how many do continuous deployment? The folks IMVU have an incredibly inspiring deployment process. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>180</wp:comment_id>
			<wp:comment_author><![CDATA[Gradual deployment of schema changes : Understanding Nothing]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nothing.tmtm.com/archives/2701</wp:comment_author_url>
			<wp:comment_author_IP>193.201.201.144</wp:comment_author_IP>
			<wp:comment_date>2009-02-16 03:13:21</wp:comment_date>
			<wp:comment_date_gmt>2009-02-16 11:13:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fritz has a very interesting blog post on Continuous Deployment at IMVU (subtitled &#8220;Doing the impossible fifty times a day&#8221;), detailing how all committed code [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>181</wp:comment_id>
			<wp:comment_author><![CDATA[Bashton Blog &raquo; Blog Archive &raquo; Continuous Deployment]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.bashton.com/2009/continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>87.237.60.226</wp:comment_author_IP>
			<wp:comment_date>2009-02-16 07:46:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-16 15:46:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] software for pretty much as long as I can remember.  This made me all the more interested to read this post telling how IMVU, a &#8216;avatar based chat site&#8217; go programatically straight from commit to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>184</wp:comment_id>
			<wp:comment_author><![CDATA[Testable Web UI: Part I &laquo; Giant Communist Robots]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://giant-communist-robots.com/?p=17</wp:comment_author_url>
			<wp:comment_author_IP>209.223.7.197</wp:comment_author_IP>
			<wp:comment_date>2009-02-17 22:23:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 06:23:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] linearly, until it&#8217;s just too valuable to pass up. You can push the problem off somewhat by investing in hardware, and you can save quite a lot of engineer-muscle by doing this, but there&#8217;s eventually going [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>193</wp:comment_id>
			<wp:comment_author><![CDATA[Matt O&#8217; Rama &raquo; Big Time Continuous Deployment / Testing]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mattorama.net/blog/index.php/2009/02/19/big-time-continuous-deployment-testing/</wp:comment_author_url>
			<wp:comment_author_IP>209.223.236.10</wp:comment_author_IP>
			<wp:comment_date>2009-02-19 13:50:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-19 21:50:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU The high level of our process is dead simple: Continuously integrate (commit early and often). On commit automatically run all tests. If the tests pass deploy to the cluster. If the deploy succeeds, repeat. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[Slava Imeshev]]></wp:comment_author>
			<wp:comment_author_email>vimeshev@viewtier.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.viewtier.com</wp:comment_author_url>
			<wp:comment_author_IP>24.130.12.57</wp:comment_author_IP>
			<wp:comment_date>2009-02-19 20:32:38</wp:comment_date>
			<wp:comment_date_gmt>2009-02-20 04:32:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We have been doing it for <a href="http://www.viewtier.com" rel="nofollow">Parabuild</a> (using Parabuild itself) for quite some time. All builds are automatically built, tested and deployed for public access to the production website.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[CI and quality &laquo; Tech Introvert]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techintrovert.wordpress.com/2009/03/06/ci-quality/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.143</wp:comment_author_IP>
			<wp:comment_date>2009-03-06 09:01:13</wp:comment_date>
			<wp:comment_date_gmt>2009-03-06 17:01:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] and&nbsp;quality By dionad  Michael over at Developsense has an interesting reply to a recent blog entry regarding continuous [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[Handling Intermittence: How to Survive Test Driven Development &laquo; There Will Be Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joblivious.wordpress.com/2009/02/20/handling-intermittence-how-to-survive-test-driven-development/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.246.66</wp:comment_author_IP>
			<wp:comment_date>2009-02-20 00:48:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-20 08:48:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] team is practicing test-driven development. At the beginning, it&#8217;s going great. You&#8217;re more agile than you ever imagined. Everyone writes tests, tests pass, and everyone&#8217;s confidence level in the codebase is high. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[imvu user]]></wp:comment_author>
			<wp:comment_author_email>philrussell50@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.75.233.245</wp:comment_author_IP>
			<wp:comment_date>2009-03-07 01:42:12</wp:comment_date>
			<wp:comment_date_gmt>2009-03-07 09:42:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sadly this style of development sucks if you actually want a decent service from a user perspective as every code change has multiple unexpected sie effects and the normal state of the IM engine is glitchy (and thats being very charitable). for each bug "fixed" or "improvement made" at least 2 - 3 other bugs are introduced. its very frustrating and makes imvu look more than a little incompetent after over 4 years as a "beta" (LOL).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>259</wp:comment_id>
			<wp:comment_author><![CDATA[bobbynorton.com &raquo; Blog Archive &raquo; Moving from CI to CID]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://bobbynorton.com/?p=6</wp:comment_author_url>
			<wp:comment_author_IP>74.86.132.130</wp:comment_author_IP>
			<wp:comment_date>2009-03-11 09:30:17</wp:comment_date>
			<wp:comment_date_gmt>2009-03-11 17:30:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] there was a lot of noise about troop movement in Iraq. Lately, however, things have become much more [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[Worthy of Praise - Push cx]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://push.cx/2009/worthy-of-praise</wp:comment_author_url>
			<wp:comment_author_IP>208.113.216.190</wp:comment_author_IP>
			<wp:comment_date>2009-02-22 08:30:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-22 16:30:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] really enjoyed Timothy Fitz&#8217;s new blog, he&#8217;s sold me on Continuous Deployment, named the benefits automation I never put my finger on, and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[Reading List, 11March09 &raquo; Karl Katzke | PHP, Puppies, and other Geekery]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.karlkatzke.com/reading-list-11march09/</wp:comment_author_url>
			<wp:comment_author_IP>67.222.141.88</wp:comment_author_IP>
			<wp:comment_date>2009-03-11 09:40:17</wp:comment_date>
			<wp:comment_date_gmt>2009-03-11 17:40:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the Impossible Fifty Times a Day [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Why unit testing is a waste of time &laquo; Tim&#8217;s Development Diary]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://devtim.wordpress.com/2009/02/25/why-unit-testing-is-a-waste-of-time/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.21</wp:comment_author_IP>
			<wp:comment_date>2009-02-24 21:37:53</wp:comment_date>
			<wp:comment_date_gmt>2009-02-25 05:37:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day is another fascinating article. It describes a project that has 4.4 hours of automated tests, including an hour of tests that involve running Internet Explorer instances an simulating a user clicking and typing. By running them across dozens of servers, they can run all the tests in 9 minutes. What&#8217;s more, they have so much faith in these tests that their code is automatically deployed to live when the tests pass. This happens 50 times a day on average. Brilliant! [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>289</wp:comment_id>
			<wp:comment_author><![CDATA[Why unit testing is a waste of time &raquo; SDK]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://sdk.org.nz/2009/02/25/why-unit-testing-is-a-waste-of-time/</wp:comment_author_url>
			<wp:comment_author_IP>67.18.207.212</wp:comment_author_IP>
			<wp:comment_date>2009-04-14 14:51:07</wp:comment_date>
			<wp:comment_date_gmt>2009-04-14 22:51:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day is another fascinating article. It describes a project that has 4.4 hours of automated tests, including an hour of tests that involve running Internet Explorer instances an simulating a user clicking and typing. By running them across dozens of servers, they can run all the tests in 9 minutes. What&#8217;s more, they have so much faith in these tests that their code is automatically deployed to live when the tests pass. This happens 50 times a day on average. Brilliant! [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>323</wp:comment_id>
			<wp:comment_author><![CDATA[Bill Bartmann]]></wp:comment_author>
			<wp:comment_author_email>stefaniad1y@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://wso2.org/wiki/display/~natefern</wp:comment_author_url>
			<wp:comment_author_IP>202.91.8.204</wp:comment_author_IP>
			<wp:comment_date>2009-09-03 14:20:26</wp:comment_date>
			<wp:comment_date_gmt>2009-09-03 22:20:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool site, love the info.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>253</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz | The Crime Studio]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://crimestudio.net/?p=258</wp:comment_author_url>
			<wp:comment_author_IP>174.129.247.38</wp:comment_author_IP>
			<wp:comment_date>2009-03-10 05:07:07</wp:comment_date>
			<wp:comment_date_gmt>2009-03-10 13:07:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz The Machine | Tags:agile, development Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>275</wp:comment_id>
			<wp:comment_author><![CDATA[IMVU: Continuous Integration does not cause Low Quality &laquo; Integrable Is A Word]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://joblivious.wordpress.com/2009/03/27/imvu-continuous-integration-does-not-cause-low-quality/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.210</wp:comment_author_IP>
			<wp:comment_date>2009-03-26 22:41:43</wp:comment_date>
			<wp:comment_date_gmt>2009-03-27 06:41:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Integration does not cause Low&nbsp;Quality  Since Timothy first wrote about it, IMVU&#8217;s bleeding edge continuous integration strategy got a lot of attention. Some of it has [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>274</wp:comment_id>
			<wp:comment_author><![CDATA[Hannu]]></wp:comment_author>
			<wp:comment_author_email>hannu.kokko@iki.fi</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.156.230.229</wp:comment_author_IP>
			<wp:comment_date>2009-03-25 12:46:44</wp:comment_date>
			<wp:comment_date_gmt>2009-03-25 20:46:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This looks really cool and quite extreme. State of the art stuff.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email>Anonymous@mailnator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.38.15.2</wp:comment_author_IP>
			<wp:comment_date>2009-02-26 08:38:24</wp:comment_date>
			<wp:comment_date_gmt>2009-02-26 16:38:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["The code is now live and fully pushed. This whole process is simple enough that it’s implemented by a handfull of shell scripts."

I hope you have at least as much test coverage for that handful of scripts! Otherwise, the rest of the work is pretty much moot.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Nilanjan]]></wp:comment_author>
			<wp:comment_author_email>n_ray@live.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>155.188.183.6</wp:comment_author_IP>
			<wp:comment_date>2009-02-26 08:44:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-26 16:44:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is awesome. Are you guys hiring :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[Lonny Eachus]]></wp:comment_author>
			<wp:comment_author_email>lonny@titanez.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.185.49.146</wp:comment_author_IP>
			<wp:comment_date>2009-02-26 09:32:41</wp:comment_date>
			<wp:comment_date_gmt>2009-02-26 17:32:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This may work for you, but I would advise strong caution to others. Code tests are great, we also use lots of tests and the commit early and often credo. Nevertheless, our QA department was VERY good at picking out edge cases and the occasional other thing that developers had not anticipated. ("What happens if I rapidly double-click this submit button?" )

If you are going to try this you had better have excellent review of your code to cover edge cases, and you had better have lots of integration and view tests. Then, MAYBE this will work for you (and even then you will miss some edge cases). Otherwise, for most houses, this would be a major waste of time and money.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>278</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Development Mode &laquo; Dave Q]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://daveq.wordpress.com/2009/04/01/continuous-development-mode/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.227</wp:comment_author_IP>
			<wp:comment_date>2009-03-31 17:59:59</wp:comment_date>
			<wp:comment_date_gmt>2009-04-01 01:59:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] It has enabled companies I’ve worked with to deploy new code to production as often as fifty times every day. Continuous deployment is controversial. Most people, when they first hear about continuous [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[Links I clicked on today - :Running Down the Way Up]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://johncavacas.com/blog/2009/02/26/links-i-clicked-on-today-2/</wp:comment_author_url>
			<wp:comment_author_IP>207.7.108.203</wp:comment_author_IP>
			<wp:comment_date>2009-02-26 14:09:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-26 22:09:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment - insane [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>281</wp:comment_id>
			<wp:comment_author><![CDATA[james mckay dot net &raquo; Continuous Deployment: radical idea or April fool?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://jamesmckay.net/2009/04/continuous-deployment-radical-idea-or-april-fool/</wp:comment_author_url>
			<wp:comment_author_IP>87.106.104.41</wp:comment_author_IP>
			<wp:comment_date>2009-04-01 23:01:49</wp:comment_date>
			<wp:comment_date_gmt>2009-04-02 07:01:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day of all days. However, clicking through to the article he linked to led me to a couple of blog entries written back in February, and a Google blog search turned up several dated hits indicating that [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>285</wp:comment_id>
			<wp:comment_author><![CDATA[blog.mattwynne.net : The Future of Automated Acceptance Testing]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.mattwynne.net/2009/04/06/the-future-of-automated-acceptance-testing/</wp:comment_author_url>
			<wp:comment_author_IP>208.113.248.241</wp:comment_author_IP>
			<wp:comment_date>2009-04-06 12:18:34</wp:comment_date>
			<wp:comment_date_gmt>2009-04-06 20:18:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] run across multiple machines and run them in parallel. We&#8217;ve been impressed by the likes of IMVU and the guys at weplay have spiked a mechanism for doing this with Cucumber test suites. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>287</wp:comment_id>
			<wp:comment_author><![CDATA[TeamCity 4.0.2 + rake-dotnet == parallelisation in the build cloud | Never Run With Scissors]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.neverrunwithscissors.com/2009/04/09/teamcity-402-rake-dotnet-parallelisation-in-the-build-cloud/</wp:comment_author_url>
			<wp:comment_author_IP>174.133.21.90</wp:comment_author_IP>
			<wp:comment_date>2009-04-09 08:17:10</wp:comment_date>
			<wp:comment_date_gmt>2009-04-09 16:17:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] it, running tests against it, packaging it, deploying it (I was particularly inspired when I read IMVU&#8217;s doing the impossible 50 times a day&#8230;!) - all of that good stuff that, without computers, would fail miserably because humans just [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>265</wp:comment_id>
			<wp:comment_author><![CDATA[Every Nine Minutes &laquo; The Agile Executive]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://theagileexecutive.com/2009/03/14/every-nine-minutes/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.244.84</wp:comment_author_IP>
			<wp:comment_date>2009-03-14 21:12:49</wp:comment_date>
			<wp:comment_date_gmt>2009-03-15 05:12:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is reported to do so every nine minutes. The report has created a fair amount of controversy. Whether you are or are not in favor of such [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>226</wp:comment_id>
			<wp:comment_author><![CDATA[Rich Morin]]></wp:comment_author>
			<wp:comment_author_email>rdm@cfcl.com</wp:comment_author_email>
			<wp:comment_author_url>http://cfcl.com/rdm</wp:comment_author_url>
			<wp:comment_author_IP>64.142.15.200</wp:comment_author_IP>
			<wp:comment_date>2009-02-27 14:52:20</wp:comment_date>
			<wp:comment_date_gmt>2009-02-27 22:52:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the very interesting post. I recommend Yehuda Katz's talks on testing: "Writing code that doesn't suck" (RubyCoonf 2008) and "Testing Merb applications" (MerbCamp 2008). He presents a good argument for regression testing, as well as specific advice such as "test what you care about" and "concentrate on public APIs".

I wonder if, in your test suite, you have any tests that simply check for general characteristics (e.g., broken HTML or links) of selected "real pages". This would seem to fit well into your continuous testing approach.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>293</wp:comment_id>
			<wp:comment_author><![CDATA[Software Delivery at the Next Level: Continous Deployment &laquo; Scrum 4 You]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://scrum4you.wordpress.com/2009/04/27/software-delivery-at-the-next-level-continous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.63</wp:comment_author_IP>
			<wp:comment_date>2009-04-26 21:30:41</wp:comment_date>
			<wp:comment_date_gmt>2009-04-27 05:30:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] It’s important to note that system I’m about to explain evolved organically in response to new demands on the system and in response to post-mortems of failures. Nobody gets here overnight, but every step along the way has made us better developers. (Fitz) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[Kirk Thoughts &raquo; Daily post (weekly)]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.gerrykirk.net/daily-post-weekly-17/</wp:comment_author_url>
			<wp:comment_author_IP>67.207.144.132</wp:comment_author_IP>
			<wp:comment_date>2009-02-28 16:35:09</wp:comment_date>
			<wp:comment_date_gmt>2009-03-01 00:35:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day. « Timothy Fitz [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>295</wp:comment_id>
			<wp:comment_author><![CDATA[Deployment continuos &raquo; Codigo Manso]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.codigomanso.com/es/2009/05/deployment-continuos/</wp:comment_author_url>
			<wp:comment_author_IP>208.97.183.16</wp:comment_author_IP>
			<wp:comment_date>2009-05-02 03:46:26</wp:comment_date>
			<wp:comment_date_gmt>2009-05-02 11:46:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Blog de Timothy Fitz: Continuous Deployment at IMVU: Doing the impossible fifty times a day [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>298</wp:comment_id>
			<wp:comment_author><![CDATA[exortech.com &raquo; Blog Archive &raquo; Release Blog #23 - Continuous Deployment&#8230; to test?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://exortech.com/blog/2009/04/28/release-blog-23-continuous-deployment-to-test/</wp:comment_author_url>
			<wp:comment_author_IP>70.87.43.162</wp:comment_author_IP>
			<wp:comment_date>2009-05-05 22:26:13</wp:comment_date>
			<wp:comment_date_gmt>2009-05-06 06:26:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 5 whys, split testing and other topics. I would have liked to spend a bit more time discussing continuous deployment, but I did get some more insight into how they got started with CD at [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>300</wp:comment_id>
			<wp:comment_author><![CDATA[GMake it Happen: Build Improvements and Parallelization | Geek Philosophy]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chrissimmons.ca/2009/05/gmake-it-happen-build-improvements-and-parallelization/</wp:comment_author_url>
			<wp:comment_author_IP>8.12.42.228</wp:comment_author_IP>
			<wp:comment_date>2009-05-06 21:40:21</wp:comment_date>
			<wp:comment_date_gmt>2009-05-07 05:40:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] attending Eric Ries&#8216; talk on the Lean Startup, I started thinking about how to work towards continuous deployment within Sophos. Note that I say &#8220;work towards&#8221; and not &#8220;achieve&#8221; - for my [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Split-Testing and Late-Night Coding | Ben McGraw&#8217;s Egometry]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.egometry.com/tech/split-testing-and-late-night-coding/</wp:comment_author_url>
			<wp:comment_author_IP>209.223.7.197</wp:comment_author_IP>
			<wp:comment_date>2009-03-05 00:27:44</wp:comment_date>
			<wp:comment_date_gmt>2009-03-05 08:27:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] IMVU, we deploy code fifty times a day. The code you just wrote goes out to the production cluster without waiting for QE people to sign [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>304</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment &laquo; Mental Pandiculation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://mentalpandiculation.com/?p=119</wp:comment_author_url>
			<wp:comment_author_IP>207.7.108.244</wp:comment_author_IP>
			<wp:comment_date>2009-06-05 05:38:53</wp:comment_date>
			<wp:comment_date_gmt>2009-06-05 13:38:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Integration just isn&#8217;t hardcore enough. What an amazing and fascinating place that must be to work, an environment where discipline to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>309</wp:comment_id>
			<wp:comment_author><![CDATA[himanshugpt]]></wp:comment_author>
			<wp:comment_author_email>him13@indiatimes.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>205.242.83.15</wp:comment_author_IP>
			<wp:comment_date>2009-06-24 21:58:47</wp:comment_date>
			<wp:comment_date_gmt>2009-06-25 05:58:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool... I liked it. 
Request you to write a descriptive article on writing the test cases with quality you described. It will help a lot of people including me.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6342489</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>311</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous software deployment and its SaaS implications | Chronic Enthusiasm]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://chronicenthusiasm.com/2009/07/16/continuous-software-deployment-and-its-saas-implications/</wp:comment_author_url>
			<wp:comment_author_IP>38.99.80.146</wp:comment_author_IP>
			<wp:comment_date>2009-07-16 19:33:24</wp:comment_date>
			<wp:comment_date_gmt>2009-07-17 03:33:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] recently received a link to a compelling blog article on continuous deployment at IMVU. Continuous deployment methodologies are really capable of disrupting the traditional enterprise [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>326</wp:comment_id>
			<wp:comment_author><![CDATA[Probably Programming &raquo; Blog Archive &raquo; Walking Journal: 45 miles, starting a Twitter client chain]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://probablyprogramming.com/2009/09/25/starting-a-twitter-client-chain/</wp:comment_author_url>
			<wp:comment_author_IP>72.249.127.146</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 00:37:29</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 08:37:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] awesome MochiWeb web server. My goals for this project include using test driven development and continuous deployment and fully embracing the mantra of &#8220;release early, release [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>314</wp:comment_id>
			<wp:comment_author><![CDATA[The Promise of the Lean Startup]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://gigaom.com/2009/08/11/the-promise-of-the-lean-startup/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.200</wp:comment_author_IP>
			<wp:comment_date>2009-08-10 23:01:31</wp:comment_date>
			<wp:comment_date_gmt>2009-08-11 07:01:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Total startup costs are plummeting — it costs less than $10,000 to launch a new, web-based product. Using the latest technology, a lean startup can create product prototypes in weeks and months, not years, and use customer feedback to evolve them in near-real time. Releases are measured in minutes and hours, not days and weeks -– in some cases, lean startups are releasing new code to production 50 times a day. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1065</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment &#8211; blog.joa-ebert.com - Blog of Joa Ebert]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.joa-ebert.com/2012/05/11/continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>87.230.107.5</wp:comment_author_IP>
			<wp:comment_date>2012-05-11 07:36:51</wp:comment_date>
			<wp:comment_date_gmt>2012-05-11 15:36:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] has already been said about Continuous Deployment. Etsy made it famous once and we integrated our own solution about two weeks [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1336750611.2092";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>335</wp:comment_id>
			<wp:comment_author><![CDATA[managewell]]></wp:comment_author>
			<wp:comment_author_email>tathagat.varma@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://managewell.net</wp:comment_author_url>
			<wp:comment_author_IP>122.167.244.10</wp:comment_author_IP>
			<wp:comment_date>2009-11-15 03:18:19</wp:comment_date>
			<wp:comment_date_gmt>2009-11-15 11:18:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If the software is of less than one fail in a million test cases run, than it is indeed a top quality software. But...if someone has to deploy a software 50 times a day, you know how bad the quality already is - I mean, a well-designed, well-engineered software doesn't deserve to be re-deployed so many times a day. So, full marks to engineering services team for an excellent CI and automated test system, and no cookie for the engineering team. Haven't the customers called the bluff yet ?

This seems to be a bad case of hack-test-hack-test...endless cycle. Deploying something 50 times a day doesn't condone bad engineering. And AFAIK, it is definitely LEANer but not Lean :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3531204</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>336</wp:comment_id>
			<wp:comment_author><![CDATA[Automated deployment using Subversion | Neil Lathwood&#8217;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.lathwood.co.uk/2009/11/16/automated-deployment-using-subversion/</wp:comment_author_url>
			<wp:comment_author_IP>80.244.178.171</wp:comment_author_IP>
			<wp:comment_date>2009-11-16 14:30:09</wp:comment_date>
			<wp:comment_date_gmt>2009-11-16 22:30:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] while ago I read an excellent blog post from Timothy Fitz called Continuous Deployment at IMVU: Doing the impossible fifty times a day, that got me started on trying to improve the way we deploy our websites at UKFast but just as [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1010</wp:comment_id>
			<wp:comment_author><![CDATA[Takeaways from Eric Ries&#8217; talk in Vancouver | Kareem Mayan Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kareem.wpengine.com/?p=701</wp:comment_author_url>
			<wp:comment_author_IP>173.255.205.78</wp:comment_author_IP>
			<wp:comment_date>2012-03-10 19:24:26</wp:comment_date>
			<wp:comment_date_gmt>2012-03-11 03:24:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Started Now with Continuous Deployment here&#8217;s Eric&#8217;s writeup with more detail) 1. Install a continuous integration server 2. [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331436266.4924";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>833</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Depl&#8230; | tryingtokeepitagile]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tryingtokeepitagile.wordpress.com/2011/12/18/continuous-depl/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.61.16</wp:comment_author_IP>
			<wp:comment_date>2011-12-18 11:05:41</wp:comment_date>
			<wp:comment_date_gmt>2011-12-18 19:05:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (CD), where changes are released several times a day, is popular among online game sites. IMVU for example, is a very strong champion of CD, and they use it to 50 times a [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1324235141.8342";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>551</wp:comment_id>
			<wp:comment_author><![CDATA[Four Principles of Effective Software Teams &laquo; kingsbery.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kingsbery.net/2010/12/21/four-principles-of-effective-software-teams/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.159</wp:comment_author_IP>
			<wp:comment_date>2010-12-21 06:05:53</wp:comment_date>
			<wp:comment_date_gmt>2010-12-21 14:05:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] example, Mr. Savino mentioned in his talk doing automated deployments, which is becoming a common practice. Automated deployments make the feedback loop between developers and those giving feedback (for [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1292940355]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292940355.9845";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>636</wp:comment_id>
			<wp:comment_author><![CDATA[Noticias 03-Junio-2011 - La Web de Programación]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kartones.net/blogs/lawebdeprogramacion/archive/2011/06/03/noticias-03-junio-2011.aspx</wp:comment_author_url>
			<wp:comment_author_IP>82.194.77.166</wp:comment_author_IP>
			<wp:comment_date>2011-06-02 23:41:06</wp:comment_date>
			<wp:comment_date_gmt>2011-06-03 07:41:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] de cómo Facebook hace sus releases de código: Y lo opuesto, una empresa que hace Continuous Deployment (con hasta 6 deploys por [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307086867]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>470</wp:comment_id>
			<wp:comment_author><![CDATA[William]]></wp:comment_author>
			<wp:comment_author_email>welyncha@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.hempjewelryworld.com</wp:comment_author_url>
			<wp:comment_author_IP>173.218.23.248</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 20:46:22</wp:comment_date>
			<wp:comment_date_gmt>2010-07-05 04:46:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thats pretty cool Tim thanks for sharing it with us!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278305182]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>471</wp:comment_id>
			<wp:comment_author><![CDATA[New Zealand Workcapade 2010 &laquo; Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.cliffano.com/2010/07/04/new-zealand-workcapade-2010/</wp:comment_author_url>
			<wp:comment_author_IP>208.78.103.34</wp:comment_author_IP>
			<wp:comment_date>2010-07-05 03:09:05</wp:comment_date>
			<wp:comment_date_gmt>2010-07-05 11:09:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] summary, the current hotness in CI world is continuous deployment, citing the experiences from IMVU and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278328145]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>613</wp:comment_id>
			<wp:comment_author><![CDATA[Scaling startups &laquo; Chad Dickerson&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.chaddickerson.com/2010/08/05/scaling-startups/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.248</wp:comment_author_IP>
			<wp:comment_date>2011-03-28 17:30:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-29 01:30:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] are done with their health insurance paperwork. We practice roughly what has become known as &#8220;continuous deployment.&#8221; This means one-button deploy, period. We&#8217;ve invested in the tooling to make this [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1301362245]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301362245.5908";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>610</wp:comment_id>
			<wp:comment_author><![CDATA[Fixing Sporadically Failing Specs | Debugging]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://22ideastreet.com/debug/fixing-sporadically-failing-specs</wp:comment_author_url>
			<wp:comment_author_IP>67.228.235.91</wp:comment_author_IP>
			<wp:comment_date>2011-03-14 07:16:31</wp:comment_date>
			<wp:comment_date_gmt>2011-03-14 15:16:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] if you&#8217;re doing continuous deployment, failing once every fifty times might be problematic.       Posted in Uncategorized by Anthony [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300115791]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>547</wp:comment_id>
			<wp:comment_author><![CDATA[Microsoft Azure Cloud &#8211; Top 20 Lessons Learned about MSFT&#8217;s PaaS &laquo; McCrory&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.mccrory.me/2010/12/13/microsoft-azure-cloud-top-20-lessons-learned-about-msfts-paas/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.247.110</wp:comment_author_IP>
			<wp:comment_date>2010-12-13 09:45:10</wp:comment_date>
			<wp:comment_date_gmt>2010-12-13 17:45:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] versions of the code operating against the same data so that you can roll upgrades (ala Timothy Fitz/Eric Ries) to reduce risk and without reducing performance. You should expect your data schema to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1292262311]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292262311.1127";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>577</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment in 5 easy steps &#8211; O&#8217;Reilly Radar &laquo; LJR Enterprises]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ljrenterprises.wordpress.com/2011/02/12/continuous-deployment-in-5-easy-steps-oreilly-radar/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.247.111</wp:comment_author_IP>
			<wp:comment_date>2011-02-12 11:13:21</wp:comment_date>
			<wp:comment_date_gmt>2011-02-12 19:13:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] It has enabled companies I’ve worked with to deploy new code to production as often as fifty times every day. via radar.oreilly.com      GA_googleAddAttr(&quot;AdOpt&quot;, &quot;1&quot;); GA_googleAddAttr(&quot;Origin&quot;, &quot;other&quot;); [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297538003]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297538003.7659";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>512</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment Basics in One Day &#8211; Reading List &laquo; MustExist &#8211; Curating the Long Tail]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.mustexist.com/2010/09/20/continuous-deployment-basics-in-one-day-reading-list/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.36</wp:comment_author_IP>
			<wp:comment_date>2010-09-20 09:59:54</wp:comment_date>
			<wp:comment_date_gmt>2010-09-20 17:59:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Eric Ries&#8217;s writings on CI are based mostly on his experience at IMVU. Here is a talk by Timothy Fitz (Engineering Lead) about IMVU&#8217;s CI practices (video and slides):http://saucelabs.com/blog/index.php/2009/09/continuous-deployment%E2%80%94the&#8230; and two of his posts &#8211; one about the benefits and principles of CI &#8211; http://timothyfitz.wordpress.com/2009/02/08/continuous-deployment/ &#8211; and another about the process: http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doi&#8230; [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1285005594]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>478</wp:comment_id>
			<wp:comment_author><![CDATA[Chapter 7: Scrumdiddlyumptious - True Ventures TEC Program]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.trueventurestec.com/2010/07/26/chapter-7-scrumdiddlyumptious/</wp:comment_author_url>
			<wp:comment_author_IP>66.147.242.89</wp:comment_author_IP>
			<wp:comment_date>2010-07-26 15:41:40</wp:comment_date>
			<wp:comment_date_gmt>2010-07-26 23:41:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &#8211; Timothy Fitz on IMVU&#8217;s use of Continuous Deployment [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1280187703]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>480</wp:comment_id>
			<wp:comment_author><![CDATA[sandy]]></wp:comment_author>
			<wp:comment_author_email>margo22@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://greenmorebeer.com</wp:comment_author_url>
			<wp:comment_author_IP>164.78.248.57</wp:comment_author_IP>
			<wp:comment_date>2010-08-03 05:02:58</wp:comment_date>
			<wp:comment_date_gmt>2010-08-03 13:02:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[PZ7PNe http://fgb7s3Ffjsev7yrbvqqcf7.com]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1280840579]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>492</wp:comment_id>
			<wp:comment_author><![CDATA[TkinneyJohnson/COOSpotON3D]]></wp:comment_author>
			<wp:comment_author_email>tkinneyjohnson@spoton3d.com</wp:comment_author_email>
			<wp:comment_author_url>http://spoton3d.com</wp:comment_author_url>
			<wp:comment_author_IP>71.170.42.244</wp:comment_author_IP>
			<wp:comment_date>2010-08-28 03:58:37</wp:comment_date>
			<wp:comment_date_gmt>2010-08-28 11:58:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We do continuous deployment as well. We do have a small test grid, but its not used regularly, as our systems are pretty stable and most of the work we're doing is fine tuning stuff that works really well and add-ons we know will not break things. 

Still, there have been times we were grateful there was a test grid to turn to and used it, as we saw what we were doing would have impacted our production grid dramatically. Even in beta times that's a problem.

I think our beta users as a whole appreciate what we're trying to do and the fast turn around on bugs and such. And yes, it does keep overhead dramatically low - something we all have to thin about these days.

Tessa
Co-Founder/COO @ SpotON3D.com]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1282996717]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>484</wp:comment_id>
			<wp:comment_author><![CDATA[Scaling Startups | Fast Company]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.fastcompany.com/1678467/scaling-startups?partner=rss</wp:comment_author_url>
			<wp:comment_author_IP>97.74.215.134</wp:comment_author_IP>
			<wp:comment_date>2010-08-14 01:53:43</wp:comment_date>
			<wp:comment_date_gmt>2010-08-14 09:53:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] they are done with their health insurance paperwork. We practice roughly what has become known as &quot;continuous deployment.&quot; This means one-button deploy, period. We&#039;ve invested in the tooling to make this possible, so it [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1281779624]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>485</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email>daviddepape@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.hempnecklacestore.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.16.27.70</wp:comment_author_IP>
			<wp:comment_date>2010-08-15 15:40:55</wp:comment_date>
			<wp:comment_date_gmt>2010-08-15 23:40:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow that's pretty interesting.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1281915655]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>488</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Ries: Continuous deployment in 5 easy steps &laquo; MD Informatics Lab]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mdinformaticslab.com/?p=696</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.46</wp:comment_author_IP>
			<wp:comment_date>2010-08-16 22:05:47</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 06:05:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] One of the lean startup techniques I discussed at the 2009 session at the Web 2.0 Expo is called continuous deployment. It’s a process whereby all code that is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new code to production as often as fifty times every day. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1282025149]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>489</wp:comment_id>
			<wp:comment_author><![CDATA[mvvenrooij]]></wp:comment_author>
			<wp:comment_author_email>mvvenrooijs@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://mvvenrooij.nl</wp:comment_author_url>
			<wp:comment_author_IP>62.140.137.122</wp:comment_author_IP>
			<wp:comment_date>2010-08-17 06:59:20</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 14:59:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[that is a great achievement]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1282057160]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>629</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment: Easier Said Than Done | ITPark]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.cheap-nike-store.com/ITPark/2011/05/14/continuous-deployment-easier/</wp:comment_author_url>
			<wp:comment_author_IP>66.147.240.160</wp:comment_author_IP>
			<wp:comment_date>2011-05-14 03:19:07</wp:comment_date>
			<wp:comment_date_gmt>2011-05-14 11:19:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is not to say that continuous deployment is not possible. Many organizations like Etsy, Heyo, IMVU &amp; Atlassian all do continuous deployment and supposedly, do it effectively as [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1305371947]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1305371947.77";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>575</wp:comment_id>
			<wp:comment_author><![CDATA[The Limits of Continuous Deployment]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://opinionated-programmer.com/2011/02/the-limits-of-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>50.17.251.103</wp:comment_author_IP>
			<wp:comment_date>2011-02-08 17:13:28</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 01:13:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] more tomorrow, but in the meantime, here are some of their writings: Timothy Fitz&#039;s motivation, how this works in practice, Brett Durrett&#039;s slides, and James Birchler giving some more info on [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297215499]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297215499.3055";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297214009.1713";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>611</wp:comment_id>
			<wp:comment_author><![CDATA[Intro to DevOps + what we learned at DevOpsDays Boston 2011 | ZeroTurnaround.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.zeroturnaround.com/blog/intro-to-devops-devopsdays-boston-2011/</wp:comment_author_url>
			<wp:comment_author_IP>184.73.152.73</wp:comment_author_IP>
			<wp:comment_date>2011-03-16 07:09:14</wp:comment_date>
			<wp:comment_date_gmt>2011-03-16 15:09:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment.  It&#8217;s probably worth checking out what they were doing at IMVU and Flickr as far back as [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300290318.1013";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1300288154.7946";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1300290318]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>593</wp:comment_id>
			<wp:comment_author><![CDATA[AppEngine vs. EC2: (an attempt to compare apples to oranges) &laquo; grack.com: Matt Mastracci&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://grack.com/blog/2011/03/01/appengine-vs-ec2-an-attempt-to-compare-apples-to-oranges/</wp:comment_author_url>
			<wp:comment_author_IP>74.208.180.7</wp:comment_author_IP>
			<wp:comment_date>2011-03-01 08:17:21</wp:comment_date>
			<wp:comment_date_gmt>2011-03-01 16:17:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] affect your running code &#8211; just your ability to publish new code. We&#8217;re doing continuous deployment on AppEngine, so this affects us more than [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1298996243]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298996243.7094";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>546</wp:comment_id>
			<wp:comment_author><![CDATA[Microsoft Azure Cloud &#8211; Top 20 Lessons Learned about MS’s PaaS &laquo; Rob Hirschfeld&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://robhirschfeld.com/2010/12/13/azure/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.220</wp:comment_author_IP>
			<wp:comment_date>2010-12-13 08:20:36</wp:comment_date>
			<wp:comment_date_gmt>2010-12-13 16:20:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] versions of the code operating against the same data so that you can roll upgrades (ala Timothy Fitz/Eric Ries) to reduce risk and without reducing performance.  You should expect your data schema [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1292257237]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1292257237.325";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>624</wp:comment_id>
			<wp:comment_author><![CDATA[Prerequisites for Continuous Deployment — Agile Web Development &amp; Operations]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.agileweboperations.com/prerequisites-for-continuous-deployment</wp:comment_author_url>
			<wp:comment_author_IP>50.16.247.194</wp:comment_author_IP>
			<wp:comment_date>2011-05-02 22:14:34</wp:comment_date>
			<wp:comment_date_gmt>2011-05-03 06:14:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] are countless success stories out there: Etsy, Heyo, IMVU &amp; Atlassian all do [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304403276.6554";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304403276]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>635</wp:comment_id>
			<wp:comment_author><![CDATA[Engenheiro de Software - Artigos, Tutoriais, Livros e Dicas Atuais sobre o mundo gerenciamento de Software!]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://rtiweb.net/engenheiro-software/2011/06/02/implantacao-continua-mais-facil-falar-do-que-fazer/</wp:comment_author_url>
			<wp:comment_author_IP>70.38.78.236</wp:comment_author_IP>
			<wp:comment_date>2011-06-02 06:22:44</wp:comment_date>
			<wp:comment_date_gmt>2011-06-02 14:22:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] não quer dizer que a implantação contínua não é possível. Muitas empresas como Etsy, Heyo , IMVU e Atlassian, realizam a implantação contínua e, alegam fazê-la de forma [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307026937.2698";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307024564.9611";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307026937]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>555</wp:comment_id>
			<wp:comment_author><![CDATA[Quora]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.quora.com/How-often-do-startups-deploy-code-into-production#ans192386</wp:comment_author_url>
			<wp:comment_author_IP>184.73.9.149</wp:comment_author_IP>
			<wp:comment_date>2010-12-27 14:38:03</wp:comment_date>
			<wp:comment_date_gmt>2010-12-27 22:38:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<strong>How often do startups deploy code into production?...</strong>

Not at all until they create the code, of course. A web startup may deploy code daily at first, or even more often. This pace often slows as development teams get bigger, manual testing gets larger, and the greater possible downside to a deployment mea...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>trackback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1293489484]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293489485.0263";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>656</wp:comment_id>
			<wp:comment_author><![CDATA[Lean startups and lean software development &laquo; engineering.adap.tv]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://engineering.adap.tv/2011/07/20/lean-startups-and-lean-software-development/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.94</wp:comment_author_IP>
			<wp:comment_date>2011-07-20 12:32:57</wp:comment_date>
			<wp:comment_date_gmt>2011-07-20 20:32:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous deployment. If you can do it, deploying your code every time there&#8217;s a small change eliminates much of the overhead required in coordination and testing that is incurred in traditional &#8220;batch deployment&#8221; processes. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1311193978]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311193979.3447";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>628</wp:comment_id>
			<wp:comment_author><![CDATA[JUnit Max Takes Test-Driven Development to the Next Level | Developer&#039;s Dilemma]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.johnnybigert.se/blog/2011/05/junit-max-takes-test-driven-development-to-the-next-level/</wp:comment_author_url>
			<wp:comment_author_IP>193.202.110.117</wp:comment_author_IP>
			<wp:comment_date>2011-05-12 05:04:43</wp:comment_date>
			<wp:comment_date_gmt>2011-05-12 13:04:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] to a source repository is probably not what you want. :) (I guess for deployment, doing it 50 times per day is cool [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1305205484]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305205485.5238";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>632</wp:comment_id>
			<wp:comment_author><![CDATA[Some helpful links to Continuous deployment &laquo; hop2croft&#039;s software development Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://hop2croft.wordpress.com/2011/05/28/some-helpful-links-to-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.135</wp:comment_author_IP>
			<wp:comment_date>2011-05-28 10:57:33</wp:comment_date>
			<wp:comment_date_gmt>2011-05-28 18:57:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment at IMVU: Doing the impossible fifty times a day. A awesome real use of continuous deployment. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1306610256.411";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1306609053.5305";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1306610256]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>549</wp:comment_id>
			<wp:comment_author><![CDATA[Microsoft Azure Cloud – Top 20 Lessons Learned about MS’s PaaS | ServerGround.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.serverground.net/2010/12/microsoft-azure-cloud-%e2%80%93-top-20-lessons-learned-about-ms%e2%80%99s-paas/</wp:comment_author_url>
			<wp:comment_author_IP>72.67.86.73</wp:comment_author_IP>
			<wp:comment_date>2010-12-16 16:02:19</wp:comment_date>
			<wp:comment_date_gmt>2010-12-17 00:02:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] versions of the code operating against the same data so that you can roll upgrades (ala Timothy Fitz/Eric Ries) to reduce risk and without reducing performance. You should expect your data schema to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1292544139]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1292544139.9999";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>522</wp:comment_id>
			<wp:comment_author><![CDATA[It Takes Time To Go Fast | Selenium Testing? Do Cross Browser Testing with Sauce Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://saucelabs.com/blog/index.php/2010/10/it-takes-time-to-go-fast/</wp:comment_author_url>
			<wp:comment_author_IP>67.23.23.135</wp:comment_author_IP>
			<wp:comment_date>2010-10-12 09:08:32</wp:comment_date>
			<wp:comment_date_gmt>2010-10-12 17:08:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] we&#8217;ve started to optimize for speed. As we strive to improve our process, it helps to see pioneers show the [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1286903313]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>646</wp:comment_id>
			<wp:comment_author><![CDATA[Development to production pipeline | Tom&#039;s Labs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.tomslabs.com/index.php/2011/06/development-to-production-pipeline/</wp:comment_author_url>
			<wp:comment_author_IP>89.30.126.54</wp:comment_author_IP>
			<wp:comment_date>2011-06-28 02:52:45</wp:comment_date>
			<wp:comment_date_gmt>2011-06-28 10:52:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] will take on a very qualitative attitude to their work&#8221;. What&#8217;s more, those who do it IMVU, Digg4 and Flickr for instance are very satisfied with the [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1309258365]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1309258366.0085";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>536</wp:comment_id>
			<wp:comment_author><![CDATA[When to Push Out New Product Features &laquo; 10,000 Startup Hours &#8211; David Cummings]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://davidcummings.org/2010/11/15/when-to-push-out-new-product-features/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.184</wp:comment_author_IP>
			<wp:comment_date>2010-11-15 18:58:26</wp:comment_date>
			<wp:comment_date_gmt>2010-11-16 02:58:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] deployment where every piece of code checked in goes straight to production if all the tests pass (see IMVU pushing out code 50 times a day). We don&#8217;t do continuous deployment but we do look to push code anywhere from daily to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1289876307]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>346</wp:comment_id>
			<wp:comment_author><![CDATA[Venkat]]></wp:comment_author>
			<wp:comment_author_email>venkatna@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.237.193.28</wp:comment_author_IP>
			<wp:comment_date>2009-11-23 21:41:57</wp:comment_date>
			<wp:comment_date_gmt>2009-11-24 05:41:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What happens to your performance (client side) when you deploy so often? You usually are not able to take advantage of client side caching of css and js? Or do you selectively deploy files that have changed? If so, how do you manage that?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>579</wp:comment_id>
			<wp:comment_author><![CDATA[In Praise of Continuous Deployment | fragile]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://fragile.org.uk/2011/02/in-praise-of-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>109.74.206.25</wp:comment_author_IP>
			<wp:comment_date>2011-02-13 12:48:52</wp:comment_date>
			<wp:comment_date_gmt>2011-02-13 20:48:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] trend analysis, taking inspiration from this paper . It’s no surprise to me that it came out of IMVU who have been practicing Continuous Deployment for a long [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297631365]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297631364.4711";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297630132.7609";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>637</wp:comment_id>
			<wp:comment_author><![CDATA[OCTO talks ! &raquo; DevOps ou le Lean appliqué aux activités IT du développement à la production]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.octo.com/devops-ou-le-lean-applique-aux-activites-it-du-developpement-a-la-production/</wp:comment_author_url>
			<wp:comment_author_IP>91.121.144.138</wp:comment_author_IP>
			<wp:comment_date>2011-06-10 06:31:08</wp:comment_date>
			<wp:comment_date_gmt>2011-06-10 14:31:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] des outils du Lean comme le Value Stream Mapping, placent la littérature Lean en bonne place dans leur bibliothèque, ou envisagent les problèmes DevOps avec les mots et les concepts du [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307716268]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1307716268.909";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>583</wp:comment_id>
			<wp:comment_author><![CDATA[Build. Test. Learn. Repeat. &laquo; It&#039;s Mutable]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://itsmutable.wordpress.com/2011/02/19/build-test-learn-repeat/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.61.93</wp:comment_author_IP>
			<wp:comment_date>2011-02-18 22:07:32</wp:comment_date>
			<wp:comment_date_gmt>2011-02-19 06:07:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] about customer needs, but also employs the principle in their software development practices. At 50 code deploys a day, IMVUs engineering team has achieved an enviable level of reliability in test coverage, and in [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1298095652]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1298095652.7038";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>618</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment &laquo; Michael Baylon&#039;s blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://michaelbaylon.wordpress.com/2011/04/26/continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.248.149</wp:comment_author_IP>
			<wp:comment_date>2011-04-26 00:06:34</wp:comment_date>
			<wp:comment_date_gmt>2011-04-26 08:06:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I&#8217;ve come across a couple of interesting articles about continuous deployment &#8211; see Continous deployment and Continuous Deployment at IMVU: Doing the impossible fifty times a day. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1303806406.6063";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1303805195.153";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1303806406]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>622</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment in 5 easy steps | Ed Roman Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanstartups.wpengine.com/continuous-deployment-in-5-easy-steps/</wp:comment_author_url>
			<wp:comment_author_IP>199.47.222.144</wp:comment_author_IP>
			<wp:comment_date>2011-05-01 23:03:15</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 07:03:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous deployment is a process whereby all code that is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new code to production as often as fifty times every day. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_rechecking</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304321022]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304321021.2757";s:7:"message";s:55:"Akismet cleared this comment during an automatic retry.";s:5:"event";s:10:"cron-retry";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304319795.6259";s:7:"message";s:92:"Akismet was unable to check this comment (response: ), will automatically retry again later.";s:5:"event";s:11:"check-error";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>623</wp:comment_id>
			<wp:comment_author><![CDATA[Why Continuous Deployment? | Ed Roman Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanstartups.wpengine.com/why-continuous-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>199.47.222.144</wp:comment_author_IP>
			<wp:comment_date>2011-05-01 23:05:43</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 07:05:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] weeks, or months. My previous startup, IMVU, has used this process to deploy new code as often as an average of fifty times a day. This has stirred up some controversy, with some claiming that this rapid release process [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304319944]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304319945.2996";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[When Delivering Measurable Business Value is not the key to success of a software project | CEOMAG]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ceomag.in/when-delivering-measurable-business-value-is-not-the-key-to-success-of-a-software-project/</wp:comment_author_url>
			<wp:comment_author_IP>72.34.38.191</wp:comment_author_IP>
			<wp:comment_date>2011-02-28 09:06:14</wp:comment_date>
			<wp:comment_date_gmt>2011-02-28 17:06:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] How agile can help: Not only will agile development is mandatory, agile deployment is also critical. Option of continuous deployment is also worth examining – here is a nice example. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1298912774]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1298912774.577";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>669</wp:comment_id>
			<wp:comment_author><![CDATA[Deployment of many Web Services - Admins Goodies]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://adminsgoodies.com/deployment-of-many-web-services/</wp:comment_author_url>
			<wp:comment_author_IP>64.90.55.54</wp:comment_author_IP>
			<wp:comment_date>2011-08-16 17:57:54</wp:comment_date>
			<wp:comment_date_gmt>2011-08-17 01:57:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] continuous deployment you (pushing to production frequently) which you can read a little bit about here. You might be able to get some ideas from [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>358</wp:comment_id>
			<wp:comment_author><![CDATA[Seth Eliot]]></wp:comment_author>
			<wp:comment_author_email>seliot@microsoft.com</wp:comment_author_email>
			<wp:comment_author_url>http://blogs.msdn.com/seliot/</wp:comment_author_url>
			<wp:comment_author_IP>131.107.0.71</wp:comment_author_IP>
			<wp:comment_date>2009-12-14 15:15:23</wp:comment_date>
			<wp:comment_date_gmt>2009-12-14 23:15:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Timothy, it's great how you take a critical quality step like Testing in Production (TiP) and make it a seamless and continuous part of your process.  I point to your excellent example in my own blog entry on successes (yours) and horror stories (some are mine) in Testing in Production:

http://blogs.msdn.com/seliot/archive/2009/12/14/feeling-tipsy-testing-in-production-success-and-horror-stories.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>359</wp:comment_id>
			<wp:comment_author><![CDATA[Automating Your Builds? Don&#8217;t Forget About Testing &laquo; MyArch]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://myarch.com/build-to-test</wp:comment_author_url>
			<wp:comment_author_IP>209.18.104.4</wp:comment_author_IP>
			<wp:comment_date>2009-12-19 17:55:37</wp:comment_date>
			<wp:comment_date_gmt>2009-12-20 01:55:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] some effort. Developing a comprehensive automated test suite could be a daunting tasks. But it is certainly possible and well worth [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>665</wp:comment_id>
			<wp:comment_author><![CDATA[Quantum of Deployment &laquo; Code as Craft]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://codeascraft.etsy.com/2010/05/20/quantum-of-deployment/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.107</wp:comment_author_IP>
			<wp:comment_date>2011-07-29 11:36:46</wp:comment_date>
			<wp:comment_date_gmt>2011-07-29 19:36:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Etsy, we&#8217;re doing what&#8217;s come to be called Continuous Deployment. However, what we&#8217;ve learned is that having a tool like Deployinator is useful for more than [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311968206.7638";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>366</wp:comment_id>
			<wp:comment_author><![CDATA[My take on Customer Development and the Lean Startup | Recess Mobile Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.recessmobile.com/blog/lean-startup/my-take-on-customer-development-and-the-lean-startup/</wp:comment_author_url>
			<wp:comment_author_IP>174.132.157.34</wp:comment_author_IP>
			<wp:comment_date>2010-01-09 05:30:36</wp:comment_date>
			<wp:comment_date_gmt>2010-01-09 13:30:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] runs hundreds of experiments a day. Ries’ IMVU pushed new releases fifty times a day. Flickr makes multiple daily changes. Google, the granddaddy of split testing, modifies even its [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>661</wp:comment_id>
			<wp:comment_author><![CDATA[CITCON Australia/New Zealand 2010 &#8211; Day 2 (Part 2) | The Shine Technologies Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://shinetechblog.wordpress.com/2010/06/30/citcon-australianew-zealand-2010-day-2-part-2/</wp:comment_author_url>
			<wp:comment_author_IP>216.151.210.16</wp:comment_author_IP>
			<wp:comment_date>2011-07-27 22:28:52</wp:comment_date>
			<wp:comment_date_gmt>2011-07-28 06:28:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] IMVU deploys to production fifty times a day. [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1311834532.7957";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>654</wp:comment_id>
			<wp:comment_author><![CDATA[Why I Quit My 6-Figure Job to Live in a (Former) Mental Hospital | Steven Peterson]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ste.vn/why-i-quit-my-6-figure-job/</wp:comment_author_url>
			<wp:comment_author_IP>50.17.182.183</wp:comment_author_IP>
			<wp:comment_date>2011-07-12 13:35:20</wp:comment_date>
			<wp:comment_date_gmt>2011-07-12 21:35:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] was before &#8220;lean startup&#8221; and &#8220;continuous deployment&#8221; were hot buzz-phrases, so I had no idea what I was getting into. Having worked in really [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1310506521]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310506521.8863";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>375</wp:comment_id>
			<wp:comment_author><![CDATA[Built For Speed: Turn Your Startup Into A Lean, Mean Iterating Machine &#8211; multimediaDev]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.multimediadev.ca/2010/01/13/built-for-speed-turn-your-startup-into-a-lean-mean-iterating-machine/</wp:comment_author_url>
			<wp:comment_author_IP>69.163.145.78</wp:comment_author_IP>
			<wp:comment_date>2010-01-13 15:00:47</wp:comment_date>
			<wp:comment_date_gmt>2010-01-13 23:00:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 6 deploys an hour,&#8221; writes Fitz on his blog. &#8220;Even at that pace we&#8217;re often batching multiple commits into a single test/push [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>376</wp:comment_id>
			<wp:comment_author><![CDATA[Built For Speed: Turn Your Startup Into A Lean, Mean Iterating Machine :Xero Wire]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://kezanari.com/xerowire/fresh-stuff/built-for-speed-turn-your-startup-into-a-lean-mean-iterating-machine</wp:comment_author_url>
			<wp:comment_author_IP>97.74.24.47</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 03:41:26</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 11:41:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 6 deploys an hour,&#8221; writes Fitz on his blog. &#8220;Even at that pace we&#8217;re often batching multiple commits into a single test/push [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>377</wp:comment_id>
			<wp:comment_author><![CDATA[The Difficulty of Changing to a Focus on Quality &laquo; caines.ca/blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://caines.ca/blog/programming/the-difficulty-of-changing-to-a-focus-on-quality/</wp:comment_author_url>
			<wp:comment_author_IP>74.205.121.151</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 04:11:33</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 12:11:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] level of quality.  And TDD has really proven itself to those that have made the transition:  IMVU and flickr, for instance, can deploy new code to their customers many times in a single day because [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>378</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment at IMVU &laquo; Lean Builds]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanbuilds.com/2010/01/14/continuous-deployment-at-imvu/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.94</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 10:28:01</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 18:28:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Tags: Continuous Deployment    If you haven&#8217;t seen it yet, Timothy Fritz&#8217;s post &#8220;Doing the impossible fifty times a day&#8221; on exactly how they are doing continuous deployment at IMVU is very [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>379</wp:comment_id>
			<wp:comment_author><![CDATA[Built For Speed: Turn Your Startup Into A Lean, Mean Iterating Machine | Update Technology News]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://technology.ekisfirsati.com/built-for-speed-turn-your-startup-into-a-lean-mean-iterating-machine.html</wp:comment_author_url>
			<wp:comment_author_IP>94.102.2.84</wp:comment_author_IP>
			<wp:comment_date>2010-01-18 01:02:46</wp:comment_date>
			<wp:comment_date_gmt>2010-01-18 09:02:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 6 deploys an hour,&#8221; writes Fitz on his blog. &#8220;Even at that pace we&#8217;re often batching multiple commits into a single test/push [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[James Governor&#39;s Monkchips &raquo; Lotus Puts the Labs to Work: On Innovation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.redmonk.com/jgovernor/2010/01/18/lotus-puts-the-labs-to-work-on-innovation/</wp:comment_author_url>
			<wp:comment_author_IP>69.55.239.28</wp:comment_author_IP>
			<wp:comment_date>2010-01-18 12:50:58</wp:comment_date>
			<wp:comment_date_gmt>2010-01-18 20:50:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] new hipster phrase for this stuff is Continuous Deployment. IBM is putting the labs to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>381</wp:comment_id>
			<wp:comment_author><![CDATA[Lotus Puts the Labs to Work: On Innovation]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.enterpriseirregulars.com/10923/lotus-puts-the-labs-to-work-on-innovation/</wp:comment_author_url>
			<wp:comment_author_IP>207.58.137.225</wp:comment_author_IP>
			<wp:comment_date>2010-01-18 14:17:50</wp:comment_date>
			<wp:comment_date_gmt>2010-01-18 22:17:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] new hipster phrase for this stuff is Continuous Deployment. IBM is putting the labs to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>382</wp:comment_id>
			<wp:comment_author><![CDATA[imvu credits]]></wp:comment_author>
			<wp:comment_author_email>exium@live.com</wp:comment_author_email>
			<wp:comment_author_url>http://imvuce.com/buy_imvu_credits</wp:comment_author_url>
			<wp:comment_author_IP>75.185.99.152</wp:comment_author_IP>
			<wp:comment_date>2010-01-23 04:19:31</wp:comment_date>
			<wp:comment_date_gmt>2010-01-23 12:19:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds interesting. Continuous deployment is something I like / dislike.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>443</wp:comment_id>
			<wp:comment_author><![CDATA[Doing agile the traditional way &laquo; Actively Lazy]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.activelylazy.co.uk/2010/05/26/doing-agile-the-traditional-way/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.54</wp:comment_author_IP>
			<wp:comment_date>2010-05-26 14:42:39</wp:comment_date>
			<wp:comment_date_gmt>2010-05-26 22:42:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] &#8220;we need an EDA&#8220;; &#8220;I know yours is a small change, but first you must solve some arbitrarily vast problem overnight&#8221;; &#8220;I&#8217;m a potential user of this app and I think it should be [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>463</wp:comment_id>
			<wp:comment_author><![CDATA[CITCON Australia/New Zealand 2010 - Day 2 (Part 2) | Shine Technologies Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.shinetech.com/?p=328</wp:comment_author_url>
			<wp:comment_author_IP>208.78.99.126</wp:comment_author_IP>
			<wp:comment_date>2010-06-30 01:03:31</wp:comment_date>
			<wp:comment_date_gmt>2010-06-30 09:03:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] IMVU deploys to production fifty times a day. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1277888614]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>433</wp:comment_id>
			<wp:comment_author><![CDATA[The Qualitative to Quantitative Workflow | Crunch Tools]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://crunchtools.com/the-qq-workflow/</wp:comment_author_url>
			<wp:comment_author_IP>75.127.72.38</wp:comment_author_IP>
			<wp:comment_date>2010-05-14 12:57:41</wp:comment_date>
			<wp:comment_date_gmt>2010-05-14 20:57:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] of application code, configuration, content. This can be taken as far as continuous deployment[2], but if you are doing any kind of software development in house, this is important to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>427</wp:comment_id>
			<wp:comment_author><![CDATA[QTB: thetrainline.com &#8211; &#8216;Scale at speed&#8217; at Mark Needham]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.markhneedham.com/blog/2010/04/29/qtb-thetrainline-com-scale-at-speed/</wp:comment_author_url>
			<wp:comment_author_IP>194.154.164.100</wp:comment_author_IP>
			<wp:comment_date>2010-04-29 15:53:23</wp:comment_date>
			<wp:comment_date_gmt>2010-04-29 23:53:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I guess the ultimate is to have continuous delivery as described by Timothy Fitz in his blog post. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>448</wp:comment_id>
			<wp:comment_author><![CDATA[Kuldeep Singh]]></wp:comment_author>
			<wp:comment_author_email>kuldeepsinghk@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>147.114.226.182</wp:comment_author_IP>
			<wp:comment_date>2010-06-02 19:26:39</wp:comment_date>
			<wp:comment_date_gmt>2010-06-03 03:26:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Am so glad that you shared this info , these things really help whole community as they demosntrate that right apporach and done honestly - Really Works]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1275535601]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>432</wp:comment_id>
			<wp:comment_author><![CDATA[Web 2.0 &#8211; Perpetual Beta &laquo; Maureenogrady347&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://maureenogrady347.wordpress.com/2010/04/25/web-2-0-perpetual-beta/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.209</wp:comment_author_IP>
			<wp:comment_date>2010-05-12 18:46:00</wp:comment_date>
			<wp:comment_date_gmt>2010-05-13 02:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Apparently, IMVU rolls out fifty deployments each and every day, and they’re doing so by the magic of Continuous Deployment which sounds similar to perpetual beta.Eric Ries, the co-founding and serving CTO of IMVU, states this in his blog, &#8220;Continuous Deployment at IMVU&#8220;. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>429</wp:comment_id>
			<wp:comment_author><![CDATA[When Delivering Measurable Business Value is not the key to success of a software project &laquo; Udayan Banerjee&#039;s Blog &#8211; From The Other Side]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://setandbma.wordpress.com/2010/05/04/when-delivering-measurable-business-value-is-not-the-key-to-success-of-a-software-project/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.255.36</wp:comment_author_IP>
			<wp:comment_date>2010-05-03 22:47:21</wp:comment_date>
			<wp:comment_date_gmt>2010-05-04 06:47:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is also critical. Option of continuous deployment is also worth examining – here is a nice example.    Leave a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>449</wp:comment_id>
			<wp:comment_author><![CDATA[DirkAholic]]></wp:comment_author>
			<wp:comment_author_email>dirk.pahl@web.de</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/DirkAholic</wp:comment_author_url>
			<wp:comment_author_IP>188.103.165.96</wp:comment_author_IP>
			<wp:comment_date>2010-06-03 03:16:22</wp:comment_date>
			<wp:comment_date_gmt>2010-06-03 11:16:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think only this one sentence "We’ve made a science out of debugging and fixing intermittently failing tests." would be worth another very interesting blog post. Would love to hear what you have done to ensure test reliability especially for the mentioned frontend tests ...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1275563782]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>878</wp:comment_id>
			<wp:comment_author><![CDATA[Referência para estudo &raquo; The Black Hole of Cygnus-x1]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://cygnus-x1.com.br/wp/2012/01/12/estudo-links/</wp:comment_author_url>
			<wp:comment_author_IP>76.73.96.10</wp:comment_author_IP>
			<wp:comment_date>2012-01-12 08:29:50</wp:comment_date>
			<wp:comment_date_gmt>2012-01-12 16:29:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Continuous Deployment http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty... [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>728</wp:comment_id>
			<wp:comment_author><![CDATA[OCTO talks ! &raquo; Minimum Viable Product]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.octo.com/minimum-viable-product/</wp:comment_author_url>
			<wp:comment_author_IP>91.121.144.138</wp:comment_author_IP>
			<wp:comment_date>2011-11-07 20:02:11</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 04:02:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Timothy Fitz, Continuous Deployment at IMVU: Doing the impossible fifty times a day, 10 février 2009, http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty... [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320724932.1378";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>704</wp:comment_id>
			<wp:comment_author><![CDATA[End to End Automation by Any Other Name | UrbanCode Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.urbancode.com/deploy/end-to-end-automation-by-any-other-name/</wp:comment_author_url>
			<wp:comment_author_IP>70.33.254.94</wp:comment_author_IP>
			<wp:comment_date>2011-10-14 14:16:37</wp:comment_date>
			<wp:comment_date_gmt>2011-10-14 22:16:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Companies like IMVU, Digg , and others do this as part of their standard [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1318630597.609";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>705</wp:comment_id>
			<wp:comment_author><![CDATA[Going Agile: Breaking through the release bottleneck | UrbanCode Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.urbancode.com/agile/going-agile-breaking-through-the-release-bottleneck/</wp:comment_author_url>
			<wp:comment_author_IP>70.33.254.94</wp:comment_author_IP>
			<wp:comment_date>2011-10-14 14:17:38</wp:comment_date>
			<wp:comment_date_gmt>2011-10-14 22:17:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] have taken this to the extreme. Consider IMVU&#8217;s Continuous Deployment effort, where a minimal change delivered to source control can arrive in production fifteen [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1318630658.5806";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>834</wp:comment_id>
			<wp:comment_author><![CDATA[Trying to keep it agile]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tryingtokeepitagile.com/?p=6</wp:comment_author_url>
			<wp:comment_author_IP>208.109.163.81</wp:comment_author_IP>
			<wp:comment_date>2011-12-18 11:52:51</wp:comment_date>
			<wp:comment_date_gmt>2011-12-18 19:52:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (CD), where changes are released several times a day, is popular among online game sites. IMVU for example, is a very strong champion of CD, and they use it to 50 times a [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1324237971.6077";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>953</wp:comment_id>
			<wp:comment_author><![CDATA[精实创业：高效、不浪费、对市场快速反应 - 爱范儿 · Beats of Bits - 发现创新价值的科技媒体]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.ifanr.com/71745</wp:comment_author_url>
			<wp:comment_author_IP>106.187.42.103</wp:comment_author_IP>
			<wp:comment_date>2012-02-05 17:03:20</wp:comment_date>
			<wp:comment_date_gmt>2012-02-06 01:03:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Eric 举例，一个创业团队需要至少一万美元，差不多一年时间创立一个全新的基于网络的产品，而一个“精实创业”的团队只需要几个星期或几个月，然后听取用户的反馈，实时改进，隔几分钟几个小时就发布新版本。他曾经带领的创业团队 IMVU 就曾经尝试过一天内改进产品 50 次。关于“精实创业”的核心，这张图表达得十分清晰： [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>954</wp:comment_id>
			<wp:comment_author><![CDATA[精实创业：高效、不浪费、对市场快速反应 &laquo; 清泉石上流]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://izhou.wordpress.com/2012/02/06/%e7%b2%be%e5%ae%9e%e5%88%9b%e4%b8%9a%ef%bc%9a%e9%ab%98%e6%95%88%e3%80%81%e4%b8%8d%e6%b5%aa%e8%b4%b9%e3%80%81%e5%af%b9%e5%b8%82%e5%9c%ba%e5%bf%ab%e9%80%9f%e5%8f%8d</wp:comment_author_url>
			<wp:comment_author_IP>72.232.7.105</wp:comment_author_IP>
			<wp:comment_date>2012-02-05 17:15:39</wp:comment_date>
			<wp:comment_date_gmt>2012-02-06 01:15:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Eric 举例，一个创业团队需要至少一万美元，差不多一年时间创立一个全新的基于网络的产品，而一个“精实创业”的团队只需要几个星期或几个月，然后听取用户的反馈，实时改进，隔几分钟几个小时就发布新版本。他曾经带领的创业团队 IMVU 就曾经尝试过一天内改进产品 50 次。关于“精实创业”的核心，这张图表达得十分清晰： [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328490940.3284";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1126</wp:comment_id>
			<wp:comment_author><![CDATA[How do you continuously deploy a large system consisting of several applications | PHP Developer Resource]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.dkphp.com/questions-2/integration/how-do-you-continuously-deploy-a-large-system-consisting-of-several-applications.html</wp:comment_author_url>
			<wp:comment_author_IP>69.194.225.92</wp:comment_author_IP>
			<wp:comment_date>2012-05-24 17:10:10</wp:comment_date>
			<wp:comment_date_gmt>2012-05-25 01:10:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 50 times a day at IMVU and blog by Ries [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1337908210.7001";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1710</wp:comment_id>
			<wp:comment_author><![CDATA[3 Crazy ideas to make your DevOps proposal seem reasonable | UrbanCode Blogs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blogs.urbancode.com/devops/3-crazy-ideas-to-make-your-devops-proposal-seem-reasonable/</wp:comment_author_url>
			<wp:comment_author_IP>70.33.254.94</wp:comment_author_IP>
			<wp:comment_date>2012-06-21 10:00:06</wp:comment_date>
			<wp:comment_date_gmt>2012-06-21 18:00:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] along the Timothy Fitz classic &#8220;Doing the impossible 50 times a day&#8221;  which outlines how his company deployed their core money-making application to production [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1340301606.5405";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2631</wp:comment_id>
			<wp:comment_author><![CDATA[The Perils of Continuous Deployment | Trying to keep it agile]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://tryingtokeepitagile.com/?p=7</wp:comment_author_url>
			<wp:comment_author_IP>50.63.190.107</wp:comment_author_IP>
			<wp:comment_date>2012-08-31 16:11:57</wp:comment_date>
			<wp:comment_date_gmt>2012-09-01 00:11:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (CD), where changes are released several times a day, is popular among online game sites. IMVU for example, is a very strong champion of CD, and they use it to 50 times a [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1346458318.1810700893402099609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Waterfall</title>
		<link>http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/waterfall/</link>
		<pubDate>Tue, 10 Feb 2009 10:56:07 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/waterfall.png</guid>
		<description></description>
		<content:encoded><![CDATA[Buildbot running our tests sharded across 36 machines.]]></content:encoded>
		<excerpt:encoded><![CDATA[Buildbot running our tests sharded across 36 machines.]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2009-02-10 02:56:07</wp:post_date>
		<wp:post_date_gmt>2009-02-10 10:56:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>waterfall</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>33</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/waterfall.png</wp:attachment_url>
	</item>
	<item>
		<title>In the Lair of the Cycle-Eaters</title>
		<link>http://timothyfitz.wordpress.com/2009/02/11/cycle-eaters/</link>
		<pubDate>Wed, 11 Feb 2009 10:37:51 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Programmers are losing serious amounts of productivity to hidden work every day.</h3>
It's time to stop that, but wait, I'm getting ahead of myself.

In a different day and age, x86 assembler genius Michael Abrash coined the phrase <a href="http://www.gamedev.net/reference/articles/article1698.asp"> Cycle Eater</a> to describe how x86 assembly would have non-obvious slow downs. For instance an addition that should've executed in 2 cycles actually ran for an extra 6 cycles spent fetching the operands from memory. You'd assume you had optimal assembly when you'd be missing that your assembly was actually kinda slow. Had you known about your cycle eater, you could've re-ordered prior operations to optimize for memory fetching, regaining the optimal 2-cycle performance.

The phrase Cycle Eater perfectly describes much higher level problems that plagues software development. Cycle Eaters are everywhere. Cycle Eaters can be as simple as requiring an engineer to manually switch marketing promotions on and off. They can also be as complex as the time, knowledge and effort it takes to set up a new local sandbox or build environment.
<h3>The fundamental problem with Cycle Eaters is that you don't realize how often they're wasting your time.</h3>
Ever joined a new company only to spend a week getting your build environment up and get a build that actually runs? That cost has to be paid for every engineer, for every machine and for every reformat, for every reinstall. Not only does that cost add up, but the drive to avoid setting up a build environment causes cascading cycle eaters. Countless times I've seen engineers sitting there waiting while tests run or a build compiles while their laptop goes unused for development. They're avoiding the pain and headache caused by the build setup Cycle Eater.

Luckily Cycle Eaters are surprisingly easy to deal with. When I started contributing features to <a href="http://db.tigsource.com">TIGdb</a>, the commit and deploy process was entirely manual. It was easy to screw up and annoying manual work. My first deploy was by hand. I then resolved to never do that again. I automated away some of the work. My second deploy was by running a couple commands, and then a shell script to do the final deploy. Again I automated away some of the work. My third deploy was SSHing into the server and running a shell script. My fourth deploy was running a local shell script. My fifth deploy automated database migrations.

My example incrementally removed the Cycle Eater, and that's critically important. I'm not advocating that you go out and try to start a mammoth project to automate away everything that's slowing you down. That would be a severe violation of the you-aren't-going-to-need-it principle. Process automation is an interesting thing, because once you automate away a Cycle Eater, you may find your behavior dramatically changing. If it's free to deploy, you'll deploy more often. If it's free to set up sandboxes, everyone in marketing gets one!
<h3>Here's where something magical happens.</h3>
When you fix a Cycle Eater, you don't just get back the time you were losing to the Cycle Eater. There are often unpredictable emergent properties from this type of waste reduction. When you have free sandboxes, marketing starts using the same development tools that engineering uses. Marketing suddenly doesn't need to pull an engineer out of flow to get promotional material deployed.

Client software build and release processes are often extremely manual, often involving "that one guy who builds the installer." Once fully automated, releases can be cut daily with minimal cost. Daily releases result in dramatically better feedback, such as specifically which revisions caused regressions or improvements. That knowledge feeds back into the process, causing progressively higher quality client releases.

All this from simple incremental automation.

This isn't just my theory. It's an IMVU culture of removing Cycle Eaters. It's allowed an extremely aggressive policy for new hires: on the day that they start working, they will commit a fix to the website. It'll probably be a typo, but it will be a real fix pushed into production and live for every customer. On their first day. All thanks to slaying Cycle Eaters.

So start today. The next time you notice that your time is being eaten up by one of those little things you wouldn't normally fix, think about it. Just think about the solution to the problem, and then implement a step in that direction. It doesn't have to be a big step and you don't have to know how to completely fix the Cycle Eater. Just make a single incremental improvement.

That first step will be the hardest. You'll have to force yourself to overcome your natural tendency to ignore the Cycle Eater, but the results... I can't just tell you what it's like to push a button and have a full deploy just happen. It's a rush. There is something fundamentally pleasing about automating away wasteful work; you must experience it for yourself.
<h3>Go, and slay your Cycle Eaters.</h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2009-02-11 02:37:51</wp:post_date>
		<wp:post_date_gmt>2009-02-11 10:37:51</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cycle-eaters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[TJIC from SmartFlix]]></wp:comment_author>
			<wp:comment_author_email>tjic_timothyfritz@smartflix.com</wp:comment_author_email>
			<wp:comment_author_url>https://smartflix.com/profiles/200001</wp:comment_author_url>
			<wp:comment_author_IP>65.78.1.161</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 07:06:41</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 15:06:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is an excellent essay, but the key bit which should be in H1 font is the par that starts "Here’s where something magical happens".

Incremental improvements result in incremental benefits. ... up to a point.  Past a certain point, you don't get a mere evolution, you get a revolution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Anders S]]></wp:comment_author>
			<wp:comment_author_email>anders@f12.no</wp:comment_author_email>
			<wp:comment_author_url>http://blog.f12.no</wp:comment_author_url>
			<wp:comment_author_IP>146.72.249.253</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 07:19:26</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 15:19:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent post. These wasters are always under estimated, and especially the psychological side of it. If something is easy to do people will do it more, and that is usually a good thing when it comes to stuff like this. :)

One that I have been trying to elimintate is the usual manual routines surrounding databases. You seem to have been succsessful in removing them, but sadly infrastructure and company policies often block removal. See http://blog.f12.no/wp/2009/01/03/agile-databases/ for some of the stuff I've been trying to do with databases.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>91</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse Andrews]]></wp:comment_author>
			<wp:comment_author_email>anotherjesse@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://overstimulate.com</wp:comment_author_url>
			<wp:comment_author_IP>71.134.234.5</wp:comment_author_IP>
			<wp:comment_date>2009-02-11 13:22:34</wp:comment_date>
			<wp:comment_date_gmt>2009-02-11 21:22:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ok, I'm convinced.

I've been using capistrano for years, and since using git I've made a practice that any push to master is always follow that by cap deploy.  I should kill the manual deploy.  Hopefully someone else has done this before and I don't have to write my own code to do this (deploy vs. deploy:migrations)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Top Posts &laquo; WordPress.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://botd.wordpress.com/2009/02/12/top-posts-1021/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.244.28</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 16:04:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 00:04:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...]  In the Lair of the Cycle-Eaters Programmers are losing serious amounts of productivity to hidden work every day. It&#8217;s time to stop that, but [...] [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[Nivi]]></wp:comment_author>
			<wp:comment_author_email>nivi@alum.mit.edu</wp:comment_author_email>
			<wp:comment_author_url>http://venturehacks.com</wp:comment_author_url>
			<wp:comment_author_IP>24.130.32.130</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 19:29:52</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 03:29:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Waste begets waste. Taiichi Ohno calls it secondary waste. The waste of setting up a sandbox, yields secondary waste for marketers, who must ask engineers for help when they want to make changes.

What is the economincally optimal way to eliminate these wastes? In real-time, a little-bit-at-a-time, as you suggest? Prioiritizing opportunities for continuous improvement at weekly retrospectives? How did you think about this?

Thanks for a great new blog.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[Worthy of Praise - Push cx]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://push.cx/2009/worthy-of-praise</wp:comment_author_url>
			<wp:comment_author_IP>208.113.216.190</wp:comment_author_IP>
			<wp:comment_date>2009-02-22 08:30:43</wp:comment_date>
			<wp:comment_date_gmt>2009-02-22 16:30:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] enjoyed Timothy Fitz&#8217;s new blog, he&#8217;s sold me on Continuous Deployment, named the benefits automation I never put my finger on, and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>277</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Development Mode &laquo; Dave Q]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://daveq.wordpress.com/2009/04/01/continuous-development-mode/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.227</wp:comment_author_IP>
			<wp:comment_date>2009-03-31 17:59:53</wp:comment_date>
			<wp:comment_date_gmt>2009-04-01 01:59:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>305</wp:comment_id>
			<wp:comment_author><![CDATA[Kris G]]></wp:comment_author>
			<wp:comment_author_email>gloverke@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.170.11.48</wp:comment_author_IP>
			<wp:comment_date>2009-06-05 06:42:08</wp:comment_date>
			<wp:comment_date_gmt>2009-06-05 14:42:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting post.  Maybe you could do a post on your experience automating db migration.  That's something I would be very interested in.  Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>576</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment in 5 easy steps &#8211; O&#8217;Reilly Radar &laquo; LJR Enterprises]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ljrenterprises.wordpress.com/2011/02/12/continuous-deployment-in-5-easy-steps-oreilly-radar/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.247.111</wp:comment_author_IP>
			<wp:comment_date>2011-02-12 11:13:19</wp:comment_date>
			<wp:comment_date_gmt>2011-02-12 19:13:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1297538001]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1297538001.9076";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>487</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Ries: Continuous deployment in 5 easy steps &laquo; MD Informatics Lab]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.mdinformaticslab.com/?p=696</wp:comment_author_url>
			<wp:comment_author_IP>74.208.16.46</wp:comment_author_IP>
			<wp:comment_date>2010-08-16 22:04:18</wp:comment_date>
			<wp:comment_date_gmt>2010-08-17 06:04:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1282025060]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>621</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous deployment in 5 easy steps | Ed Roman Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanstartups.wpengine.com/continuous-deployment-in-5-easy-steps/</wp:comment_author_url>
			<wp:comment_author_IP>199.47.222.144</wp:comment_author_IP>
			<wp:comment_date>2011-05-01 22:22:52</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 06:22:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is written for an application is immediately deployed into production. The result is a dramatic lowering of cycle time and freeing up of individual initiative. It has enabled companies I’ve worked with to deploy new [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304317374]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304317374.7091";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Why HTTP?</title>
		<link>http://timothyfitz.wordpress.com/2009/02/12/why-http/</link>
		<pubDate>Thu, 12 Feb 2009 10:20:25 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[Why HTTP?

The world doesn't need another arbitrary binary protocol. Just use HTTP. Your life will be simpler. Originally this came up when scaling a gaggle of MySQL machines. I would have killed for a reliable proxy. It's with this in mind that I've come up with my list of things that HTTP has that an arbitrary protocol will have to rebuild. Anytime you choose to use a service based on a non-HTTP protocol, look over this list and think carefully about what you're giving up.

1. Servers in any language.
2. Clients in any language.

These two are obvious. Moving right along.

3. Proxies

There are rock solid drop-in software solutions for proxying traffic from one machine to another. These proxies can do all types of request or response rewriting.

4. Load balancers

Need to scale past one machine? Need higher reliability? Drop a load balancer in front of multiple machines and you have a transparent barrier around the complexity of scaling up a service.

5. Debugging tools

There are no problems that have not yet been encountered. In fact, there are probably tools for diagnosing every malady you will ever encounter.

6. Web browsers

You already have a client, you're using it right now. You can use it to poke at APIs.

7. People

Everyone knows HTTP. Quite a few people know more about it than you ever will. You can always reach out for help, or get contractors to solve problems.

8. Guaranteed web access

Corporate proxies and weird ISPs cause all kinds of havoc for things that aren't HTTP. Being HTTP means you sidestep those problems.

9. Extensive hardware

If you're high traffic or need extremely high uptime, you're going to outgrow most software solutions. When you step up to the big time, hardware vendors will be there to support you.

10. Known scalability paths

Not only are there software solutions to allow easy migrations to more scalable architectures, but there are also easy patterns for designing a backend to scale up servicing HTTP's stateless request-responses.

11. Prior knowledge

You already know HTTP. Your coworkers already know HTTP. You can start working on the harder problems at hand.

12. Extensibility

Between HTTP verbs and headers you have quite a bit of freedom to extend your original schemes. Need an extra piece of data? Add a header. Have pieces of information but want to be able to remove them? Use HTTP DELETE. Run into a really hairy problem that really wants a piece of it to be solved in a different protocol? Use HTTP protocol switching.

13. URLs

Using HTTP allows you to use a standard way of referencing resources. Parsers already exist for every language and their semantics are well understood.

14. Security

HTTPS gives you baked in easy to use security. It has its limitations, but if you're really paranoid you can always use SSH and a SOCKS proxy. Once again, HTTP has your back. (Forgot to include this, thanks Daren Thomas for pointing it out!)

In the end the rules are simple. Is it possible to do over HTTP? Then do it over HTTP.

I'm not exactly defending an unpopular position, but there are still surprising transgressions of this rule. XMPP being the most obvious one. It's quite a bit more complex than HTTP and is missing most of the above qualities. It's usually cited as an example of a protocol that solves a problem http can't: asynchronous bidirectional messaging; allowing the server and the client to send messages with minimal lag. The truth is HTTP can do this just fine, with long-polling and HTTP keep-alive you can keep a persistent bidirectional connection open.

There are an ever slimming number of commonly used protocols that aren't http: instant messaging, e-mail, irc and ftp come to mind.

Move a service to HTTP, and it becomes a team <a href="http://timothyfitz.wordpress.com/2009/02/09/what-webhooks-are-and-why-you-should-care/">player</a> in our ecosystem. Let's revolutionize the last of our dinosaur protocols and move on.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2009-02-12 02:20:25</wp:post_date>
		<wp:post_date_gmt>2009-02-12 10:20:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-http</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[Simon Willison]]></wp:comment_author>
			<wp:comment_author_email>simon@simonwillison.net</wp:comment_author_email>
			<wp:comment_author_url>http://simonwillison.net/</wp:comment_author_url>
			<wp:comment_author_IP>80.254.146.68</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 10:23:37</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 18:23:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[With this in mind, have you thought about re-implementing your memcache protocol speaking WebHooks forwarder to talk HTTP instead? I've been thinking about this for a couple of days - it seems like having your regular web server to an HTTP POST to a forwarding service with the eventual destination URL as a query string paramater would be a really nice way to scalably implement WebHooks. The forwarder could return OK straight away (freeing up the web server to get back to what it was doing) and then send the actual POST request in its own time, maybe after a spell in a message queue somewhere.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[David]]></wp:comment_author>
			<wp:comment_author_email>uzziel@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://sweaterproject.org</wp:comment_author_url>
			<wp:comment_author_IP>68.203.162.234</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:00:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:00:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent article, but I take exception to the first sentence in #5: "There are no problems that have not yet been encountered."

You cannot say that for certain.  It's impossible to prove that ever possible problem has already been uncovered.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[Ryland]]></wp:comment_author>
			<wp:comment_author_email>ryland@says-it.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.says-it.com/</wp:comment_author_url>
			<wp:comment_author_IP>70.116.11.67</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:17:47</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:17:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["It’s impossible to prove that ever possible problem has already been uncovered."

HTTP has been around since 1991 or before, so the chances of a non-trivial problem being discovered at this point are so small they are effectively non-existent. If a major problem is discovered, it's not going to be with the protocol itself, but rather with a particular implementation.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>99</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:23:05</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:23:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, there is the HTTP ARMAGEDDON verb, which is troubling in several ways, the least of which is that ARMAGEDDON is not a verb.

Thankfully, like PUT and DELETE, most servers do not implement it; It has most of the same security concerns as they do.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[Scott]]></wp:comment_author>
			<wp:comment_author_email>scott@sshconnection.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.219.7.74</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:42:43</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:42:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Thankfully, like PUT and DELETE, most servers do not implement it"

Thankfully, most servers DO implement them, or at least accept them.  Unfortunately, browsers do not accept them in HTML and only let you use them via XHR requests.  This can/will drive you crazy once you start really using/developing REST apis.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[heinz]]></wp:comment_author>
			<wp:comment_author_email>kartoffelheinz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.211.160.227</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:49:18</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:49:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[dont forget the http overhead]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[Dave]]></wp:comment_author>
			<wp:comment_author_email>davedx@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dave78.com</wp:comment_author_url>
			<wp:comment_author_IP>80.6.91.225</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 06:55:58</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 14:55:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Silverlight hates PUT and DELETE too, as we discovered when trying to use it with a REST API. :(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[Lol Lolovici]]></wp:comment_author>
			<wp:comment_author_email>lol@lol.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.80.50.75</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 07:02:25</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 15:02:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Messengers and IRC cand be built over http with no problems. Probably email too although the same arguments you give for using http (like well established software base and such) goes for email even moreso.

But don't forget one of those "dinosaur" protocols that HTTP can never ever replace: bittorrent. The other one would be FTP, a true dinosaur, but a well adjusted one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[Daren Thomas]]></wp:comment_author>
			<wp:comment_author_email>dthomas.ch@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.190.8.8</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 07:16:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 15:16:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, just a small tip to make your excellent post even better: Please add links for stuff like "HTTP protocol switching", "long-polling" and "HTTP keep-alive". I'm sure I could google this stuff, but having the links would mean that they would already be open in tabs...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[Daren Thomas]]></wp:comment_author>
			<wp:comment_author_email>dthomas.ch@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>91.190.8.8</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 07:17:31</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 15:17:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, and you might have forgotten to mention: Securing your connection (https) is already solved multiple times - something you would have to redo with another protocol.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>107</wp:comment_id>
			<wp:comment_author><![CDATA[Sho]]></wp:comment_author>
			<wp:comment_author_email>sho.fukamachi@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.45.29.63</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 07:22:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 15:22:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["don’t forget one of those “dinosaur” protocols that HTTP can never ever replace: bittorrent"

BitTorrent could easily be implemented on top of HTTP! Why on earth not? I can't think of any reasons at all.

"The other one would be FTP"

The only thing stopping FTP over HTTP is a commonly accepted API. Even in its absence, HTTP file transfers must outweight "file transfer protocol" file transfers by many orders of magnitude. FTP is dying, as far as I can see, and a commonly accepted API for directory navigation/listing in web apps will be the final nail in the coffin.

You're thinking too far down, both those things are great examples of what should be HTTP. I actually struggle to think of anything that can't be done by HTTP that isn't realtime streaming video/audio or game networking or something, anything which is UDP basically.

Great article and as you can see, I agree 100% : )]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[larry]]></wp:comment_author>
			<wp:comment_author_email>ll@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.164.16.227</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 07:58:19</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 15:58:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article!
Simplicity and text-based are important features too.
Client and server can be written in a few lines of code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>109</wp:comment_id>
			<wp:comment_author><![CDATA[Joachim Schipper]]></wp:comment_author>
			<wp:comment_author_email>joachim@joachimschipper.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.joachimschipper.nl</wp:comment_author_url>
			<wp:comment_author_IP>131.211.24.28</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:04:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:04:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I can see your point, but I was wondering if you could elaborate a bit on stateful protocols. REST or some equivalent is of course very nice, but I'm not convinced it's *always* the best answer.

To use your example, a good RDBMS has a lot of features that require both server- and client-side state, starting with transactions (of course, if you can get by with a networked hash table, that's fine; but databases can be, and are, used for more than that.) "Start transaction, retrieve data, do something, retrieve more data depending on the results, end transaction" can be very sensible if you need to make sure that the results of the queries are consistent and cannot reasonably do "something" in the database, e.g. because it involves heavy processing or access to a network service.

Obviously, SQL is better-supported and better-known than any homegrown scheme, but let's leave that aside for now (I'm assuming you are mostly talking about new protocols, not established ones like SQL.) Even then, handling something like this over HTTP is not necessarily a good idea: it adds overhead to a performance-sensitive protocol (quite a lot if we are talking about many small queries) and anything that touches the protocol will need to be intimately aware of the details. Thus, configuring or even writing a proxy is difficult (if you want to do anything interesting), and a load balancer is very complex - although not nearly as complex as getting sufficiently-synchronized replication working in the first place. Also, there is hardly a "known scaling path": sharding works, but can be extremely painful and essentially requires treating your database as a networked hash table, which brings us back to square one.

Maybe I'm missing something, but for applications like the above - stateful, performance-sensitive, complex - I'm not seeing how HTTP is obviously better than a binary protocol. Of course it can be made to work - but SQL is actually fairly elegant, and I'm having a hard time thinking of an equivalent HTTP implementation that doesn't have a lot more warts (e.g. breaking the reasonable assumption that HTTP is (nearly-)stateless, breaking if used with standard proxies, etc.) And it will almost certainly be restricted to internal use, so a couple of (or even one) good client (library) will suffice.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[George Moschovitis]]></wp:comment_author>
			<wp:comment_author_email>george.moschovitis@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gmosx.com</wp:comment_author_url>
			<wp:comment_author_IP>195.200.193.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:15:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:15:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article indeed, I came to the same conclusion some time ago, thanks for putting the gist of it into words!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher Cashell]]></wp:comment_author>
			<wp:comment_author_email>topher-blogcomment@zyp.org</wp:comment_author_email>
			<wp:comment_author_url>http://topher.livejournal.com</wp:comment_author_url>
			<wp:comment_author_IP>72.14.176.221</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:48:32</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:48:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm gonna have to disagree with you here.

If you need to do something very similar to what HTTP does, then sure, HTTP is a fine protocol.

However, there are a *lot* of cases out there where HTTP would be a horrible choice.  Every application is different.  Use what's appropriate.  Trying to force something like HTTP into every situation is going to cause *way* more problems that it will solve.

Also, note, binary protocols are typically used where performance is a very high priority, because it's faster and more efficient.  Just one example (there are many) of where HTTP isn't the right solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[Erik Frey]]></wp:comment_author>
			<wp:comment_author_email>eriksjunk@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://fawx.com/</wp:comment_author_url>
			<wp:comment_author_IP>195.24.233.122</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:52:52</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:52:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There's one aspect you're ignoring: tools, accessibility, and the amount of time it takes to get going from a service definition to something that runs.

Where I work, we started writing some C++ services that talked HTTP over a cgi gateway.  HTTP was really only half a protocol - it provided a way to reach a destination point but the actual structure of the messages was still up to us, so we'd just inherited a bunch of cruft/overhead (that took considerable debugging - cgi is a pita) that served as little more than a wrapper.

To this day, I don't know of a good interface from C++ code to a robust http server.  And I don't have time to write one     :)

We ended up moving to <a href="http://incubator.apache.org/thrift/" rel="nofollow">thrift</a>, where you write a simple service definition, compile it, and you instantly have skeleton code in any language you want.  You just implement the interface, then you're up and running a minute later.  We've never looked back since.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[Timothy]]></wp:comment_author>
			<wp:comment_author_email>tmarshall@duzodesign.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.duzodesign.com</wp:comment_author_url>
			<wp:comment_author_IP>64.207.109.1</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 08:57:58</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 16:57:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Some very good points]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[Travis Leleu]]></wp:comment_author>
			<wp:comment_author_email>leleu@industrialinterface.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.216.215.50</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 09:26:57</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 17:26:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I love the POV -- don't reinvent the wheel, especially WRT protocols.

However, I have to ask this (some quick Googling didn't show up any charts): what kind of overhead does http require, compared to something a bit simpler like FTP?  That is, for a very specific application (e.g. FTP), what % of the packets are being consumed by the protocol as opposed to the data, relative to other protocols?  (I would be very much interested to know this, actually...)

Also, it seems that for something like chat, http might not be the best for real-time communications, as it is stateless.  Anyone with more of a background in protocol details care to address either of these points?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>117</wp:comment_id>
			<wp:comment_author><![CDATA[Chuck]]></wp:comment_author>
			<wp:comment_author_email>chuck@schleutker.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>134.68.178.205</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 09:27:13</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 17:27:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Look I'm all for HTTP, but I mean how much longer is really gonna take until we can start scaling to something else besides a web-browser. If anything the browser should stop scaling for the web and start scaling to our desktop as a virtual machine. . .something this huge would finally bridge the OS divide and create a broader platform for communicating data, text, information, video, audio, code, projects, ideas and who we share our time with and how.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>122</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.117.184.77</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 10:28:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 18:28:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Simon Willison: (Sorry for the delay, Wordpress.com's spam system is a little aggressive) Yes. yes. yes. The system really should be "post to /webhook/new" with a JSON blob of url, retry semantics, level of service, etc. I originally chose memcache because it was kinda nifty, and all the cool kids were doing it (Starling). Your semantics / timing are exactly what I imagine.

Originally Jeff Lindsay and I were talking about this idea (webhook post'er) as a public web service. We realized immediately the lag out to a 3rd party and the inherent unreliability meant the service wasn't much better than directly posting to webhooks. Which was when we coined the phrase Service-as-a-Software. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>120</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.117.184.77</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 10:02:45</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 18:02:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Joachim Schipper: Take a look at NYTimes' opensource HTTP -&gt; MySQL proxy/loadb alancer. It's a great example of how SQL can be mapped to a stateless request/response architecture: http://code.nytimes.com/projects/dbslayer.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>121</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>173.117.184.77</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 10:06:25</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 18:06:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Travis Leleu: For modern hardware and connections, FTP vs HTTP isn't about protocol overhead in bytes at all. They're both very cheap compared to the data blobs you'll be sending. If there's any difference at all, it would be in round trips (lag). An HTTP standard could have fewer (since it could be designed for modern high speed connections) and would thus outperform FTP in benchmarks...   but in the end you wouldn't notice. You're probably transferring 100s of kibibytes or more, at which point the protocol overhead is moot.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[tim]]></wp:comment_author>
			<wp:comment_author_email>tim@tshea.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>209.98.111.181</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:16:09</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:16:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["In the end the rules are simple. Is it possible to do over HTTP? Then do it over HTTP."

That is a horrible reason to do anything.  Just because its possible doesn't mean that it fits the application.  I am curious what types of applications you build.  Personally I build systems that handles millions of transactions - I can't imagine* the overhead tunneling it through http would add.  Its just not an efficient protocol.  Heck its even not that great as a protocol between a browser and a web server.  Since its original conception we've been building tools and processes to deal with HTTP's limitations - why on earth would we want to continue down that path?

*(actually I can imagine it, I can even run numbers showing why its an incredibly silly idea)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[biker dude]]></wp:comment_author>
			<wp:comment_author_email>biker@star-roadliner.com</wp:comment_author_email>
			<wp:comment_author_url>http://star-roadliner.com</wp:comment_author_url>
			<wp:comment_author_IP>213.208.107.6</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:38:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:38:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[sounds like a good Idea, and you dont implement it fully, just parts you want...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[Donovan Preston]]></wp:comment_author>
			<wp:comment_author_email>dsposx@mac.com</wp:comment_author_email>
			<wp:comment_author_url>http://ulaluma.com/pyx</wp:comment_author_url>
			<wp:comment_author_IP>38.102.129.180</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:46:00</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:46:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Simon Willison: There's even an HTTP response code for doing exactly that type of thing: 202 Accepted. It indicates that the server accepted the request but isn't yet done processing it. The client would call the service, passing the callback url, the service would reply immediately with 202 Accepted, and call the callback later when the request was completed.

Anyone that knows me knows that I'm all for doing absolutely everything with HTTP :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy Bowers]]></wp:comment_author>
			<wp:comment_author_email>jerf@jerf.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.jerf.org/iri/</wp:comment_author_url>
			<wp:comment_author_IP>71.238.166.33</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 19:04:30</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 03:04:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The XMPP example is lame, and your very article explains why it shouldn't be over HTTP.

Servers and clients in any language: No. The challenges of implementing an XMPP server are not located in the protocol connection, they are located in the XMPP standard, which does not trivially map onto HTTP by any stretch of the imagination. 

XMPP actually has an HTTP binding, and while it does now have clients in many languages, it took a lot of work to get there, because stock HTTP client libraries couldn't deal with the degree to which you have to torture HTTP to get instant messaging (not just XMPP, instant messaging in general) there.

Proxies: Instant messaging is highly stateful, intrinsically. Sending the presence state and avatar of every person on your roster for every request would be obscenely large. (Don't forget, there can be hundreds of such entries.) Proxies are worthless because streams are instantly stale, so there's no caching advantage, and load balancing is worthless because of the inherent statefulness.

Debugging tools: Optimized for requests that actually end. For endless requests, how is this any better than a packet dump?

Web browsers: There is no feasible way to render an instant message stream into a web page. Yes, you could build an AJAX app that deals with it, but that's not the advantage you're getting at.

HTTP knowledge: The size of an instant message standard of any kind with any sort of feature-fullness is comparable to the size of HTTP, and the working subset of an IM implementation is much larger than a working subset of HTTP. No gain here.

Known scalability paths: All of which involve taking advantage of statelessness, which is not possible with IM.

Extensibility: Not an advantage unique to HTTP. Actually, what protocol isn't extensible nowadays? 

URLs: A useless reference to an instantly stale stream. Username + server is far more effective in the IM context.

Security: Not that helpful since TLS/SSL connections are also available in libraries.

The way you get XMPP running over HTTP is with BOSH (a term you can Google), which is a gigantic cheat that violates numerous aspects of good HTTP design, but does work. 

I know both XMPP and HTTP very well, and the idea that XMPP should have been designed on an HTTP base is just absurd and sullies what is otherwise a strong post. You cite a very, very small part of creating an IM connection, but miss the larger issues involved in running an XMPP service. By your own criteria of when to use HTTP, since none of the advantages of HTTP actually help IM and many get in the way and require gross hacks, you should rewrite your post to agree that IM is the canonical case of when not to use HTTP, because it's all cost and no gain.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 11:58:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 19:58:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Donovan Preston: When I first met you in person at PyCon '05 that was my exact thought. "Somebody else that feels for HTTP the way I do!"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[Bob]]></wp:comment_author>
			<wp:comment_author_email>nospam@mailinator.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.72.226.177</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 14:08:29</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 22:08:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The reason firewalls were invented was to allow people control over what happens on their network.

The reason that HTTP is wonderful is that it allows applications to do whatever the author wants, regardless of the network owner's wishes.

I can clearly see why this is a wonderful state of affairs, and anyone who can't has simply failed to realise that corporations exist for the purpose of giving us free network bandwidth.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Maunder]]></wp:comment_author>
			<wp:comment_author_email>mmaunder@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://markmaunder.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.165.38.102</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 14:12:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 22:12:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[...because HTTP doesn't do push without holding open connections. Other than that you make a good point.

Mark.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>131</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 14:23:55</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 22:23:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mark Maunder: I didn't articulate it well enough, but that's actually a problem. The vast majority of the internet is behind a NAT, firewall or broken device and simply can't accept inbound connections of any kind. The only solution is to make who starts the connection and who actually has to send the message completely separate issues; which long polling solves.

http://cometdaily.com/2007/11/15/the-long-polling-technique/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>132</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Maunder]]></wp:comment_author>
			<wp:comment_author_email>mmaunder@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://markmaunder.com/</wp:comment_author_url>
			<wp:comment_author_IP>75.165.38.102</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 14:42:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 22:42:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Timothy: Exactly. I've written my own proprietary long polling server to deal with exactly this issue since Cometd isn't ready for prime-time yet. We use it for our live traffic feed product that pushes events to your browser as people arrive on your website: http://live.feedjit.com/live/feedjit.com/  [Sorry about the plug - but I guess it's relevant]. 

It used to be that servers couldn't handle more than a few thousand connections, but since epoll (and equivalents) came about it's fairly trivial to write an HTTP server that can handle tens of thousands of long-polling connections with zero cpu load. We handle well over 10k concurrent connections constantly with a single thread.

The problem is that epoll-style servers aren't as ubiquitous as I'd like. So for example even though you have nginx or lighttpd or a proprietary epoll-style server that can handle tons of connections without killing the box, the software you mention that is between clients and servers like proxies don't like holding connections open because they're still design using the on-thread-per-connection model. 

But we'll get there I think.

Mark.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>133</wp:comment_id>
			<wp:comment_author><![CDATA[againseminoma]]></wp:comment_author>
			<wp:comment_author_email>feuertod@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://seminoma.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>24.192.133.186</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 15:26:11</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 23:26:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Right on about HTTP.

Chew on this: years and years after DNS is stable, <a href="http://blog.wired.com/27bstroke6/2008/07/details-of-dns.html" rel="nofollow">Kaminsky finds a flaw with DNS that gives a backdoor to route legit users elsewhere.</a>

If we go and create new protocols, new layers, it will take years to make such safe and stable.  

If there's a pressing need, I would support it.  I'm unware of such need.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6397300</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>134</wp:comment_id>
			<wp:comment_author><![CDATA[againseminoma]]></wp:comment_author>
			<wp:comment_author_email>feuertod@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://seminoma.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>24.192.133.186</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 15:27:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 23:27:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Chuck - we're already scaling to something something else - RIA, and currently Adobe Flex is the winner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6397300</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
			<wp:comment_author_email>andrewpunch@bigfoot.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>218.185.70.166</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 15:42:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 23:42:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HTTP is not stateful. In protocols where state is important HTTP would be a failure. (Think the NFS "stateless" debacle)

In addition HTTP is not great where realtime is required (e.g. VOIP)

-Andrew]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>136</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher Cashell]]></wp:comment_author>
			<wp:comment_author_email>topher-blogcomment@zyp.org</wp:comment_author_email>
			<wp:comment_author_url>http://topher.livejournal.com</wp:comment_author_url>
			<wp:comment_author_IP>72.14.176.221</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 15:57:52</wp:comment_date>
			<wp:comment_date_gmt>2009-02-12 23:57:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[againseminoma:  I don't think your example works nearly as well as you want it to.  First of all, when it comes to security, there are a lot more implementation problems than there are protocol problems.  Sure, you've illustrated *1* security problem with the DNS protocol.  But, how many security problems can you find across all of the implementations of HTTP handling programs?  Thousands?

Also, DNS is an excellent example of a protocol that would be absolutely and completely *horrible* done via HTTP.  Having DNS run over HTTP would literally slow down the Internet.  Every single web page would take longer to load.

HTTP has been a very good protocol, but trying to shoe-horn everything into it is a terrible idea.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[y3]]></wp:comment_author>
			<wp:comment_author_email>admin@ht83.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.y3games.net</wp:comment_author_url>
			<wp:comment_author_IP>118.71.24.37</wp:comment_author_IP>
			<wp:comment_date>2009-02-12 19:23:14</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 03:23:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If we go and create new protocols, new layers, it will take years to make such safe and stable.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[natasha9]]></wp:comment_author>
			<wp:comment_author_email>kimnat@hotmail.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>90.193.56.90</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 13:09:44</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 21:09:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[you write a lot .]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6829284</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[zrmbilisim katkıları ile 2009 seo yarışması]]></wp:comment_author>
			<wp:comment_author_email>sallasbe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://zrmbilisimkatkilariileseoyarismasi.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>88.249.21.172</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 00:30:42</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 08:30:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If we go and create new protocols, new layers, it will take years to make such safe and stable. Thank’s]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[actionflickchick]]></wp:comment_author>
			<wp:comment_author_email>chick@actionflickchick.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.143.161.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 02:10:36</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 10:10:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We were so happy using http. We understood it! So of course people start inflicting all this other junk on us.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6425809</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[againseminoma]]></wp:comment_author>
			<wp:comment_author_email>feuertod@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://seminoma.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>24.192.133.186</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 02:44:17</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 10:44:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Christopher: In response to your comment of "I don’t think your example works nearly as well as you want it to."

I gave the example of DNS to illustrate the dangers of revamping &amp; replacing major or widely used protocols and layers.  The DNS fiasco was a complete backdoor, available for many years.  The original author of DNS had to meet Kaminsky to verify Kaminsky had indeed found a bug.  <a href="http://news.zdnet.co.uk/security/0,1000000189,39444944,00.htm" rel="nofollow">Once verified, this caused multiple vendors to have to meet, including Microsoft, Akamai, Juniper, Netgear, et. al. Those vendors all had to create a patch, and synchronize deployment and release of the patch.</a>

We don't need thousands of "examples", or bugs, to make this point...that one bug allowed unfretted, unmesasurable backdoor access in a technology we used for years.

That's why I agree with y3's statement "If we go and create new protocols, new layers, it will take years to make such safe and stable."]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6397300</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Leung]]></wp:comment_author>
			<wp:comment_author_email>michaelleung_blogger@yahoo.com.hk</wp:comment_author_email>
			<wp:comment_author_url>http://www.itblogs.info</wp:comment_author_url>
			<wp:comment_author_IP>122.104.160.209</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 05:47:18</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 13:47:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think the most of people used. Then we have no choice to not using HTTP!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2009-02-13 &laquo; Brent Sordyl&#8217;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://newsmavens.wordpress.com/2009/02/13/links-for-2009-02-13/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.150</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 06:00:39</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 14:00:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Why HTTP? The world doesn’t need another arbitrary binary protocol. Just use HTTP. Your life will be simpler. Originally this came up when scaling a gaggle of MySQL machines. I would have killed for a reliable proxy. It’s with this in mind that I’ve come up with my list of things that HTTP has that an arbitrary protocol will have to rebuild. Anytime you choose to use a service based on a non-HTTP protocol, look over this list and think carefully about what you’re giving up. (tags: webservices programming architecture) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[jbeswick]]></wp:comment_author>
			<wp:comment_author_email>james.beswick@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.161.68.96</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 07:05:51</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 15:05:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent article - very informative and well thought-out.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>5790677</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[bubba]]></wp:comment_author>
			<wp:comment_author_email>dsdgsdfs@sdffafsd.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.11.216.194</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 07:17:03</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 15:17:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You still need a arbitrary protocol to send inside the http.
Http will only add overhead.

If you don't develop against an existing webserver(iis/appache/whatever) you will need to implement the protocol correctly yourself if you want to take advantage of all the points you listed. This requires alot more work than just opening a socket and sending the raw data.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher Cashell]]></wp:comment_author>
			<wp:comment_author_email>topher-blogpost@zyp.org</wp:comment_author_email>
			<wp:comment_author_url>http://topher.livejournal.com</wp:comment_author_url>
			<wp:comment_author_IP>216.57.96.1</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 07:27:24</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 15:27:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[againseminoma: I don't think you fully understand the nature of the DNS protocol bug.   It didn't allow "unfretted, unmesasurable backdoor access", it allowed you to spoof DNS entries for other nefarious purposes.  Without some additional way to (try) to utilize the exploit, it really wasn't that big of a deal.  Also, considering that most businesses do not allow public access to their internally queried DNS servers, the risk was further limited.  Regardless, the patching was handled well, and multiple work-arounds were found that often reduced the impact to negligible.

The Kaminsky DNS flaw was a major issue, yes.  But it wasn't anywhere near the worst security issue that's been found.  I'd even go so far as to say it was relatively minor in the end, despite the hype.  In fact, there have been *multiple* HTTP implementation bugs that have caused *much* worse damage.  A couple of IIS bugs alone were (each) responsible for worse outbreaks and damages than the Kaminsky DNS issue.

Can you provide *any* other examples of major security issues with a protocol?  I can think of a few, but they pale hugely in comparison to just the implementation issues we've experienced with HTTP.

Additionally, you ignored the other have of my comment, regarding implementing DNS over HTTP.  If HTTP is the ultimate end-all be-all protocol, as claimed here, then DNS should be implemented on top of HTTP, right?  Except that this would be a horrible idea that would cause a gigantic multitude of problems and slow down all web browsing in measurable and notable ways.

Finally, even if you used HTTP as the base for your new application, unless what you were doing is *remarkably* similar to web browsing, you're likely going to have to hack a whole lot of extra crap on top of HTTP to be your protocol. . . which still leaves you with the ability to have protocol level security problems.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[Joachim Schipper]]></wp:comment_author>
			<wp:comment_author_email>joachim@joachimschipper.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.joachimschipper.nl</wp:comment_author_url>
			<wp:comment_author_IP>145.97.238.125</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 08:44:44</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 16:44:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dear Timothy,

I've taken a good look at DBSlayer, but I fail to see how it addresses my concerns. I don´t think tunneling SQL over HTTP is particularly elegant, but let´s put that aside for now; more importantly, i fail to see how this is allows me to use the database as more than a networked hash table. See e.g. http://code.nytimes.com/projects/dbslayer/wiki/CodingWithTheSlayer, under "What if I need to link two queries together". The NYT team points out that they cannot do the two-part transaction I described above, and that there is a mismatch between (My)SQL's stateful protocol and DBSlayer's stateless protocol here.

(Of course, it also has other undesirable limitations - as noted on the page, performance for large results is rather bad due to the overhead of encoding etc.)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[http &laquo; Unstranger&#8217;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://unstranger.wordpress.com/2009/02/13/http/</wp:comment_author_url>
			<wp:comment_author_IP>76.74.254.21</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 08:47:37</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 16:47:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http http://timothyfitz.wordpress.com/2009/02/12/why-http/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[RESTful Email over HTTP &laquo; Web Hooks]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.webhooks.org/2009/02/13/restful-email-over-http/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.2.75</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 16:50:05</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 00:50:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] implemented, it makes reading mailboxes from web scripts that much easier and accessible. And like Timothy Fitz recently suggested, this would make email a team player in our web ecosystem.     &laquo; The start of a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[againseminoma]]></wp:comment_author>
			<wp:comment_author_email>feuertod@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://seminoma.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>24.192.133.186</wp:comment_author_IP>
			<wp:comment_date>2009-02-14 11:52:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 19:52:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Christopher:

I fully understand the impact of the DNS bug:

<a href="http://blog.wired.com/27bstroke6/2008/07/details-of-dns.html" rel="nofollow">
"It's a really bad bug that really impacts every web site you use and your readers use," Kaminsky said. "It impacts whether or not readers are even going to see the article you're about to write."
</a>

<a href="http://blog.wired.com/27bstroke6/2008/08/dns-flaw-much-w.html" rel="nofollow">
Security researcher Dan Kaminsky finally revealed the full details of his reported DNS flaw. It turns out it's a lot worse than previously understood.
"Every network is at risk," Kaminsky said at the Black Hat conference here Wednesday. "That's what this flaw has shown."
Most of the focus has been on the danger that hackers could easily use the DNS bug  to hijack web browsers, redirecting victims to malicious web sites. But this was only the most obvious of many possible attacks.  In addition to browsers, attackers could target numerous other applications, protocols and services, such as the File Transfer Protocol (FTP), mail servers, spam filters, Telnet and the Secure Socket Layer that's supposed to make online banking safe from eavesdroppers. Automated software updating systems like those used by Microsoft and Apple  could also be subverted, allowing hackers to trick users into installing malicious software disguised as authenticated software updates.
Another serious vulnerability involves sites that provide the ubiquitous "Forgot your password?" link for users who find themselves locked out of their accounts. Kaminsky showed how the DNS flaw could be exploited to provide hackers with a backdoor or "skeleton key" to the web accounts. He worked with major sites such as Google, Yahoo, PayPal, eBay, MySpace, Facebook, LinkedIn and others to fix the issue before he disclosed information about that attack scenario today.
</a>

Plz read where it says "showed how the DNS flaw could be explointed to provide hackers with a BACKDOOR."  I implore YOU to READ more about the DNS flaw enabling a backdoor.

It was a very big deal - and why a bunch of high volume tech companies (please read list of names I gave above) all worked on a patch to be released at the same time.  Why all those companies met privately with Kaminsky.  Big deal on security, big deal at black hat, big deal in terms of the amount of money to create and apply patches.

I don't have to 'hack' a whole lot of extra crap on top of HTTP to be my protocol for applications.  There's plenty of open source software to make use of SOAP &amp; RESTful web services, delivered over HTTP &amp; HTTPS.

I'm done with tit for tat.  

K 10x bye.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6397300</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[Joachim Schipper]]></wp:comment_author>
			<wp:comment_author_email>joachim@joachimschipper.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.joachimschipper.nl</wp:comment_author_url>
			<wp:comment_author_IP>145.97.238.105</wp:comment_author_IP>
			<wp:comment_date>2009-02-15 06:04:07</wp:comment_date>
			<wp:comment_date_gmt>2009-02-15 14:04:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The whole DNS debate misses the point. Yes, there are serious issues with DNS (and Kaminsky's bug is not necessarily the worst), but building everything over HTTP doesn't solve these. For one, HTTP has its own problems (e.g. response splitting). Secondly, logic flaws aren't fixed just by tunneling over a protocol, even if the underlying protocol has no flaws of itself. (After all, DNS runs over UDP/TCP over IP over some lower-level protocol; none of these was at fault in this case.)

And anyone relying on DNS working properly is misguided in the first place. It's plain-text, unauthenticated, and vulnerable to several theoretical and practical attacks (id spoofing cannot be fixed entirely in the DNS server; there are still far too many resolvers vulnerable to stupid things like cache poisoning; and if all else fails, an attacker on the same network may be able to spoof responses from the server.) There is a reason that sane security protocols like SSH and SSH/TLS require server certificates...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[Software Quality Digest - 2009-02-18 | No bug left behind]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://nobugleftbehind.com/software-quality-digest-2009-02-18/</wp:comment_author_url>
			<wp:comment_author_IP>85.10.195.181</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 09:05:00</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 17:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Why HTTP? - “In the end the rules are simple. Is it possible to do over HTTP? Then do it over HTTP.” [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[Justin Grant]]></wp:comment_author>
			<wp:comment_author_email>justin@justingrant.it</wp:comment_author_email>
			<wp:comment_author_url>http://justingrant.it</wp:comment_author_url>
			<wp:comment_author_IP>203.63.71.193</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 20:46:04</wp:comment_date>
			<wp:comment_date_gmt>2009-02-19 04:46:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I couldn't agree with you more.  As a network engineer specialising in intelligent application delivery, please use HTTP.  There is so many ways that the network can help to secure, optimise and deliver your application so you don't have to.  This leaves you the developer to focus on the functionality of your application.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[Peter Browne]]></wp:comment_author>
			<wp:comment_author_email>peter.browne@techx2.com</wp:comment_author_email>
			<wp:comment_author_url>http://techx2.com</wp:comment_author_url>
			<wp:comment_author_IP>72.53.79.45</wp:comment_author_IP>
			<wp:comment_date>2009-02-20 18:34:01</wp:comment_date>
			<wp:comment_date_gmt>2009-02-21 02:34:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yup, this is why I develop web applications and not software-based applications.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[Dev Blog AF83 &raquo; Blog Archive &raquo; Veille technologique (x2) : Annonces, Contenus, Conférences, Méthodes, Agilité, Développment, Langages, Editeurs, Outils, Bases de données, Protocoles, Bibliothèques, SEO, Ergonomie, etc.]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dev.af83.com/veille-technologique/veille-technologique-x2-annonces-contenus-conferences-methodes-agilite-developpment-langages-editeurs-outils-bases-de-donnees-protocoles-bibliotheques-seo-ergo</wp:comment_author_url>
			<wp:comment_author_IP>193.84.18.51</wp:comment_author_IP>
			<wp:comment_date>2009-02-23 11:47:41</wp:comment_date>
			<wp:comment_date_gmt>2009-02-23 19:47:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://timothyfitz.wordpress.com/2009/02/12/why-http/ : HTTP est un protocole éprouvé, c&#8217;est un gage de fiabilité que de l&#8217;utiliser [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>291</wp:comment_id>
			<wp:comment_author><![CDATA[William Vambenepe&#8217;s blog &raquo; Blog Archive &raquo; A post-mortem on the previous IT management revolution]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://stage.vambenepe.com/archives/700</wp:comment_author_url>
			<wp:comment_author_IP>208.97.151.17</wp:comment_author_IP>
			<wp:comment_date>2009-04-24 01:13:45</wp:comment_date>
			<wp:comment_date_gmt>2009-04-24 09:13:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] do it in the mindset that Tim Bray describes: &#8220;If you’re going to do bits-on-the-wire, Why not use HTTP? And if you’re going to use HTTP, use it right. That’s all.&#8221; Not as something that needs [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>268</wp:comment_id>
			<wp:comment_author><![CDATA[alberonmarketing.com &raquo; The Sun Cloud]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://alberonmarketing.com/blog/?p=157</wp:comment_author_url>
			<wp:comment_author_IP>174.132.79.162</wp:comment_author_IP>
			<wp:comment_date>2009-03-20 07:22:26</wp:comment_date>
			<wp:comment_date_gmt>2009-03-20 15:22:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] are ultimately flexible and interoperable. If you’re going to do bits-on-the-wire, Why not use HTTP? And if you’re going to use HTTP, use it right. That’s [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>233</wp:comment_id>
			<wp:comment_author><![CDATA[Murmp - Why HTTP?]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.murmp.com/permalink/575</wp:comment_author_url>
			<wp:comment_author_IP>173.10.209.222</wp:comment_author_IP>
			<wp:comment_date>2009-03-02 21:20:21</wp:comment_date>
			<wp:comment_date_gmt>2009-03-03 05:20:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Why HTTP?   Currently 12/3   Submitted February 02, 2009 by jsuggs  Tags: http! programming! technology! web development! The world doesn’t need another arbitrary binary protocol. Just use HTTP. Your life will be simpler. Originally this came up when scaling a gaggle of MySQL machines. I would have killed for a reliable proxy. It’s with this in mind that I’ve come up with my list of things that HTTP has that an arbitrary protocol will have to rebuild. Anytime you choose to use a service based on a non-HTTP protocol, look over this list and think carefully about what you’re giving up. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>301</wp:comment_id>
			<wp:comment_author><![CDATA[links for 2009-05-10 &laquo; Donghai Ma]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://donghaima.wordpress.com/2009/05/11/links-for-2009-05-10/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.204</wp:comment_author_IP>
			<wp:comment_date>2009-05-10 20:02:10</wp:comment_date>
			<wp:comment_date_gmt>2009-05-11 04:02:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Why HTTP? « Timothy Fitz (tags: http programming protocol architecture network web networking) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>367</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Lantz]]></wp:comment_author>
			<wp:comment_author_email>tim.lantz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.22.160.1</wp:comment_author_IP>
			<wp:comment_date>2010-01-09 07:56:54</wp:comment_date>
			<wp:comment_date_gmt>2010-01-09 15:56:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[HTTP is very often a great choice because it is easy to understand and there are a lot of great tools and libraries to make working with it easy. Performance is a concern expressed in many of the disagreeing responses above, and while this may be true for some applications, which I think is well recognized, I find that very often this is a misused reason for not using HTTP. At least starting with HTTP, in many cases, gives you a free option to stick with HTTP if it does fit your needs. 

If your customer, boss or slave driver wants you to build a Widget service, you can start with HTTP. You might also want to start with Python or Ruby or some other language that gives you rapid turn around time and has a great set of tools, libraries, and a community that loves creating the wheels for you. It might be slow, and it might not scale, but it is working and it took a short amount of time (assuming proficiency with the technology you chose). And it *might* even perform and scale to your needs. You can then go on vacation, or more likely, start on the next wonderful task provided to you. If it doesn't, assuming that you've in fact measured it, and you know it doesn't, you still have something very important. You have a working implementation that is flexible and easy to change. You have something you can profile to see where the problems are. You have something running, and your users can give you input on the interface. You can have verification from the users that you built the right thing, which is a much more magical bean than having a fast but wrong something. With all that behind you, you rewrite all or part of it in whatever you think is going to make it fast, and you can use whatever protocol you think might be needed to make it perform and scale to your stakeholder's needs. I would though, depending of course on the situation, let the users start complaining about performance before doing anything more than what is simplest to maintain. People like it when they complain, and then it gets faster, and so now you have a great opportunity to make them happy. If it is fast, but the wrong thing, you'll have a harder time achieving turnaround necessary to keep them confident in your abilities because you’ve built something that took some time, and you are back at the requirements stage. 

All that said, I agree with a couple of the commentators above who find the "if you can do it with X, do it with X". This is bad reasoning. 

HTTP and "web" aren't one in the same, but let us put that aside for a second, and talk about web. Keep in mind I'm not talking about protocols. This is just an analogy. Something that I hear a lot is that the browser is the future and that all applications should be built for the browser. In an ideal world where all companies used browsers built in the last 8 years, you can argue that there are benefits to building for the browser. However, the world is not ideal. There are a lot of stale browsers sitting around in the corporate world. There are lots of co-workers who don't know or want to learn JavaScript. There are managers who will fire you if you try to convince them that Adobe creates software development tools. And it might just still be a hell of a lot harder to do certain things, even using the newest and coolest JavaScript libraries you can download, for the web than it is to pop open a Visual Studio or equivalent and drag and drop the application together, with all of the spaghetti code right there in the GUI classes. Just because you can do it as a web app, and even if doing it has a web app has advantages over not doing it as a web app, those advantages need to outweigh the costs of doing it as a web app, and those costs are not purely technical concerns. 

I have seen this very impressive ASCII version of Star Wars off and on since I was in middle or high school or something like that. It plays on the web now I believe. To this day, I'm still impressed by it. Whoever did this (sorry, I am not that familiar, just occasionally view it) really did something "neat". A guy who builds an airplane out of coffee cans does something "neat" too. Neat but not necessarily useful, and certainly in these examples, the best wrench wasn't picked for sanding the boat. I wouldn't say I'm not glad these sorts of things get done. It is good to see, and it shows what can be done with a technology. But if it wasn't my interest to do something like this just for the sake of doing it - if I was actually trying to solve some real problem - I probably would choose a different route.

Now back to HTTP. You can do a lot with HTTP. In fact, if you're creative, you could figure out ways to do "game networking", perhaps not with the greatest performance relative to other ways of doing it, using HTTP. You could implement new email systems using HTTP rather than use existing email protocols (although, I think this sort of exists in all sorts of other forms on the web, just not called email). Should you? That depends on your reasons for doing it. What are the requirements? What pleases the people you're doing it for? Does HTTP help to get the job done more than another choice would? Do you need any, some or all of the reasons to use HTTP listed above? Are there things about HTTP that are making your life miserable? If you're doing something for fun, out of interest, it could be as simple as, is it fun to do it with HTTP? Or is it more fun to roll your own protocol.

Also, be cautious of being the guy who says "this is it! problem solved!". You don’t want to be so hooked on pushing a technology into holes it doesn't fit in that you miss some other, better way to solve the problem. HTTP is old compared to some things, but it really isn't that old. Things can and will change in ways we can't imagine. Might HTTP survive for a long time from now and be a building block for that future? Maybe it will. But there is the chance that while many developers are struggling to fit HTTP onto new problems where it isn’t the best answer, they get blown away by guys who just really want to solve the “non-technical” problem, and don't necessarily care about HTsomethingsomething, or why it might be a good choice. Even if you disagree with these people, if everyone else likes the work they are doing, you'll need to work with them and you'll need to work with the "terrible" technology choices they've made. And in the case that a protocol gains traction that has benefits beyond what we can think of right here when discussing HTTP, and solves some of those things that people don't like about HTTP, why not? Of course it takes years for a protocol to become "proved", but hopefully the people creating protocols make more new mistakes rather than repeating those old ones that were learned in the design of well trusted protocols. HTTP doesn't have to be the "end all solution". As someone who is a little passionate about technology, I find it hard to say that there is any technology that can't be improved on, regardless of how basic or excepted that technology is. I'm not a fortune teller. I don't know what tomorrows problems will be. It is important to keep an open mind about these sorts of things; to think both about what existing solutions may be able to solve a problem, and to recognize where a new solution might be very beneficial.

I think the spirit of this post is good though. There are a lot of great reasons to use HTTP, and the author has done a good job of listing these out. However, continue to recognize that HTTP is a tool, and new tools will come along for old and new problems. Some old tools will continue to live on past HTTP use being so widespread, and though they may be dinosaurs relative to HTTP, they exist today because they are solving a problem for someone. In many cases, there are no good reasons for a "worse" or less standard approach to be taken, but in some cases there are reasons. Because of this, consideration past "is it possible?" should be taken when you make a decision on what protocol to use. Finally, as a developer, it is better to be one who is an expert at learning to use tools, rather than one who is an expert at using a tool. I doubt this will change any time soon.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>372</wp:comment_id>
			<wp:comment_author><![CDATA[dot]]></wp:comment_author>
			<wp:comment_author_email>dot@dot.arpa</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>210.54.148.202</wp:comment_author_IP>
			<wp:comment_date>2010-01-11 14:36:32</wp:comment_date>
			<wp:comment_date_gmt>2010-01-11 22:36:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[we don't even need dns
i hope that people see how mktg (=mkt share) is what dictates what protocol get used
if the maj of users understood how the hosts file works or how to set up their own nameserver for their own personal use only and use a binary zone file then they would not use dns
because hosts or local binary zone files are faster and more reliable than dns and more easily secured
we trust the publishers of the telephone directories re: telephone numbers
the issue is no diff with computers and ip numbers. we should only trust the root server administrators and the domain registrars to get the ip numbers we need.  but with dns we trust anyone.  ppl use dns because they do not understand the alternatives.
the probs that drove the creation of dns 30 yrs ago do not exist today.  power and disk space are non-issues for rseolving names to numbers.
but new probs are present, e.g. 100's of millions of ppl using the internets and, consequently, lack of trust.  
if the maj of users understood how to use, e.g., ssh, then they would not connect via, e.g., http.  if they are concerned about security.  because ssh is more secure.
if they understood, they would get a directory of the ip numbers they need from a trusted source.
using ssh.
what the maj of users know and don't know is a matter of mktg (mkt share).
but anyone can learn if they apply themselves.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Emergent Properties of Continual Automation</title>
		<link>http://timothyfitz.wordpress.com/2009/02/13/continual-automation/</link>
		<pubDate>Fri, 13 Feb 2009 11:16:33 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[Once a task has been automated to take dramatically less time, a threshold is crossed and  at which point you can exploit emergent properties.<strong> Or in other words, crazy-ass improvements.</strong>

While the most dramatic examples I have relate to our test and <a href="http://timothyfitz.wordpress.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/">deploy</a> infrastructure, I'll skip rehashing those here.

Most companies manage to end up with weeks of effort required to create local development environments. I've heard stories of major bay area companies with internal package management hell that meant there were only two or three people in the entire (thousands of employees) company that could actually create working development setups.

How automated can this process get? At IMVU the entire setup process for our website is an SVN checkout and running a script. At that point a local instance of apache and memcache are running. Port 80 is serving up a local development copy of the website. <strong>There is no work left. </strong>

What does this level of automation give you? Here's where things start to take off. Now I can easily install a sandbox on my home machine, on my laptop or even on an EC2 instance all without effort. I can start to parallelize my work effort: run regression tests on one machine, poke at code to understand it on the other. We can one-off install sandboxes on machines to run data crunching. This is how we've generated the numerous incarnations of rendered 3d art in our registration flow. 

When we spin up new engineers we target a working sandbox by lunch and a typo fix live in production by end of day. <strong>On the first day of their employment. </strong>This is one of our best ways to demonstrate our cultural differences from most development shops.

We can give sandboxes to marketing, and have them develop promotion materials against instantly up to date code. Marketing can run tests (which they occasionally break!) and even commit and push material live to the website. This isn't just saving engineering time, it's allowing marketing to be dramatically more effective. No more telephone or bouncing e-mail the mockups back and forth.

Instead of resorting to complicated test-cluster setups, our testing pipeline is just fourty seperate sandboxes operating with full parallelism. Should a machine break, or some other stray-electron corrupt an install, it's a tiny amount of effort to restore the machine from a fresh state.

More importantly, our sandbox install and update procedures are the same thing. It's incredibly easy to experiment with new features, software packages or other setup changes and have every other developer running with them at their next code update. We've experimented with different versions of php, including switches to toggle between php4 and php5. We added Privoxy to flag accidental 3rd-party dependencies in Selenium, solving a large class of accidental test dependencies.

All of these benefits are amazing, but <strong>what was more incredible is that we didn't really anticipate any of them.</strong> This is emergence at its finest. In dramatically lowering the cost of sandbox creation we dramatically lowered the costs of numerous dependent activities, and in doing so we changed the very shape of our development practices. This is the application of<a href="http://groksystems.com/"> Systems Theory</a> at it's finest.

<strong>We didn't get here overnight.</strong> We didn't get here in a few weeks. We didn't get here by funding a project. We got here by a culture. That culture overridingly said, if you did it twice it's time to start automating. Every time you repeat a task, make progress on automating it. It doesn't have to be big, flashy, bold or fanciful. It just has to be progress. You'll quickly find this culture reinforces itself, automating common tasks makes other engineers want to automate them even more.

Sometime today you will come across a task that you've done before. You'll notice the commands are coming from muscle memory or the steps are fully documented. <strong>Automate it</strong><strong>. If not now, then when?</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2009-02-13 03:16:33</wp:post_date>
		<wp:post_date_gmt>2009-02-13 11:16:33</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>continual-automation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>208.80.119.3</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 12:46:55</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 20:46:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's also important to remember that you don't have to have the fanciest deploy setup to start benefiting from automatic deployment.  I get a lot of time savings in some personal one-offs by just rolling a svn update/open logs/start tests script up and pressing a button.  

These projects are a lot less 'dumb' than our work setup at IMVU, but I'm still  saving minutes per build, and I know that should it ever become useful I can make a more 'intelligent' deploy system.

Computers are very good at repetitive tasks, and we're very badly impacted by them.  If it takes 15 minutes to get changes live, we're less likely to deploy than if it takes 1.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[Nivi]]></wp:comment_author>
			<wp:comment_author_email>nivi@alum.mit.edu</wp:comment_author_email>
			<wp:comment_author_url>http://venturehacks.com</wp:comment_author_url>
			<wp:comment_author_IP>24.130.32.130</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 18:54:40</wp:comment_date>
			<wp:comment_date_gmt>2009-02-14 02:54:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA["Every time you repeat a task, make progress on automating it."
This sounds like a good complement to the practice of making progress on refactoring code or cleaning it up every time you touch it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[Joe Chavez]]></wp:comment_author>
			<wp:comment_author_email>joe.chavez@chavez.ws</wp:comment_author_email>
			<wp:comment_author_url>http://blog.chavez.ws</wp:comment_author_url>
			<wp:comment_author_IP>12.24.60.12</wp:comment_author_IP>
			<wp:comment_date>2009-02-13 15:47:58</wp:comment_date>
			<wp:comment_date_gmt>2009-02-13 23:47:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've also found that if you can't automate a build/deploy cycle after 3 attempts then it is probably too complicate and could use a refactoring to reduce complexity. I recently encountered what I like to call the "big ball of mud" deployment... a single monolithic executable that takes 1+ hours to build. Sheer madness...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[Matt Grommes]]></wp:comment_author>
			<wp:comment_author_email>matt@mattorama.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.mattorama.net</wp:comment_author_url>
			<wp:comment_author_IP>216.223.235.150</wp:comment_author_IP>
			<wp:comment_date>2009-02-21 21:57:33</wp:comment_date>
			<wp:comment_date_gmt>2009-02-22 05:57:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think we could automate the deployment of our apps in this way, with a giant exception of needing a database. Installing Oracle locally is a huge pain in the ass and the app won't run without it (yay for "Enterprise" apps :( ). We do have our database creation automated though so it's just the install that's a hurdle.

I really like this idea and think it's definitely worth working toward. Even if you don't make it, like you say it always creates new opportunities you wouldn't have known about before.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[Worthy of Praise - Push cx]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://push.cx/2009/worthy-of-praise</wp:comment_author_url>
			<wp:comment_author_IP>208.113.216.190</wp:comment_author_IP>
			<wp:comment_date>2009-02-22 08:30:46</wp:comment_date>
			<wp:comment_date_gmt>2009-02-22 16:30:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Timothy Fitz&#8217;s new blog, he&#8217;s sold me on Continuous Deployment, named the benefits automation I never put my finger on, and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>1639</wp:comment_id>
			<wp:comment_author><![CDATA[Jnaapti &#8211; One Year On&#8230; | Gautham Pai «buzypi.in»]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://buzypi.in/2012/06/19/jnaapti-one-year-on/</wp:comment_author_url>
			<wp:comment_author_IP>68.169.40.30</wp:comment_author_IP>
			<wp:comment_date>2012-06-19 04:55:25</wp:comment_date>
			<wp:comment_date_gmt>2012-06-19 12:55:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Maintain a log of where you are spending your time and optimize what you can optimize. Get good at continual automation not just with engineering processes but with life! Make a note of key metrics that you want to [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1340110525.672";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Extreme Programming Explained</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/51qxx561dil_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:48:44 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/51qxx561dil_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2009-02-17 22:48:44</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:48:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>51qxx561dil_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/51qxx561dil_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Test-Driven Development</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/513pzwjdh7l_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:48:48 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/513pzwjdh7l_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2009-02-17 22:48:48</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:48:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>513pzwjdh7l_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/513pzwjdh7l_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Working Effectively with Legacy Code</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/51rcxgpxq8l_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:48:53 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/51rcxgpxq8l_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2009-02-17 22:48:53</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:48:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>51rcxgpxq8l_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/51rcxgpxq8l_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>The Goal: A Process of Ongoing Improvement</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/51w2nxjaxhl_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:48:57 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/51w2nxjaxhl_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2009-02-17 22:48:57</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:48:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>51w2nxjaxhl_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/51w2nxjaxhl_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Toyota Production System</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/41dfqw77a5l_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:49:01 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/41dfqw77a5l_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2009-02-17 22:49:01</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:49:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>41dfqw77a5l_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/41dfqw77a5l_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Lean Thinking</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/51hes69h5fl_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:49:05 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/51hes69h5fl_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2009-02-17 22:49:05</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:49:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>51hes69h5fl_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/51hes69h5fl_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Implementing Lean Software Development</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/51crrteaezl_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:49:09 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/51crrteaezl_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2009-02-17 22:49:09</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:49:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>51crrteaezl_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/51crrteaezl_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>5187m7bb52l_sl160_</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/5187m7bb52l_sl160_/</link>
		<pubDate>Wed, 18 Feb 2009 06:49:15 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/02/5187m7bb52l_sl160_.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2009-02-17 22:49:15</wp:post_date>
		<wp:post_date_gmt>2009-02-18 06:49:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5187m7bb52l_sl160_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>73</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/02/5187m7bb52l_sl160_.jpg</wp:attachment_url>
	</item>
	<item>
		<title>Sample IMVU Crash Log</title>
		<link>http://timothyfitz.wordpress.com/sample-imvu-crash-log/</link>
		<pubDate>Mon, 09 Mar 2009 09:35:54 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?page_id=104</guid>
		<description></description>
		<content:encoded><![CDATA[<pre>Summary: IMVU crash | 2009-03-09 02:30:28 | v403.40 | bugKeyd81d24b8 | Timothy(6441221)
Traceback (most recent call last):
File "main\clientapp.pyo", line 2275, in runClientApp
File "main\clientapp.pyo", line 2217, in runMainLoop
File "main\clientapp.pyo", line 2207, in _runMainLoop
File "main\clientapp.pyo", line 2003, in step
File "main\clientapp.pyo", line 2040, in __profiledStep
File "main\clientapp.pyo", line 1399, in __step
File "main\buddywindow.pyo", line 343, in step
File "main\buddywindow.pyo", line 754, in __processEvents
File "main\buddywindow.pyo", line 763, in __processEvent
File "main\buddywindow.pyo", line 125, in &lt;lambda&gt;
File "main\menu.pyo", line 241, in dispatchCommand
StructuredException: EXCEPTION_ACCESS_VIOLATION(c0000005)
Parameters: [0x1, 0x0]
(boost_python#3ace214f1fa349e78f20de38e87ce06a1!000128c0, pc=010728c0)
(_avatarwindow#e42cf009f3e84e20853059644879c43b1!0001fcaf, pc=014bfcaf)
(_avatarwindow#e42cf009f3e84e20853059644879c43b1!0001f1f7, pc=014bf1f7)
(boost_python#3ace214f1fa349e78f20de38e87ce06a1!00012bd7, pc=01072bd7)
(boost_python#3ace214f1fa349e78f20de38e87ce06a1!0000cf07, pc=0106cf07)
(boost_python#3ace214f1fa349e78f20de38e87ce06a1!0000cd72, pc=0106cd72)
(_avatarwindow#e42cf009f3e84e20853059644879c43b1!0001903a, pc=014b903a)
--</pre>
<pre>Avatar name: Timothy
User ID: 6441221
Session ID: 4677462
Previous Session ID: 4677462</pre>
<pre>Process:
Executable:        C:\Documents and Settings\Timothy\Application Data\IMVUClient\IMVUClient.exe
Current directory: C:\Documents and Settings\Timothy\Application Data\IMVUClient
Running since:     03/09/09 09:29:46</pre>
<pre>Windows:
Version:       Windows XP (Service Pack 2) (Build 2600)
Running since: 2009-03-03 01:47:54.547000</pre>
<pre>Memory:
Used physical memory: 77% of 2 GiB
Used virtual memory:  60% of 2.6 GiB
Used address space:   14% of 2 GiB
--
Working set size: 95.15 MiB (peak 95.3 MiB)
Page file usage:  88.67 MiB (peak 89.64 MiB)
Paged pool:       90.93 KiB (peak 98.4 KiB)
Nonpaged pool:    21.76 KiB (peak 22.84 KiB)
--
CommitTotal:        1.56 GiB
CommitLimit:        2.6 GiB
CommitPeak:         1.56 GiB
PhysicalTotal:      2 GiB
PhysicalAvailable:  473.54 MiB
SystemCache:        555.41 MiB
KernelTotal:        80.43 MiB
KernelPaged:        57.88 MiB
KernelNonpaged:     22.55 MiB
Total processes:    70
Total threads:      676
Total open handles: 17739</pre>
<pre>Display:
DeviceName: NV4_DISP
Resolution: 1680x1050x32 (60 Hz)
--
Direct3D Adapter 0
Driver        : nv4_disp.dll
Description   : NVIDIA GeForce 7800 GT
DriverVersion : 6.14.10.9147
VendorId      : 4318
DeviceId      : 146
SubSysId      : 0
Revision      : 161
DeviceGUID    : {D7B71E3E-43D2-11CF-0B40-0A2000C2CB35}
WHQLLevel     : Signed (no date)
--
Device 0 = "NVIDIA GeForce 7800 GT" (AttachedToDesktop, ModesPruned, PrimaryDevice)
Device 1 = "NetMeeting driver" (MirroringDriver)
Device 2 = "RDPDD Chained DD" (MirroringDriver)</pre>
<pre>Processing Windows Message: 275</pre>
<pre>Unresponsive when closed: False
Windows open: 0
Window has been opened this session: False
Window has ever been opened: True
Windows open last session: 29
Thread count: 13
['ThreadPool(01):&lt;bound method DiskCacheSave.main of &lt;cache.cachetools.DiskCacheSave instance at 0x0263CE40&gt;&gt;',
'ThreadPool(04)',
'ThreadPoolMonitor',
'ThreadPool(08)',
'ThreadPool(03)',
'ThreadPool(09)',
'ThreadPool(02)',
'ThreadPool(00)',
'MainThread',
'ThreadPool(07):threadtask:checkForInvite2',
'ThreadPool(05)',
'ThreadPool(06)',
'Thread-1']</pre>
<pre>=== hardware info ===
CpuNameAndSpeed: Intel(R) Core(TM)2 CPU          6300  @ 1.86GHz, ~1868 Mhz</pre>
<pre>SystemMemory: 2048
VideoCardName: NVIDIA GeForce 7800 GT
VideoCardMemory: 256
cpudesc: INTELP=3 AMD=000 PPRO=1 MMX=1 SSE=1 SSE2=1 3DNOW=0 ARCH=00 LEVEL=06 NCPU=02 MHZ=01868 RAM=2047
WindowsVersion: NT-platform, version 5.1, build 2600, Service Pack 2</pre>
<pre>=== Log file: C:\Documents and Settings\Timothy\Application Data\IMVU\IMVULog.log ===
.imvu.com/imvufiles/widgets/TextChat_10.swf', 'client.publicroom.enable_lobby_fafmessages': '1', 'client.prefetch_fafurl.1': 'http://www.imvu.com/catalog/web_client_help.php?topic=room_intro_help', 'client.prefetch_fafurl.0': 'http://www.imvu.com/catalog/web_client_help.php?topic=cheatsheet_rooms', 'client.swfThingsToDoUrl': 'http://www.imvu.com/swf/ThingsToDoPanel_apChatNow_20090119.swf', 'client.rateachat.promptUrl': 'http://www.imvu.com/rateachat/rateachat_jewels.php', 'client.rateachat.notificationUrl': 'http://www.imvu.com/rateachat/rateachat_jewels.php', 'client.swfTextChatUrl': 'http://www.imvu.com/swf/TextChat-2008-09-23.swf?thingstodo=1&amp;inventory=1', 'client.widgetSpaceUrl': 'http://www.imvu.com/swf/WidgetSpace.php', 'client.swfFlashTutorial': 'http://www.imvu.com/swf/Tutorial-2008-09-11.swf', 'client.shop.url': 'client_shop', 'client.session_dual_writes': '1', 'client.swfTextChatUrl\t': 'http://www.imvu.com/swf/TextChat-2008-07-17.swf', 'client.publicroom.client_version_cutoff': '0', 'client.flash_ui_widgets': 'CameraWidget', 'client.showInventoryFooter': '', 'client.session_read_from_reporting': '1', 'client.rateachat.promptTimeout': '1800', 'client.sound_limit_enforcement_id': '2658155', 'client.swfTextChatUrl \t\t\t\t': 'http://www.imvu.com/swf/TextChat-2008-06-13.swf', 'client.swfUrl.PrivilegedWidgetAggregator': 'http://www.imvu.com/swf/PrivilegedWidgetAggregator-2008-09-15.swf'}, 'hasAccessPass': '1', 'wealth_predits': '0', 'rateachatMembership': True, 'shouldShowMusic': 1, 'uiskin': '2224850', 'previewer_update_info': {'url': 'http://www.imvu.com/installers/InstallPreviewer_372.9-20070514.exe', 'required': True, 'release_notes': ''}, 'client_update_info': {'url': 'http://static.imvu.com/imvufiles/installers/InstallIMVU_409.24.exe', 'required': False, 'release_notes': 'Release Candidate\n- Fix a set of crashes that could be caused by bad chat data.'}, 'picUrl': 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6441221_7638431246a56bec8f651.jpg', 'newbieClientUI': 0, 'has_dressup_pass': '1', 'wealth': 290335, 'hasVIPPass': 1, 'look': ['136', '191', '12773', '651165', '1225065', '1942027', '2087321'], 'show_flash_tips': 1, 'room': 612801, 'dob': '1985-08-13', 'has_done_coop_anim': 1, 'age': '23', 'soloRoom': 612801, 'showInventoryTabOnStart': False, 'prefDefaults': {'useTextChat': True}, 'isGuest': 0, 'registrarId': 39}</pre>
<pre>20.062 2708*            account.pyo( 506)   ERROR: Error setting pref useTextChat to True
Traceback (most recent call last):
File "imvu\account.pyo", line 504, in setLoginCredentials (emailOrAvatar='Timothy', password='...', prefService=&lt;main.prefs.PrefServ...01138930&gt;, self=&lt;imvu.account.UserAc...0254CFA8&gt;)
File "main\prefs.pyo", line 217, in setPrefDefault (default=True, name='useTextChat', self=&lt;main.prefs.PrefServ...01138930&gt;)
KeyError: 'useTextChat'
20.187 2708*          clientapp.pyo( 369)    INFO: User access pass status differs from last run, flushing product authorization disk cache
20.187 2708*          clientapp.pyo(1653)    INFO: Client update is available
20.187 2708*             dialog.pyo( 689)    INFO: YesNoDialog created with title 'Update Available', prompt 'An update is available.  Update now?\n\nRelease notes:\nRelease Candidate\n- Fix a set of crashes that could be caused by bad chat data.', dimensions (180, 140)
20.203 2708*             dialog.pyo( 823)    INFO: &lt;win32.dialog.YesNoDialog object at 0x0258BB90&gt; _DoSize: cx = 270, cy = 228, w = 278, h = 262
20.203 2708*             dialog.pyo( 823)    INFO: &lt;win32.dialog.YesNoDialog object at 0x0258BB90&gt; _DoSize: cx = 270, cy = 228, w = 278, h = 262
20.250 3528  xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.showInventory(6441221, [495], False)
20.265 2708*            account.pyo( 317)    INFO: notifyClientSessionEvent(): blocking: False event: {'memory_stats': {'native_thread_count': 23, 'native_object_count': 237, 'python_object_count': 54059, 'python_thread_count': 12, 'python_garbage_count': 0}, 'event_type': 'session_ping'}
20.265 2708* xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.notifyClientSessionEvent(6441221, '4677462', {'event_type': 'session_ping', 'memory_stats': {'native_object_count': 237, 'native_thread_count': 23, 'python_garbage_count': 0, 'python_object_count': 54059, ...}})
20.906 3904  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 172 bytes of data
20.906 3904  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.notifyClientSessionEvent(6441221, '4677462', {'event_type': 'session_ping', 'memory_stats': {'native_object_count': 237, 'native_thread_count': 23, 'python_garbage_count': 0, 'python_object_count': 54059, ...}}) returned 1
21.015 2480  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 1276 bytes of data
21.031 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.showInventory(6441221, [495], False) returned ['80', '136', '167', '182', '189', '191', ...]
21.031 2708*              event.pyo(  70)    INFO: fire: &lt;main.inventory.InventoryState object at 0x0259E770&gt; InventoryChanged {}
21.047 2636  xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.inventoryProductBatch([793645, 3194016])
21.672 4028  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 1767 bytes of data
21.672 4028  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.inventoryProductBatch([793645, 3194016]) returned [{'cPath': '107_1027_1530', 'manufacturers_id': 39, 'manufacturers_name': 'IMVU inc.', 'products_bundle': '', ...}, {'cPath': '495_778', 'manufacturers_id': 7093450, 'manufacturers_name': 'Deliverance', 'products_bundle': '', ...}]
21.687 3528  xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.inventoryCategoryBatch([778])
22.281 2480  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 394 bytes of data
22.281 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.inventoryCategoryBatch([778]) returned [{'categories_id': 778, 'categories_name': 'FLASH stickers'}]
22.281 2708*              event.pyo(  70)    INFO: fire: &lt;main.inventory.InventoryState object at 0x0259E770&gt; InventoryChanged {}
22.312 2708*          inventory.pyo( 131)    INFO: Updating entire inventory state took 2.09299993515 seconds
22.906 2708*          clientapp.pyo(1665)    INFO: Update declined
22.984 2708*          clientapp.pyo(1815)    INFO: resetMeetSession activity='Chat now! (18+) (39) rateachat'
22.984 2708*               meet.pyo(  79)    INFO: &lt;MeetSomeoneSession DirectConnect: instance 2, userId 6441221, chat None&gt;: creating new session
22.984 2708*          clientapp.pyo( 472)    INFO: ClientApp::showInitial3dWindow
23.000 2708*    simpledictcache.pyo( 175)    INFO: readFromFile(): filename: 'flashData6441221.pickle'
23.000 2708*        weblistener.pyo(  21)    INFO: Creating WebListener from url: http://www.imvu.com/client.php?page=weblistener
23.219 2708*        weblistener.pyo(  33)    INFO: Playing WebListener flashContext
23.219 2708*          clientapp.pyo(1421)    INFO: clientapp creating buddyState
23.219 2708*          clientapp.pyo(1426)    INFO: clientapp creating buddyWindow
23.219 2708*        buddywindow.pyo(  70)    INFO: BuddyWindow constructor
23.219 2708*        buddywindow.pyo(  83)    INFO: BuddyWindow getting desktop rect
23.219 2708*        buddywindow.pyo(  85)    INFO: BuddyWindow creating c++ window
23.375 2708*        buddywindow.pyo(  87)    INFO: BuddyWindow setting c++ window avatarname
23.375 2708*        buddywindow.pyo(  89)    INFO: BuddyWindow creating AdSpace
23.375 2708*        buddywindow.pyo(  97)    INFO: BuddyWindow creating InventoryPanel
23.390 2708*        buddywindow.pyo( 109)    INFO: BuddyWindow maybe centering window
23.390 2708*        buddywindow.pyo( 114)    INFO: BuddyWindow set up event handlers
23.390 2708*        buddywindow.pyo( 137)    INFO: BuddyWindow registering listeners
23.406 2708*          clientapp.pyo( 248)    INFO: Starting IMVUQualityAgent
23.437 2708*          clientapp.pyo(2273)    INFO: Starting main loop
23.437 2708*            account.pyo(1030)    INFO: requestGetImageAd: onComplete &lt;bound method AdSpace.__updateAdSpaceFromParams of &lt;main.adspace.AdSpace object at 0x02794D30&gt;&gt;
23.437 2708* xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.getImageAd(6441221)
23.437 2708*            account.pyo( 924)    INFO: getBuddyState(): user_id: 6441221 current_availability: 'DoNotDisturb'
23.453 2708* xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.getBuddyState(6441221, {'availability': 'DoNotDisturb', 'buddy_list_md5': 'ec656156fdbf...1c399b7832a46', 'online_status_md5': 'cffc410a2102...b175fd6394f93'})
23.453 2708* _productauthorizer.pyo( 191)    INFO: __batchGetProductAuth():  imAuthList [{'userId': 6441221, 'productId': 2224850}]
23.453 2708* xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.authorizeProducts2({'auths': [['userId', 'productId'], [6441221, 2224850]], 'max_supported_format': 7, 'use_extracte..._if_available': 1})
23.453 2708*     inventorypanel.pyo(  89)    INFO: Received new inventory
23.453 3048  loggingserverproxy.pyo(  16)    INFO: --&gt; chat.checkForInvite2({'userId': 6441221})
23.484 2708*     inventorypanel.pyo( 117)   ERROR: __updateInventoryUi failed to add product 666631
23.562 2480  xmlrpclib_multicall.pyo( 183)    INFO: MultiCall: batching up 3 calls: test.getImageAd(6441221), test.getBuddyState(6441221, {'availability': 'DoNotDisturb', 'buddy_list_md5': 'ec656156fdbf...1c399b7832a46', 'online_status_md5': 'cffc410a2102...b175fd6394f93'}), test.authorizeProducts2({'auths': [['userId', 'productId'], [6441221, 2224850]], 'max_supported_format': 7, 'use_extracte..._if_available': 1})
23.906 2480  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 1671 bytes of data
23.906 2480  xmlrpclib_multicall.pyo( 209)    INFO: MultiCall: completed calls - server reported time 0.00000
23.906 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.getImageAd(6441221) returned {'clickUrl': '', 'customers_journey_steps_id': 0, 'enabled': False, 'imageUrl': '', ...}
23.906 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.getBuddyState(6441221, {'availability': 'DoNotDisturb', 'buddy_list_md5': 'ec656156fdbf...1c399b7832a46', 'online_status_md5': 'cffc410a2102...b175fd6394f93'}) returned {'buddy_list': {'blocked': [39, 1327478, 7262687, 19574601, 28259937], 'fans': [151, 380, 93078, 116901, 1159488, 1778906, ...], 'friends': [105148, 116901, 1327500, 6430115, 6330421, 5289013, ...]}, 'buddy_list_md5': '20e0c2b2c1c9...9d46e536cd514', 'online_status': '000000000000...0000000000000', 'online_status_md5': 'a80cf6443eb8...5594184e21a1c', ...}
23.906 2708*              event.pyo(  70)    INFO: fire: &lt;imvu.account.UserAccount instance at 0x0254CFA8&gt; updateCreditBalances {'credits': '290335', 'predits': '0'}
23.922 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.authorizeProducts2({'auths': [['userId', 'productId'], [6441221, 2224850]], 'max_supported_format': 7, 'use_extracte..._if_available': 1}) returned [['userId', 'productId', 'cflChecksum', 'cflSize', 'cflUrl', 'usableDirect', ...], [6441221, 2224850, 'aac62da41fa7...6f42f951cd797', 1846, 'http://useri...ata/2224850/1', True, ...], [6441221, 115658, 'ef39f46f7bf9...4ca8e7c1f150b', 2126, 'http://useri...data/115658/8', True, ...]]
23.922 2480  _productauthorizer.pyo( 150) WARNING: gpa_onComplete: ([{'userId': 6441221, 'productId': 2224850}],), [{'info': '', 'cflChecksum': 'aac62da41fa7b816bb76f42f951cd797', 'cflSize': 1846, 'usableDirect': 1, 'userId': 6441221, 'trialTimeout': 40, 'usableDerivation': 1, 'autoAuth': False, 'cflUrl': 'http://userimages.imvu.com/productdata/2224850/1', 'usableTrial': 1, 'productId': 2224850}, {'info': '', 'cflChecksum': 'ef39f46f7bf977b0c924ca8e7c1f150b', 'cflSize': 2126, 'usableDirect': 1, 'userId': 6441221, 'trialTimeout': 40, 'usableDerivation': 1, 'autoAuth': False, 'cflUrl': 'http://userimages.imvu.com/productdata/115658/8', 'usableTrial': 1, 'productId': 115658}], None
23.922 2708*         buddystate.pyo( 166)    INFO: __buildNewBuddyState(): new_server_buddy_state: {'buddy_list_md5': '20e0c2b2c1c910350139d46e536cd514', 'wealth_predits': 0, 'online_status': '00000000000010000000010000001000000000000000000000000000100000000000000000000000000000000000000000000000000', 'buddy_list': {'fans': [151, 380, 93078, 116901, 1159488, 1778906, 3863168, 5289013, 6333638, 6747096, 7482359, 7893566, 8061036, 8557705, 8771689, 9050859, 9052127, 9436092, 9615622, 9959622, 10277656, 11211097, 11798700, 12054148, 12554734, 12770149, 13343920, 13479892, 13932901, 14018771, 14178550, 14201255, 14363528, 14366546, 15044208, 15108233, 15250927, 15403130, 15423886, 15469745, 15554150, 15572391, 15659166, 15768977, 15772065, 16014004, 16259492, 16834530, 17460983, 17470763, 17564394, 18151522, 18151523, 18152259, 18374527, 19058569, 19426592, 20470513, 20835534, 21197608, 22251270, 22283252, 22302760, 22947532, 23502459, 23891771, 24199021, 24640517, 25684447, 26031079, 26060203, 26412415, 26663325, 29276775, 29357900, 29565552, 29910945, 31007172, 31015480, 31232335, 31307897, 31325058, 31366861, 31773758, 32556138, 32954057, 33628277, 33786123, 33917741], 'friends': [105148, 116901, 1327500, 6430115, 6330421, 5289013, 14366546, 9959622, 14201255, 12054148, 6333638, 11798700, 13932901, 6747096, 8557705, 15250927, 8061036, 14018771, 9436092, 4031531, 15108233, 13540585, 13479892, 1778906, 15403130, 12554734, 14178550, 10277656, 15272731, 15423886, 13343920, 7482359, 16014004, 16259492, 16085236, 16158338, 15044208, 14585627, 17460983, 1159488, 15469745, 15554150, 15572391, 18151522, 380, 11211097, 14363528, 17470763, 17564394, 18151523, 18152259, 19058569, 2509432, 3863168, 9050859, 19426592, 20470513, 18374527, 20835534, 7893566, 3085754, 21197608, 93078, 23502459, 24640517, 22251270, 23891771, 24199021, 22283252, 22947532, 25684447, 22302760, 26663325, 26060203, 26031079, 18786589, 15659166, 8771689, 29910945, 29565552, 151, 29276775, 15768977, 29357900, 12770149, 26412415, 9052127, 16834530, 31325058, 31232335, 31366861, 31015480, 31007172, 15772065, 32556138, 9615622, 31773758], 'blocked': [39, 1327478, 7262687, 19574601, 28259937]}, 'poll_interval': 60, 'online_status_md5': 'a80cf6443eb829e93d55594184e21a1c', 'wealth_credits': 290335, 'recent_chats': [11503681, 29417514, 30601408, 30308480, 27113251, 28412064, 27592169, 27819845, 6221667, 28272119], 'recent_chats_online': '0000001000'}
23.984 3528  loggingserverproxy.pyo(  16)    INFO: --&gt; test.avatarInfoForIds([30601408, 11503681, 27113251, 27819845, 27592169, 29417514, ...])
24.125 2708*        buddywindow.pyo( 348)    INFO: Showing buddy window.
24.140 2708*          clientapp.pyo( 146)    INFO: applyProduct(): args: {'action': 'applyUiSkin'} product: &lt;pid: 2224850 hash: 39369648 uid: 6441221  type: u'UI Skin'&gt;
24.140 2708*          clientapp.pyo( 157)    INFO: No translation table, using default.
24.344 2708*          clientapp.pyo( 198)    INFO: No menu config table, using default.
24.359 2708*          clientapp.pyo( 227)    INFO: No url overrides table, using default.
24.359 2708*        buddywindow.pyo( 348)    INFO: Showing buddy window.
24.375 2708* xmlrpclib_multicall.pyo( 106)    INFO: --&gt; MultiCall test.setCustomerPref({'field': 'uiskin', 'userId': 6441221, 'value': 2224850})
24.437 3528  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 866 bytes of data
24.437 3528  loggingserverproxy.pyo(  18)    INFO: &lt;-- test.avatarInfoForIds([30601408, 11503681, 27113251, 27819845, 27592169, 29417514, ...]) returned [['userId', 'avatarName', 'isGuest', 'picUrl', 'age', 'gender', ...], [30601408, 'sexylala322', 0, 'http://useri...c11909854.jpg', 28, 'Female', ...], [11503681, 'Engine27', 0, 'http://useri...a7c3aa0cc.gif', 24, 'Male', ...], [27113251, 'BarraHavenDaron', 0, 'http://useri...ac242228e.png', 18, 'Female', ...], [27819845, 'princessofdarkness80', 0, 'http://useri...6fe8e3bf2.gif', 28, 'Female', ...], [27592169, 'XXXGrayWolfXXX', 0, 'http://useri...9775a2934.jpg', 49, 'Male', ...], ...]
24.453 2708*  avatarinfomanager.pyo(  34)    INFO: avatarInfoForIds returned [{'hasVIPPass': '0', 'hasAccessPass': '1', 'downlo
24.500 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 1 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/11503681_1850690866499da7c3aa0cc.gif'
24.515 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 2 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27113251_198415805449a4ac242228e.png'
24.531 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27819845_98234197349986fe8e3bf2.gif'
24.578 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/11503681_1850690866499da7c3aa0cc.gif
24.578 2708*         urlhandler.pyo(  71)    INFO: Starting request 1 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/11503681_1850690866499da7c3aa0cc.gif
24.578 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27113251_198415805449a4ac242228e.png
24.578 2708*         urlhandler.pyo(  71)    INFO: Starting request 2 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27113251_198415805449a4ac242228e.png
24.578 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27819845_98234197349986fe8e3bf2.gif
24.578 2708*         urlhandler.pyo(  71)    INFO: Starting request 3 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27819845_98234197349986fe8e3bf2.gif
24.578 2684  loggingserverproxy.pyo(  16)    INFO: --&gt; test.avatarInfoForIds([24640517, 22251270, 39, 22302760, 4031531, 5289013, ...])
24.875 2480  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 172 bytes of data
24.875 2480  xmlrpclib_multicall.pyo(  46)    INFO: &lt;-- MultiCall test.setCustomerPref({'field': 'uiskin', 'userId': 6441221, 'value': 2224850}) returned 1
25.875 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 1 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/11503681_1850690866499da7c3aa0cc.gif
25.875 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/11503681_1850690866499da7c3aa0cc.gif'
25.906 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/28412064_1631786386498935aea1479.jpg'
25.906 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/28412064_1631786386498935aea1479.jpg
25.906 2708*         urlhandler.pyo(  71)    INFO: Starting request 4 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/28412064_1631786386498935aea1479.jpg
25.922 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 2 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27113251_198415805449a4ac242228e.png
25.922 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27113251_198415805449a4ac242228e.png'
25.922 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6221667_13975095449b474d5d5df5.jpg'
25.937 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6221667_13975095449b474d5d5df5.jpg
25.937 2708*         urlhandler.pyo(  71)    INFO: Starting request 5 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6221667_13975095449b474d5d5df5.jpg
26.625 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 4 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/28412064_1631786386498935aea1479.jpg
26.625 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/28412064_1631786386498935aea1479.jpg'
26.640 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/30308480_13329709684984891e11813.jpg'
26.640 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/30308480_13329709684984891e11813.jpg
26.640 2708*         urlhandler.pyo(  71)    INFO: Starting request 6 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/30308480_13329709684984891e11813.jpg
27.203 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 5 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6221667_13975095449b474d5d5df5.jpg
27.203 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 3 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27819845_98234197349986fe8e3bf2.gif
27.203 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/6221667_13975095449b474d5d5df5.jpg'
27.203 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27592169_59330686849b49775a2934.jpg'
27.203 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27819845_98234197349986fe8e3bf2.gif'
27.219 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27592169_59330686849b49775a2934.jpg
27.219 2708*         urlhandler.pyo(  71)    INFO: Starting request 7 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27592169_59330686849b49775a2934.jpg
27.609 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 7 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27592169_59330686849b49775a2934.jpg
27.625 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 1 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/27592169_59330686849b49775a2934.jpg'
27.672 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 6 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/30308480_13329709684984891e11813.jpg
27.672 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 0 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/30308480_13329709684984891e11813.jpg'
27.812 2708*        weblistener.pyo(  54)    INFO: WebListener connected
27.812 2684  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 4745 bytes of data
27.969 2684  loggingserverproxy.pyo(  18)    INFO: &lt;-- test.avatarInfoForIds([24640517, 22251270, 39, 22302760, 4031531, 5289013, ...]) returned [['userId', 'avatarName', 'isGuest', 'picUrl', 'age', 'gender', ...], [24640517, 'Charer', 1, 'http://stati...7_679504.jpeg', 20, 'Female', ...], [22251270, 'cwbygarett', 1, 'http://stati...6_914322.jpeg', 14, 'Male', ...], [39, 'IMVU inc.', 0, 'http://useri...5884afd9e.jpg', 35, 'Female', ...], [22302760, 'YaWhatevers', 1, 'http://stati...0_914322.jpeg', 14, 'Male', ...], [4031531, 'serycka', 0, 'http://useri...5f87bec3e.gif', 38, 'Female', ...], ...]
27.969 2708*  avatarinfomanager.pyo(  34)    INFO: avatarInfoForIds returned [{'hasVIPPass': '0', 'hasAccessPass': '0', 'downlo
28.172 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 1 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/12770149_21031171649acdf0961afc.jpg'
28.344 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 2 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/8771689_28686228049abf2206dee0.gif'
28.422 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/33628277_72381632849a35540903fa.jpg'
29.875 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/12770149_21031171649acdf0961afc.jpg
29.875 2708*         urlhandler.pyo(  71)    INFO: Starting request 8 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/12770149_21031171649acdf0961afc.jpg
29.875 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/8771689_28686228049abf2206dee0.gif
29.875 2708*         urlhandler.pyo(  71)    INFO: Starting request 9 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/8771689_28686228049abf2206dee0.gif
29.875 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/33628277_72381632849a35540903fa.jpg
29.875 2708*         urlhandler.pyo(  71)    INFO: Starting request 10 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/33628277_72381632849a35540903fa.jpg
29.890 2684  loggingserverproxy.pyo(  16)    INFO: --&gt; test.avatarInfoForIds([16834530, 26031079, 14201255, 12554734, 15250927, 22283252, ...])
30.359 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 8 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/12770149_21031171649acdf0961afc.jpg
30.359 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/12770149_21031171649acdf0961afc.jpg'
30.375 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15768977_23890732249ac6eeb5fa20.jpg'
30.375 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15768977_23890732249ac6eeb5fa20.jpg
30.375 2708*         urlhandler.pyo(  71)    INFO: Starting request 11 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15768977_23890732249ac6eeb5fa20.jpg
30.625 2684  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 701 bytes of data
30.625 2684  loggingserverproxy.pyo(  18)    INFO: &lt;-- test.avatarInfoForIds([16834530, 26031079, 14201255, 12554734, 15250927, 22283252, ...]) returned [['userId', 'avatarName', 'isGuest', 'picUrl', 'age', 'gender', ...], [16834530, 'lilsexybitch16', 1, 'http://useri...be5278e8b.png', 17, 'Female', ...], [26031079, 'needluv247', 1, 'http://useri...4c1927afa.jpg', 15, 'Female', ...], [14201255, 'DANHIA01', 1, 'http://useri...59bca7d3b.jpg', 27, 'Female', ...], [12554734, 'loveablemelove', 1, 'http://useri...728ef07bf.jpg', 23, 'Female', ...], [15250927, 'Teeyj', 1, 'http://useri...be293da42.jpg', 19, 'Male', ...], ...]
30.640 2708*  avatarinfomanager.pyo(  34)    INFO: avatarInfoForIds returned [{'hasVIPPass': '0', 'hasAccessPass': '0', 'downlo
30.828 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 10 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/33628277_72381632849a35540903fa.jpg
30.828 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/33628277_72381632849a35540903fa.jpg'
30.844 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/93078_1832472007498d21b637fea.png'
30.844 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/93078_1832472007498d21b637fea.png
30.844 2708*         urlhandler.pyo(  71)    INFO: Starting request 12 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/93078_1832472007498d21b637fea.png
31.094 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 9 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/8771689_28686228049abf2206dee0.gif
31.094 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/8771689_28686228049abf2206dee0.gif'
31.109 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/26412415_155461929949878a8c472ec.jpg'
31.109 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/26412415_155461929949878a8c472ec.jpg
31.109 2708*         urlhandler.pyo(  71)    INFO: Starting request 13 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/26412415_155461929949878a8c472ec.jpg
31.250 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 11 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15768977_23890732249ac6eeb5fa20.jpg
31.250 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15768977_23890732249ac6eeb5fa20.jpg'
31.265 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15572391_995621908499b62b074c2d.jpg'
31.265 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15572391_995621908499b62b074c2d.jpg
31.265 2708*         urlhandler.pyo(  71)    INFO: Starting request 14 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15572391_995621908499b62b074c2d.jpg
31.594 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 13 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/26412415_155461929949878a8c472ec.jpg
31.594 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/26412415_155461929949878a8c472ec.jpg'
31.609 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/29357900_1321531579499349d037f6e.jpg'
31.609 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/29357900_1321531579499349d037f6e.jpg
31.609 2708*         urlhandler.pyo(  71)    INFO: Starting request 15 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/29357900_1321531579499349d037f6e.jpg
32.062 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 14 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15572391_995621908499b62b074c2d.jpg
32.062 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15572391_995621908499b62b074c2d.jpg'
32.078 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31773758_38911950749628dd4acbcb.png'
32.078 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31773758_38911950749628dd4acbcb.png
32.078 2708*         urlhandler.pyo(  71)    INFO: Starting request 16 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31773758_38911950749628dd4acbcb.png
32.297 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 12 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/93078_1832472007498d21b637fea.png
32.297 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/93078_1832472007498d21b637fea.png'
32.297 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31325058_835422259498dd397f3da2.png'
32.297 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31325058_835422259498dd397f3da2.png
32.297 2708*         urlhandler.pyo(  71)    INFO: Starting request 17 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31325058_835422259498dd397f3da2.png
32.484 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 15 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/29357900_1321531579499349d037f6e.jpg
32.484 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/29357900_1321531579499349d037f6e.jpg'
32.500 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/9615622_61762254549b2c56700a0a.png'
32.500 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/9615622_61762254549b2c56700a0a.png
32.500 2708*         urlhandler.pyo(  71)    INFO: Starting request 18 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/9615622_61762254549b2c56700a0a.png
33.562 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 16 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31773758_38911950749628dd4acbcb.png
33.562 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31773758_38911950749628dd4acbcb.png'
33.578 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/16834530_144595274049a9be5278e8b.png'
33.578 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/16834530_144595274049a9be5278e8b.png
33.578 2708*         urlhandler.pyo(  71)    INFO: Starting request 19 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/16834530_144595274049a9be5278e8b.png
33.890 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 17 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31325058_835422259498dd397f3da2.png
33.890 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/31325058_835422259498dd397f3da2.png'
33.906 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15659166_20925829744978017d9d940.png'
33.906 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15659166_20925829744978017d9d940.png
33.906 2708*         urlhandler.pyo(  71)    INFO: Starting request 20 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/15659166_20925829744978017d9d940.png
34.828 2708*         urlhandler.pyo(  65)    INFO: Finished downloading request 18 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/9615622_61762254549b2c56700a0a.png
34.828 2708*            account.pyo( 816)    INFO: avPicForUrl(): avPicRequestCount: 2 completed pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/9615622_61762254549b2c56700a0a.png'
34.844 2708*            account.pyo( 841)    INFO: avPicForUrl(): avPicRequestCount: 3 requesting download pic_url: 'http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/13343920_1785225046497218e583d5c.jpg'
34.844 2708*         urlhandler.pyo(  50)    INFO: Requesting URL http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/13343920_1785225046497218e583d5c.jpg
34.844 2708*         urlhandler.pyo(  71)    INFO: Starting request 21 http://userimages.imvu.com/catalog/includes/modules/phpbb2/images/avatars/13343920_1785225046497218e583d5c.jpg
37.125 2832           bugreport.pyo( 627)   ERROR: Error caught in main
None
37.125 2832           bugreport.pyo( 302)    INFO: result: ['Traceback (most recent call last)', 'File "main\\clientapp.pyo", line 2275, in runClientApp', 'File "main\\clientapp.pyo", line 2217, in runMainLoop', 'File "main\\clientapp.pyo", line 2207, in _runMainLoop', 'File "main\\clientapp.pyo", line 2003, in step', 'File "main\\clientapp.pyo", line 2040, in __profiledStep', 'File "main\\clientapp.pyo", line 1399, in __step', 'File "main\\buddywindow.pyo", line 343, in step', 'File "main\\buddywindow.pyo", line 754, in __processEvents', 'File "main\\buddywindow.pyo", line 763, in __processEvent', 'File "main\\buddywindow.pyo", line 125, in &lt;lambda&gt;', 'File "main\\menu.pyo", line 241, in dispatchCommand', 'StructuredException', 'boost_python#3ace214f1fa349e78f20de38e87ce06a1', '000128c0', '_avatarwindow#e42cf009f3e84e20853059644879c43b1', '0001fcaf', '_avatarwindow#e42cf009f3e84e20853059644879c43b1', '0001f1f7', 'boost_python#3ace214f1fa349e78f20de38e87ce06a1', '00012bd7', 'boost_python#3ace214f1fa349e78f20de38e87ce06a1', '0000cf07', 'boost_python#3ace214f1fa349e78f20de38e87ce06a1', '0000cd72', '_avatarwindow#e42cf009f3e84e20853059644879c43b1', '0001903a', '', '']
37.125 2832           bugreport.pyo( 630)    INFO: bugkey: 'd81d24b8'
37.125 2832             account.pyo( 317)    INFO: notifyClientSessionEvent(): blocking: True event: {'event_type': 'session_crash', 'bugkey': 'd81d24b8'}
37.515 2832  xmlrpclib_transport.pyo( 304)    INFO: XMLRPC starting to receive 172 bytes of data</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2009-03-09 01:35:54</wp:post_date>
		<wp:post_date_gmt>2009-03-09 09:35:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-imvu-crash-log</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>246</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment for Downloadable Client Software &laquo; Timothy Fitz]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://timothyfitz.wordpress.com/2009/03/09/cd-for-client-software/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.96.149</wp:comment_author_IP>
			<wp:comment_date>2009-03-09 03:38:15</wp:comment_date>
			<wp:comment_date_gmt>2009-03-09 11:38:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] signal to noise chunk of information from the client&#8217;s crashed state. I&#8217;ve posted a sample crash report, though it was synthetically created by a crash-test. I hope no one notices my desktop is a 1.86ghz [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>619</wp:comment_id>
			<wp:comment_author><![CDATA[Continuous Deployment for Downloadable Client Software | Ed Roman Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://leanstartups.wpengine.com/continuous-deployment-for-downloadable-client-software/</wp:comment_author_url>
			<wp:comment_author_IP>199.47.222.144</wp:comment_author_IP>
			<wp:comment_date>2011-05-01 18:52:59</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 02:52:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] get a high signal to noise chunk of information from the client’s crashed state. I’ve posted a sample crash report, though it was synthetically created by a crash-test. I hope no one notices my desktop is a 1.86ghz [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1304304781]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304304781.7641";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Bug Report Screenshot</title>
		<link>http://timothyfitz.wordpress.com/2009/03/09/cd-for-client-software/bug-report-ss/</link>
		<pubDate>Mon, 09 Mar 2009 10:45:04 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/03/bug-report-ss.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[A screenshot of our aggregate bug report data]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2009-03-09 02:45:04</wp:post_date>
		<wp:post_date_gmt>2009-03-09 10:45:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bug-report-ss</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>108</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/03/bug-report-ss.png</wp:attachment_url>
	</item>
	<item>
		<title>Deadlocks</title>
		<link>http://timothyfitz.wordpress.com/2009/03/09/cd-for-client-software/deadlocks/</link>
		<pubDate>Mon, 09 Mar 2009 10:58:39 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.files.wordpress.com/2009/03/deadlocks.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Deadlocks or stalls, measured in millistalls (thanks nonsensical Cacti defaults)]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2009-03-09 02:58:39</wp:post_date>
		<wp:post_date_gmt>2009-03-09 10:58:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>deadlocks</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>108</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://timothyfitz.files.wordpress.com/2009/03/deadlocks.png</wp:attachment_url>
	</item>
	<item>
		<title>test</title>
		<link>http://timothyfitz.wordpress.com/?p=123</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[it worked?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2010-11-01 10:43:41</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>pending</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password>test</wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cloud Elasticity</title>
		<link>http://timothyfitz.wordpress.com/2009/02/14/cloud-elasticity/</link>
		<pubDate>Sat, 14 Feb 2009 09:24:23 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Abstract</strong>

It's time to take advantage of the cloud's free parallelism. Most existing use cases merely map existing techniques to the cloud. Elasticity is a critical mesaurement: the time it takes to start a node up, and your minimum time commitment per node. Short lived but massively parallel tasks that were once impossible thrive in a highly elastic world. Big prediction: Clouds are going to get more elastic indefinitely; they'll trend with Moore's law.

<strong>Cloud Elasticity</strong>

It's time to take advantage of the cloud's free parallelism. Lot's of infrastructure has moved off to the cloud, but it's being done so naively. The storie seem to fall into three categories: "I'm serving my wordpress on an ec2 instance.",  "we used a few machines to OCR a bunch of pdfs." and  "When it came time to add capacity, we just clicked a button." These use cases are all things you would do if you bought hardware, but are easier because of cloud computing.

Let's try a scenario where we're going to push public clouds to their breaking point. We want to run our test suite, which takes four hours, as fast as possible. How fast is that today? For this example, let's assume EC2 nodes always take exactly one minute to start (a fair estimate of reality). Let's also assume test setup is another minute, flat. We can spawn four nodes and have all of the tests done in one hour and two minutes. We can spawn forty nodes and have the tests done in eight (4 * 60 / 40 + 2) minutes. We can spawn four hundred nodes and have the tests done in 2:36. That's not just fast, that's fast enough to change the rules around when you run tests. That's fast enough to change the nature of software development.

Sadly this scenario isn't realistic today, because there are two important measures of cloud elasticity: spin-up elasticity and spin-down elasticity. Spin-up elasticity is the time between requesting compute power and recieving it. Spin-down elasticity is the time between no longer requiring compute power and no longer paying for it. In the case of EC2 these numbers aren't balanced, it's a minute to spin up and up to an hour to spin down. EC2's true elasticity is an hour!

Which is a shame, because what really interests me are the services pushing the edges of elasticity. Services that can <em>only</em> exist in a world where computing power blinks in and out of existence. Services that offer to spread your <a href="http://saucelabs.com/">workload</a> as widely as technologically possible. Services that take your long running tasks and give you results immediately, at minimal extra cost.

So here's my big prediction:

Thanks to computing power's exponential growth, cloud computing's elasticity will exponential decay; we'll see a 1/2 reduction in spin-up and spin-down time every year and a half.

For a while this elasticity will go towards making offline tasks faster. Tasks like compressing large amounts of video will at most take about as long as the elasticity times. Cool stuff, but not very novel uses. It's when the elasticity starts to approach the "off line" vs "on line" threshold that things get crazy. What if it's only a second to spin a machine up or down? We can start to have machine per web request, or machine per social interaction (IM, tweet or hug).

What happens when we have 5 second elasticity? (About as long as a user will wait for a UI interaction to complete without multitasking)

What happens when we have 15 millisecond elasticity? (About as fast as your eyes can refresh)

I don't pretend to know what the next big revolution in computing is going to be; but I'll sure as hell be watching the services pushing cloud elasticity to it's edges. If there is a revolution to be had in cloud computing, that's where it'll start.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2009-02-14 01:24:23</wp:post_date>
		<wp:post_date_gmt>2009-02-14 09:24:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cloud-elasticity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>183</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Thompson]]></wp:comment_author>
			<wp:comment_author_email>chris@cthompson.com</wp:comment_author_email>
			<wp:comment_author_url>http://cthompson.com</wp:comment_author_url>
			<wp:comment_author_IP>65.26.158.162</wp:comment_author_IP>
			<wp:comment_date>2009-02-17 08:01:08</wp:comment_date>
			<wp:comment_date_gmt>2009-02-17 16:01:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The only fault I find with your reasoning is that if you spawn off 400 EC2 slices, you're likely to end up with many on the same physical machine.

I have no idea how the VT-x style xen virtualization scales when two slices are both at top load. It would be significantly faster than a single slice, no doubt. But not 400x faster.

That said, your concept is solid. Using your 400x faster numbers, firing off 400 EC2 instances will cost you a minimum of $40. With per minute billing your 2:56 is less than $2.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[Chad]]></wp:comment_author>
			<wp:comment_author_email>caustin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.92.9.164</wp:comment_author_IP>
			<wp:comment_date>2009-02-15 10:53:23</wp:comment_date>
			<wp:comment_date_gmt>2009-02-15 18:53:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think Moore's law only applies to throughput, not latency, so I'm skeptical that the reduction in spin-up and spin-down latency will track it...  but I'm willing to wait and see.  :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[Eric Florenzano]]></wp:comment_author>
			<wp:comment_author_email>floguy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.eflorenzano.com/</wp:comment_author_url>
			<wp:comment_author_IP>24.130.142.231</wp:comment_author_IP>
			<wp:comment_date>2009-02-16 00:57:49</wp:comment_date>
			<wp:comment_date_gmt>2009-02-16 08:57:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is my favorite post that you've made so far.  I've actually been thinking about this very thing, recently, and have come to very similar conclusions.

P.S. Are you feeling the post-a-day burn yet? :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>189</wp:comment_id>
			<wp:comment_author><![CDATA[Dan]]></wp:comment_author>
			<wp:comment_author_email>dan@devver.net</wp:comment_author_email>
			<wp:comment_author_url>http://devver.net/blog</wp:comment_author_url>
			<wp:comment_author_IP>24.8.189.130</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 12:45:54</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 20:45:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very cool write up, we are actually working on distributed testing on EC2 at devver.net. The spin up and down time is unfortunate. Our plane for that is to keep a bunch of instances up, but when they are not busy running your companies test suite, they will be busy running another companies test suite. This takes out the 1 minute bootup time. As for the test setup, we can reduce part of that as well, but some of the setup has to be redone ever time the test suite is run, so it can't be entirely eliminated.

There are some additional costs of overhead when you distribute everything and deal with all the file distribution so you don't see a Node X speedup, but it has still been an impressive speedup.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[Jesse Andrews]]></wp:comment_author>
			<wp:comment_author_email>anotherjesse@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://overstimulate.com</wp:comment_author_url>
			<wp:comment_author_IP>99.186.41.90</wp:comment_author_IP>
			<wp:comment_date>2009-02-21 02:37:43</wp:comment_date>
			<wp:comment_date_gmt>2009-02-21 10:37:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with the costs of spin up/down will continue to decrease, along with the ability to say "I want 1/10 of a cpu all the time" for a penny an hour.

My question is: isn't $40 per hour (eg, less than the cost of one engineer) worth it to get the answer in 2 minutes instead of 4 hours?   Perhaps $20 per hour is?  (the cost of an intern to know the status of your system within 4?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>516</wp:comment_id>
			<wp:comment_author><![CDATA[Iswarya]]></wp:comment_author>
			<wp:comment_author_email>iswarya.cdac@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>218.248.25.99</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 03:24:51</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 11:24:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anybody can tell me the General concepts of Cloud Elasticity in terms of load balancing.I need to know about that.If need to implement that in our Cloud Environment.Kindly Guide me to do that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1286537091]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>518</wp:comment_id>
			<wp:comment_author><![CDATA[Iswarya]]></wp:comment_author>
			<wp:comment_author_email>iswarya.cdac@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>218.248.25.99</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 03:27:18</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 11:27:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anybody can tell me about the General concepts of Cloud Elasticity- in terms of load balancing.I need to know about that and  i have to implement in my Cloud Environment.Kindly Guide me to do that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1286537238]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>517</wp:comment_id>
			<wp:comment_author><![CDATA[Iswarya]]></wp:comment_author>
			<wp:comment_author_email>iswarya.cdac@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>218.248.25.99</wp:comment_author_IP>
			<wp:comment_date>2010-10-08 03:25:44</wp:comment_date>
			<wp:comment_date_gmt>2010-10-08 11:25:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anybody can tell me the General concepts of Cloud Elasticity in terms of load balancing.I need to know about that  in my Cloud Environment.Kindly Guide me to do that.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1286537145]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>534</wp:comment_id>
			<wp:comment_author><![CDATA[What is &#8220;the cloud&#8221;? &laquo; wowedbycloud]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://wowedbycloud.wordpress.com/2010/11/10/what-is-the-cloud/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.241</wp:comment_author_IP>
			<wp:comment_date>2010-11-10 05:47:35</wp:comment_date>
			<wp:comment_date_gmt>2010-11-10 13:47:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] or little of it you consume, it’s not cloud computing. What differentiates cloud computing is its elasticity and your ability to match the cost of the service to your consumption. This distinction is critical [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1289396857]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>437</wp:comment_id>
			<wp:comment_author><![CDATA[What is Old Is New Again - The Cloud | LifeFormulae Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.lifeformulae.com/2010/05/what-is-old-is-new-again-the-cloud/</wp:comment_author_url>
			<wp:comment_author_IP>74.86.206.92</wp:comment_author_IP>
			<wp:comment_date>2010-05-21 12:44:17</wp:comment_date>
			<wp:comment_date_gmt>2010-05-21 20:44:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the “elastic” cloud. For thoughts on “spin up” and “spin down” elasticity see http://timothyfitz.wordpress.com/2009/02/14/cloud-elasticity/. For thoughts on “how elasticity could make you go broke, or On-demand IT overspending” see [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>What is Agile, really?</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/what-is-agile-really/</link>
		<pubDate>Tue, 17 Feb 2009 09:27:06 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>I'm tired of reading misinformation about Agile. I'm tired of reading statements like these, that are <strong>just <em>outright wrong</em>:</strong></h2>
Agile means writing software without writing documentation.
Agile means not caring about the long term.
Agile means engineers get to decide the project's features.
Agile means not having strict practices.
<h2>And worse still are the <strong><em>half truths</em></strong> where Agile is confused for a specific practice of some Agile developers, statements like:</h2>
Agile means pairing.
Agile means Test Driven Development.
Agile means scrum.
<h2><strong>So what is agile really?</strong></h2>
<strong>Agile is writing software in teams that regularly reflect on how to become more effective, and trusting that team to adjust its behavior accordingly.</strong>

This is the core of agile, synthesized from Principles behind the Agile Manifesto. It's about people. It's about trust. It's about continual improvement. This is where most implementations of Agile falter: they fail to trust the team. If you can't build a team you trust to improve themselves; fire yourself. Replace yourself with someone that can.

That's it. That is all you need to know about Agile. With this core, the team will re-evolve the major practices of Agile, but in the team's context. Take "ship early, ship often" for example. This principle would quickly get re-derived, as the team's regular reflections would be blocked on the same problem: they don't know if they're doing well or not. A quick root cause analysis would show that they don't know how they're doing until they've shipped real value to real customers. <strong>The rest of the principles can be re-derived in a similar manor.</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2009-02-17 01:27:06</wp:post_date>
		<wp:post_date_gmt>2009-02-17 09:27:06</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-agile-really</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[joblivious]]></wp:comment_author>
			<wp:comment_author_email>jmathes@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.81.58.65</wp:comment_author_IP>
			<wp:comment_date>2009-02-17 02:01:50</wp:comment_date>
			<wp:comment_date_gmt>2009-02-17 10:01:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[well put]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6736880</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[agileconsultant]]></wp:comment_author>
			<wp:comment_author_email>agileconsultant@mumbly.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.71.19.202</wp:comment_author_IP>
			<wp:comment_date>2009-02-19 05:15:36</wp:comment_date>
			<wp:comment_date_gmt>2009-02-19 13:15:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with your account of Agile, I think the problem is that this account only makes sense to developers.  One of the problems with Agile is that it tries to either ignore or dispense with business level accounts of what is going on.  

"Ship early, ship often" makes sense in a continuous integration environment - it <em>should</em> make sense to developers, team leaders and project managers, but to business people it sounds terrifying "You mean we're going to launch every day - do you know how much effort goes into a launch?"  The disquiet comes from nobody bothering to address their concerns and speak their language.  One thing that comes out of understanding this is that agile training might help both <a href="http://www.agile-lab.co.uk/2008/12/introduction-to-agile-training-course.html" rel="nofollow">developers</a> (who need to learn to talk to senior management and clients) and <a href="http://www.agile-lab.co.uk/2009/02/two-day-digital-project-management.html" rel="nofollow">clients and senior managers</a>(who need to learn how to remain calm when talking to developers).  But I don't think you can really get anywhere without finding truly remarkable project managers who can speak both business and technology.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6904313</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>250</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Anderson]]></wp:comment_author>
			<wp:comment_author_email>thomasjeffreyandersontwin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://agileconsulting.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>72.28.80.14</wp:comment_author_IP>
			<wp:comment_date>2009-03-09 15:51:58</wp:comment_date>
			<wp:comment_date_gmt>2009-03-09 23:51:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[let's try that again...
<a href='http://agileconsulting.blogspot.com/2009/01/agile-over-rup-my-preferred-development.html' rel="nofollow"> agile principles and practices</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[Jeff Anderson]]></wp:comment_author>
			<wp:comment_author_email>thomasjeffreyandersontwin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://agileconsulting.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>72.28.80.14</wp:comment_author_IP>
			<wp:comment_date>2009-03-09 15:51:02</wp:comment_date>
			<wp:comment_date_gmt>2009-03-09 23:51:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[good post,

in short, agile is really about &lt;a href='<a href='http://agileconsulting.blogspot.com/2009/01/agile-over-rup-my-preferred-development.html' rel="nofollow"></a>'&gt; a set of principles and supporting best practices</a>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>262</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Cottmeyer]]></wp:comment_author>
			<wp:comment_author_email>mike@cottmeyer.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.leadingagile.com</wp:comment_author_url>
			<wp:comment_author_IP>70.158.249.110</wp:comment_author_IP>
			<wp:comment_date>2009-03-12 06:32:15</wp:comment_date>
			<wp:comment_date_gmt>2009-03-12 14:32:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Trust and continuous improvement are part of it, but not the whole thing.  

You could make the case that is about sustainability, respect, or craftsmanship.  You could make the case that it is about predictability or risk mitigation.  You could make the case that agile is about responding to change.  Getting real... getting transparent... and that reality and transparency are a two way street. You could make the case that the practices are derived from the principles but are in some ways inseparable. 

I appreciate the point you are making, but like agileconsultant said... it comes off like trust me and I'll write you some good code.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>263</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Boos]]></wp:comment_author>
			<wp:comment_author_email>paul.boos@wdc.usda.gov</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>199.159.117.69</wp:comment_author_IP>
			<wp:comment_date>2009-03-12 10:35:29</wp:comment_date>
			<wp:comment_date_gmt>2009-03-12 18:35:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think your statement summing up the Agile Manifesto's core statements infers a little much; it loses the meaning of the four statements.  I am not saying your statement is wrong, just incomplete.  I think the reason it is four statements is simply to make them memorable and because each one is a distinct pillar of the Agile Acroplis (feel free to us that if you like).  The principles can certainly be derived from the pillars, but not teh other way around.  The principles truly help guide the practices that are used.

BTW, I loved the opening on what Agile doesn't mean and teh half-truths!

Paul]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>324</wp:comment_id>
			<wp:comment_author><![CDATA[PM Hut]]></wp:comment_author>
			<wp:comment_author_email>pmhut@itoctopus.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.pmhut.com</wp:comment_author_url>
			<wp:comment_author_IP>76.66.196.243</wp:comment_author_IP>
			<wp:comment_date>2009-09-22 06:53:13</wp:comment_date>
			<wp:comment_date_gmt>2009-09-22 14:53:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What you're saying rhymes well with one the Agile articles I've recently published on the <a href="http://www.pmhut.com/the-degradation-of-agile-project-management" rel="nofollow">degradation of agile</a>.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>310</wp:comment_id>
			<wp:comment_author><![CDATA[Desinformación y Verdades a Medias de Metodologías Ágiles &laquo; Crónicas de un Arquitecto de Software]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://dsolis.wordpress.com/2009/07/04/desinformacion-y-verdades-a-medias-de-metodologias-agiles/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.245.189</wp:comment_author_IP>
			<wp:comment_date>2009-07-04 04:44:08</wp:comment_date>
			<wp:comment_date_gmt>2009-07-04 12:44:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Desinformación y Verdades a Medias de Metodologías&nbsp;Ágiles  Timothy Fitz escribe en su blog una nota acerca de la definición real de una metodología ágil. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>925</wp:comment_id>
			<wp:comment_author><![CDATA[Against misunderstandig Agile &laquo; ggreiter]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ggreiter.wordpress.com/2012/01/23/against-misunderstandig-agile/</wp:comment_author_url>
			<wp:comment_author_IP>74.200.244.96</wp:comment_author_IP>
			<wp:comment_date>2012-01-23 08:58:51</wp:comment_date>
			<wp:comment_date_gmt>2012-01-23 16:58:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] We are tired about reading misinformation about Agile, [...]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327337931.6862";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>8 books to kickstart your adoption of Lean Software Development</title>
		<link>http://timothyfitz.wordpress.com/2009/02/17/8-books-to-kickstart/</link>
		<pubDate>Wed, 18 Feb 2009 07:27:55 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321150783?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321150783"><img class="size-full wp-image-83 aligncenter" title="Lean Software Development" src="http://timothyfitz.files.wordpress.com/2009/02/5187m7bb52l_sl160_.jpg" alt="5187m7bb52l_sl160_" width="121" height="160" /></a></p>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321150783?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321150783">Lean Software Development</a></p>
<p style="text-align:justify;">This is the book you must absolutely read. It covers succinctly the basic principles of Lean Software, and directly how to implement them. It identifies and covers in depth seven fundamental lean principles: Eliminate Waste, Amplify Learning, Decide as Late as Possible, Deliver as Fast as Possible, Empower the Team, Build Integrity In and Seeing The Whole.</p>

<blockquote>"Lean Software Development helps you refocus development on value, flow and people- so you can achieve breakthrough quality, savings, speed and business alignment."</blockquote>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321437381?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321437381"><img class="size-full wp-image-82 aligncenter" title="Implementing Lean Software Development" src="http://timothyfitz.files.wordpress.com/2009/02/51crrteaezl_sl160_.jpg" alt="Implementing Lean Software Development" width="121" height="160" /></a></p>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321437381?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321437381">Implementing Lean Software Development</a></p>
<p style="text-align:justify;">Effectively Lean Software Development Volume 2. This book picks up where the last one left off. It adds depth, clarity and a breadth of examples.</p>

<blockquote>"You'll discover the right questions to ask, the key issues to focus on, and techniques proven to work."</blockquote>
Bonus Points: The author, Mary Poppendieck, gave a google tech talk: <a href="http://video.google.com/videoplay?docid=-5105910452864283694">Competing on the Basis of Speed</a>
<blockquote>One hour of solid gold." - AgileGameDevelopment.com</blockquote>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0743249275?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0743249275"><img class="aligncenter size-full wp-image-81" title="Lean Thinking" src="http://timothyfitz.files.wordpress.com/2009/02/51hes69h5fl_sl160_.jpg" alt="Lean Thinking" width="105" height="160" /></a></p>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0743249275?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0743249275">Lean Thinking : Banish Waste and Create Wealth in Your Corporation</a></p>
<p style="text-align:justify;">While not being explicitly about software, this is the book where I finally grokked Lean Software. The analogies to Software are obvious, and this book taught me more about making the transition to lean processes than any other book on this list. It's full of case studies about the exact steps companies used to transition from batch (waterfall) processes into Lean processes.</p>

<blockquote>"In contrast with the crash and burn performance of companies trumpeted by business gurus in the 1990s, the firms profiled in Lean Thinking - from tiny Lantech to mid-sized Wiremold to niche producer Porsche to gigantic Pratt &amp; Whitney - have prospered, largely unnoticed, along a steady upward path through the market turbulence of the nineties. Meanwhile Toyota has set its sights on the leadership of the global motor industry."</blockquote>
<a href="http://www.amazon.com/gp/product/0915299143?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0915299143"><img class="aligncenter size-full wp-image-80" title="Toyota Production System" src="http://timothyfitz.files.wordpress.com/2009/02/41dfqw77a5l_sl160_.jpg" alt="Toyota Production System" width="107" height="160" /></a>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0915299143?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0915299143">Toyota Production System: Beyond Large-Scale Production</a></p>
<p style="text-align:justify;">This was the book that introduced the world to Lean, before it was called Lean. Not only does it introduce the theory in abstract, it also gives detailed explanations for some of the practices in Lean Software. The best example of this is the Five Whys root cause analysis; you simply state the failure or defect, and then ask why five times over. This ensures that you don't solve a low level symptom of a higher level problem, when you could solve the higher level problem; thus dissolving the low level symptom.</p>

<blockquote>"The most important objective of the Toyota system has been to increase production efficiency by consistently and thoroughly eliminating waste."</blockquote>
<a href="http://www.amazon.com/gp/product/0884271781?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0884271781"><img class="aligncenter size-full wp-image-79" title="The Goal: A Process of Ongoing Improvement" src="http://timothyfitz.files.wordpress.com/2009/02/51w2nxjaxhl_sl160_.jpg" alt="The Goal: A Process of Ongoing Improvement" width="109" height="160" /></a>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0884271781?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0884271781">The Goal: A Process of Ongoing Improvement</a></p>
<p style="text-align:justify;">A truly unique narrative about a fictional manufacturing plant. This book explains the Theory of Constraints, a theory which fits into the Lean mindset perfectly. A fascinating example of how to use a book to teach via the Socratic method. A quick read, so it's high ROI!</p>

<blockquote>"It's about people trying to understand what makes their world tick so that they can make it better."</blockquote>
<a href="http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0131177052"><img class="aligncenter size-full wp-image-78" title="Working Effectively with Legacy Code" src="http://timothyfitz.files.wordpress.com/2009/02/51rcxgpxq8l_sl160_.jpg" alt="Working Effectively with Legacy Code" width="121" height="160" /></a>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0131177052?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0131177052">Working Effectively with Legacy Code</a></p>
<p style="text-align:justify;"><strong>Forget the title.</strong> <strong>PLEASE.</strong> Terrible title. Commonly referred to as just "Working Effectively. The first pages of the book redefine "Legacy" to mean "Code without tests." This book is about taking existing code that has no tests, and incrementally adding test coverage, all the while delivering value to customers. This is how you solve the "This code is crap" problem without going through the full rewrite song/dance/failure.</p>

<blockquote>"Is your code easy to change? Can you get nearly instantaneous feedback when you do change it? Do you understand it? If the answer to any of these questions is no, you have legace code, and it is draining time and money away from your development efforts."</blockquote>
<a href="http://www.amazon.com/gp/product/0321146530?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321146530"><img class="aligncenter size-full wp-image-77" title="Test-Driven Development" src="http://timothyfitz.files.wordpress.com/2009/02/513pzwjdh7l_sl160_.jpg" alt="Test-Driven Development" width="128" height="160" /></a>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321146530?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321146530">Test Driven Development</a></p>
<p style="text-align:justify;">TDD is practically a requirement for keeping up development velocity, a fundamental requirement of Lean Software. This is the classic TDD book. Unfortunately it's not the best introduction, because it appears deceptively obvious until you actually get Test Driven Development. If you're already practicing and have bought into TDD then read this book to really hone your skills and intuition.</p>

<blockquote>"By driving development with automated tests and then eliminating duplication, any developer can write reliable, bug-free code no matter what its level of complexity. Moreover, TDD encourages programmers to learn quickly, communicate more clearly, and seek out constructive feedback."</blockquote>
<a href="http://www.amazon.com/gp/product/0321278658?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321278658"><img class="aligncenter size-full wp-image-76" title="Extreme Programming Explained" src="http://timothyfitz.files.wordpress.com/2009/02/51qxx561dil_sl160_.jpg" alt="Extreme Programming Explained" width="127" height="160" /></a>
<p style="text-align:center;"><a href="http://www.amazon.com/gp/product/0321278658?ie=UTF8&amp;tag=timofitz-20&amp;link_code=as3&amp;camp=211189&amp;creative=373489&amp;creativeASIN=0321278658">XP Explained</a></p>
<p style="text-align:justify;">This book lays out the fundamentals of Agile Software Development, which is effectively a subset of Lean Software Development. This is walk-before-you-run territory: if agile is still a foreign concept, start here instead of Lean Software.</p>

<blockquote>"Every team can improve. Every team can begin improving today. Improvement is possible- beyond what we can currently imagine. Extreme Programming Explained, Second Edition, offers ideas to fuel your improvement for years to come."</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2009-02-17 23:27:55</wp:post_date>
		<wp:post_date_gmt>2009-02-18 07:27:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>8-books-to-kickstart</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>185</wp:comment_id>
			<wp:comment_author><![CDATA[Ben McGraw]]></wp:comment_author>
			<wp:comment_author_email>mcgrue@verge-rpg.com</wp:comment_author_email>
			<wp:comment_author_url>http://egometry.com</wp:comment_author_url>
			<wp:comment_author_IP>64.81.64.34</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 01:17:02</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 09:17:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Do you own all of these?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>186</wp:comment_id>
			<wp:comment_author><![CDATA[Nivi]]></wp:comment_author>
			<wp:comment_author_email>nivi@alum.mit.edu</wp:comment_author_email>
			<wp:comment_author_url>http://venturehacks.com</wp:comment_author_url>
			<wp:comment_author_IP>24.130.32.130</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 01:44:53</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 09:44:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I always recommend Extreme Programming Explained, 1st Edition as the starting point for learning about lean. 

On another note, when this book comes out, it is going to blow your mind: http://bit.ly/xnzi. It unfortunately makes the rest of the books on this list look like they were written by children. It is very challenging — in a good way.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>187</wp:comment_id>
			<wp:comment_author><![CDATA[timothyfitz]]></wp:comment_author>
			<wp:comment_author_email>TimothyFitz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>70.7.28.19</wp:comment_author_IP>
			<wp:comment_date>2009-02-18 08:09:08</wp:comment_date>
			<wp:comment_date_gmt>2009-02-18 16:09:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ben McGraw: Of course! Ping me if you want to borrow any of them.

Nivi: Oooh. Impressed that the only book in "Customers Who Bought This Item Also Bought" is 4 steps to the epiphany (which really should be on this list). Definitely going to get The Principles of Product Development Flow when it's out.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6738078</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Continuous Deployment for Downloadable Client Software</title>
		<link>http://timothyfitz.wordpress.com/2009/03/09/cd-for-client-software/</link>
		<pubDate>Mon, 09 Mar 2009 11:37:52 +0000</pubDate>
		<dc:creator>timothyfitz</dc:creator>
		<guid isPermaLink="false">http://timothyfitz.wordpress.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[Continuous Deployment is the practice of shipping your code as frequently as possible. While relatively straightforward when applied to a production deploy as is common for websites and services, when applied to traditional client side applications <strong>there are three big problems to solve: the software update user experience, the collection and interpretation of quality metrics, and surviving the chaos of the desktop environment.</strong>

The first problem with Continuous Deployment for downloadable client software? It's a download! Classically, the upgrade process is: The user decides to update, finds the software's website again, downloads the newer version and runs the installer. This requires the user to remember that the software can be upgraded, find a need for it to be upgraded and determine it's worth the effort and risk of breaking their install. When OmniFocus was in beta the developers were releasing constantly, many times per day! While the upgrade was manual and you had to remember to do it, the whole process worked well because the selected users were software-hip and often software developers themselves. I have nothing but praise for the way The Omni Group rapidly developed and deployed; plus they published a bunch of <a href="http://blog.omnigroup.com/2007/07/25/omnifocus-crash-statistics/">statistics</a>! Still, there are clearly better ways to handle that stream of upgrades.
<h2>Software Update Experience</h2>
For successful Continuous Deployment, you need as many users as possible on your most recent deploy. There are a few models for increasing upgrade adoption, and I'll list them in order of effectiveness.

<strong>Check for updates on application startup</strong>
When you run the software, it reaches out to your download servers and checks for a new version. If available, it provides an upgrade prompt. These dialogs are most useful when they can sell the user on the upgrade, then it feels like a natural process "I'm upgrading because I want to use new feature Y". These prompts can become extremely annoying, depending on where in the user's story your application starts. This is the process IMVU uses today, with all of it's pros and cons. The best case user story is: The user remembers she wants to hang out on IMVU and launches the client. She notices we've added a cool new feature and decides to upgrade. The process is fast and relatively painless. The worst case user story is: The user is browsing our website and clicks a link to hang out in a room full of people he finds interesting. On his way to the room, he's gets a dialog box with a bunch of text on it. He doesn't bother reading because it doesn't look related at all to what he's trying to do. He clicks yes because that appears to be the most obvious way to continue into his room. He's now forced to wait through a painfully slow download, a painfully slow install process and far to many dialogs with questions he doesn't care about. By the time he makes it into the room no one is there. The update process has completely failed him. Let's just say there is definitely room for improvement.

<strong>Bundle an Update Manager</strong>
This is the approach taken by Microsoft, Apple and Adobe to name a few. Upgrades are automatically downloaded in the background by an always-running background process and then at the user's pace they're optionally installed. While this could be theoretically a painless process, the three vendors I've named have all decided it's important to prompt you until you install the upgrades. This nagging becomes so frustrating that it drives users away from the products themselves (personally, I use FoxIt Reader just to avoid the adobe download manager).

<strong>Download in the background, upgrade on the next run</strong>
The FireFox approach, downloads happen it the background while you run the application. When they're finished you're casually prompted once and only once if you'd like to restart the app now to apply the upgrade. If you don't, the next time you run FireFox you're forced through the prompt-less update process. A huge improvement over constant nags and useless-prompts filled installers. Updating FireFox isn't something I think about anymore, it just happens. I would call this the gold standard of current update practices. We know it works, and it works really well.

<strong>Download in the background, upgrade invisibly</strong>
This is the Google Chrome model. When updates are available they're automatically downloaded in the background. They're upgraded, and as far as I can tell they're applied invisibly as soon as the browser is restarted. I've never seen an update progress bar and I've never been asked if I wanted to upgrade. Their process is so seamless that I have to research and guess at most of the details. This has huge benefits for Continuous Deployment, as you'll have large numbers of users on new versions very quickly. Unfortunately this also means users are surprised when UI elements change, and are often frustrated.

<strong>Download in the background, upgrade the running process</strong>
Can you do better than Google Chrome? I think you can. Imagine if your client downloaded and installed updates automatically in the background, and then spawned a second client process. This process would have it's state synced up with the running process and then at some point it would be swapped in. This swap would transfer over operating system resources (files and sockets, maybe even windows and other resources depending on operating system). Under this system you could realistically expect most of your users to be running your most recent version within minutes of releasing it; meeting or exceeding the deploy-feedback cycle of our website deploy process. I'm guessing Chrome is actually close to this model. A lot of the state is currently stored in a sqlite database making the sync-up part relatively easy. The top level window and other core resources are owned by a small pseudo-kernel. You could easily imagine a scenario where deploys of non-pseudo-kernel changes could instantly update while pseudo-kernel changes would happen on next update. For all I know Chrome is doing that today! This doesn't address, and in fact exacerbates UI and functionality changing friction.
<h2>Success Metrics</h2>
Unlike a production environment, you don't control any of the environmental variables. You'll face broken hardware, out of memory conditions, foreign language operating systems, random dlls, other processes inserting their code into yours, drivers fighting for first-to-act in the event of crashes and other progressively more esoteric and unpredictable integration issues. Anyone who writes widely-run client software quickly models the user's computer as an aggressively hostile environment. The examples I gave are all issues IMVU has had to understand and solve.

As with all hard problems, the first step is to create the proper feedback loop: you need to create a crash reporting framework. While IMVU rolled it's own, since then Google has open sourced their <a href="http://code.google.com/p/crashrpt/">own</a>. Note that users are asked before crash reports are submitted, and we allow a user to view their own report. The goal is to get a high signal to noise chunk of information from the client's crashed state. I've posted a <a href="http://timothyfitz.wordpress.com/sample-imvu-crash-log/">sample crash report</a>, though it was synthetically created by a crash-test. I hope no one notices my desktop is a 1.86ghz processor... Of note, we collect stacks that unwind through both C++ and Python through some reporting magic that Chad Austin, one of my prolific coworkers, wrote and is detailing in a <a href="http://aegisknight.org/tag?crashes">series of posts</a>.  In addition to crash reporting, you'll need extensive crash metrics and preferably user behaviour metrics. Every release should be A/B tested against the previous release, allowing you to prevent unknown regressions in business metrics. These metrics are a game changer, but those details will have to wait for another post.

 

[caption id="attachment_115" align="aligncenter" width="580" caption="A screenshot of our aggregate bug report data"]<img class="size-full wp-image-115 " title="Bug Report Screenshot" src="http://timothyfitz.files.wordpress.com/2009/03/bug-report-ss.png" alt="A screenshot of our aggregate bug report data" width="580" height="356" />[/caption]

If your application requires a network connection you've been gifted the two best possible metrics: logins and pings. Login metrics let you notice crashes on startup or regressions in the adoption path. These are more common than you think when they can be caused or exacerbated by 3rd party software or windows updates. Ping metrics let you measure session length and look for when a client stopped pinging without giving a reason to the server. These metrics will tell you when your crash reporting is broken, or when you've regressed in a way that breaks the utility of the application without breaking the application itself. A common example of this are deadlocks, or more generically stalls. The application hasn't crashed but for some reason isn't progressing. Once you've found a regression case like that you can implement logic to look for the failure condition and alert on it, to fail fast in the event of future regressions. For deadlocks we wrote a watcher thread that polls the stack of the main thread, if it hasn't changed for a few seconds then we report back with the state of all of the current threads. In aggregate that means graphs that trend closely with our user's frustration.

 

[caption id="attachment_116" align="aligncenter" width="580" caption="Deadlocks or stalls, measured in millistalls (thanks nonsensical Cacti defaults)"]<img class="size-full wp-image-116" title="Deadlocks" src="http://timothyfitz.files.wordpress.com/2009/03/deadlocks.png" alt="Deadlocks or stalls, measured in millistalls (thanks nonsensical Cacti defaults)" width="580" height="201" />[/caption]

 

Once you have great metrics, you have to strike a balance between asking customers to endure an update and gaining the feedback from your crash reporting and business metrics. For IMVU's website deployment process we had a 2-phase roll out, similarly for Client development we have "release track" and "pre-release track", where releases are version X.0 and pre-releases are subsequent dot releases. We ship a pre-release per day, and a full release every two weeks. Existing users are free opt-in and opt-out of the pre-release track. Newly registered users are sometimes given a pre-release as part of an A/B experiment against the prior full release, but are then offered the next full release and do not stay in the pre-release track. Google Chrome is another example of this model. By default you're given the stable channel which is a quarterly update in addition to security updates. You can opt-in to the beta channel for monthly updates or the dev channel for weekly updates.
<h2>The harsh reality of the desktop environment</h2>
Once you're measuring your success rates in the wild and deploying regularly, you'll get the real picture of how harsh the desktop landscape is. Continuous Deployment changes your mindset around these harsh realities: code has to survive in the wild, but you also must engineer automated testing and production measurement to ensure that changes won't regress when run in a hostile environment.

<strong>Hostile Hardware</strong>

To start, software you write and deploy will have to survive on effectively hostile hardware and drivers. For a 3d application, that most commonly means crashes on startup, crashes when a specific 3d setting is used or jarring visual glitches. Drivers and other software on windows have a far-too-common practice of dynamically linking their own code into your process. Apart from being rude, this can lead to crashes in your process in code you didn't write or call and can't reproduce without the same set of hardware and drivers. Needless to say, crash reports contain an enumeration of hardware and drivers.

Running in an unknown environment means dealing with the long-tail of odd configurations: systems with completely hosed registries, corporate firewalls that allow only HTTP and only port 80, antivirus software being nearly malicious, virus software being overtly malicious and motherboards that degrade when they heat up just to name a few. These problems scale up with your user-base, and if you choose to ignore "incorrectly" configured computers you'll end up ignoring a surprisingly large percentage of your would-have-been customers. 

<strong>Go to the source</strong>

Dealing with these issues is compounded by the fact that you have minimal knowledge about the computers that are actually running your software. Sometimes the best metrics in the world aren't enough. For IMVU that meant we were forced to go as far as buying one of our user's laptop. She was a power user who heavily used our software and ran into its limitations regularly. The combination of her laptop and her account would run into bugs we couldn't reproduce on the hardware we had in house. We purchased her laptop instead of just buying the same hardware configuration because she was gracious enough to not wipe the machine; we were testing with all of the software she commonly ran in parallel. This level of testing takes a lot of customer trust, and we're truly indebted to her for allowing us the privilege of that kind of access.

We also looked at our client hardware metrics and the <a href="http://unity3d.com/webplayer/hwstats/pages/web-2009Q1.html">Unity hardware survey</a>. We cobbled together our 15th percentile computer. This is a prototypical machine which is better than 1/8th of our user's hardware: 384mb of ram, a 2ghz Pentium 4 and no hardware graphics acceleration. These machines commonly reproduced issues that our business class dell boxes never would. Many of our users have intel graphics "hardware", which is so inefficient at 3d that it's a better experience to render our graphics in pure software. Ideally we'd run automated tests on these machines as part of our deploy process, but we're not there yet. Our current test infrastructure assumes that you can compile our source code in reasonable time on the testing machine.

Before I end this post I'd like to add a few words of caution. If you're deploying client software constantly then you're relying on a small set of code to be nearly perfect: your roll back loop. In a worst case scenario, a client installer was shipped that somehow breaks the user's ability to downgrade the client. In the absolute worst case, that means breaking the machine completely; let's hope you won't have to create a <a href="http://www.eveonline.com/updates/bootinifix.asp">step by step tutorial of how recreate your boot.ini</a>. Every IMVU client releases is smoke tested by a human before being released.

It's a much rougher environment for Continuous Deployment on client software. There's non-obvious deploy semantics, rough metrics tracking, and a hostile environment all standing in the way of shipping faster. <strong>Despite the challenges Continuous Deployment for client software is both possible, and has the same return of Continuous Deployment elsewhere: better feedback, faster iteration times and the ability to make a product better, faster.</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2009-03-09 03:37:52</wp:post_date>
		<wp:post_date_gmt>2009-03-09 11:37:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cd-for-client-software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[6738078]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>284</wp:comment_id>
			<wp:comment_author><![CDATA[moshez]]></wp:comment_author>
			<wp:comment_author_email>illyria_god_king@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://moshez.livejournal.com</wp:comment_author_url>
			<wp:comment_author_IP>212.199.108.202</wp:comment_author_IP>
			<wp:comment_date>2009-04-06 06:15:09</wp:comment_date>
			<wp:comment_date_gmt>2009-04-06 14:15:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Timothy, this is a great post.

One problem: possession by a non-person is "its", not "it's". It makes your post hard to read for a trivial reason :(]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2288307</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>529</wp:comment_id>
			<wp:comment_author><![CDATA[October 28 asides]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://markbult.com/2010/10/october-28-asides/</wp:comment_author_url>
			<wp:comment_author_IP>205.186.184.15</wp:comment_author_IP>
			<wp:comment_date>2010-10-28 11:55:27</wp:comment_date>
			<wp:comment_date_gmt>2010-10-28 19:55:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Deployment: Ship more frequently Timothy Fitz of IMVU presents the company’s Continuous Deployment system of software development (video from Sep 22, 2009). [via MJ]  This entry was posted in asides and tagged Apple, coffee, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1288295728]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>638</wp:comment_id>
			<wp:comment_author><![CDATA[OCTO talks ! &raquo; 5 bonnes raisons de déployer en continu]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.octo.com/5-bonnes-raisons-de-deployer-en-continu/</wp:comment_author_url>
			<wp:comment_author_IP>91.121.144.138</wp:comment_author_IP>
			<wp:comment_date>2011-06-14 13:40:19</wp:comment_date>
			<wp:comment_date_gmt>2011-06-14 21:40:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] jours n&#8217;est clairement pas une bonne idée, mais différents mécanismes (détaillés dans cet article) offrent néanmoins la possibilité d&#8217;accélérer le rythme des mises à [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1308087620]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308087620.2481";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>360</wp:comment_id>
			<wp:comment_author><![CDATA[Allyson Arguelles]]></wp:comment_author>
			<wp:comment_author_email>next10@next10.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.corporateexpressinc.com/minicoach.cfm</wp:comment_author_url>
			<wp:comment_author_IP>70.81.138.45</wp:comment_author_IP>
			<wp:comment_date>2009-12-20 17:53:56</wp:comment_date>
			<wp:comment_date_gmt>2009-12-21 01:53:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I came across your blog today and am looking forward to reading the archives! 
This post resonated so loudly with me  I have though similar things more than once.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
